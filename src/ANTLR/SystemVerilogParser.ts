// Generated from SystemVerilogParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { SystemVerilogParserListener } from "./SystemVerilogParserListener";

export class SystemVerilogParser extends Parser {
	public static readonly MODULE_KEYWORD = 1;
	public static readonly ENDMODULE = 2;
	public static readonly INTERFACE = 3;
	public static readonly ENDINTERFACE = 4;
	public static readonly CLASS = 5;
	public static readonly ENDCLASS = 6;
	public static readonly PACKAGE = 7;
	public static readonly ENDPACKAGE = 8;
	public static readonly PROGRAM = 9;
	public static readonly ENDPROGRAM = 10;
	public static readonly GENERATE = 11;
	public static readonly ENDGENERATE = 12;
	public static readonly TASK = 13;
	public static readonly ENDTASK = 14;
	public static readonly FUNCTION = 15;
	public static readonly ENDFUNCTION = 16;
	public static readonly CLOCKING = 17;
	public static readonly MODPORT = 18;
	public static readonly TIMEUNIT = 19;
	public static readonly TIMEPRECISION = 20;
	public static readonly IMPLEMENTS = 21;
	public static readonly ALIAS = 22;
	public static readonly ASSIGN = 23;
	public static readonly DEASSIGN = 24;
	public static readonly FORCE = 25;
	public static readonly RELEASE = 26;
	public static readonly DEFPARAM = 27;
	public static readonly INITIAL = 28;
	public static readonly FOREVER = 29;
	public static readonly REPEAT = 30;
	public static readonly ALWAYS_KEYWORD = 31;
	public static readonly IF = 32;
	public static readonly ELSE = 33;
	public static readonly FOREACH = 34;
	public static readonly FOR = 35;
	public static readonly WHILE = 36;
	public static readonly DO = 37;
	public static readonly RETURN = 38;
	public static readonly BREAK = 39;
	public static readonly CONTINUE = 40;
	public static readonly WAIT = 41;
	public static readonly WAITORDER = 42;
	public static readonly CASE_KEYWORD = 43;
	public static readonly ENDCASE = 44;
	public static readonly DEFAULT = 45;
	public static readonly PRIORITY = 46;
	public static readonly UNIQUE = 47;
	public static readonly UNIQUE0 = 48;
	public static readonly INSIDE = 49;
	public static readonly WITH = 50;
	public static readonly MATCHES = 51;
	public static readonly ASSERT = 52;
	public static readonly ASSUME = 53;
	public static readonly COVER = 54;
	public static readonly FINAL = 55;
	public static readonly FORK = 56;
	public static readonly FORKJOIN = 57;
	public static readonly DISABLE = 58;
	public static readonly EXTERN = 59;
	public static readonly BEGIN = 60;
	public static readonly END = 61;
	public static readonly DIST = 62;
	public static readonly NEW = 63;
	public static readonly VIRTUAL = 64;
	public static readonly PURE = 65;
	public static readonly EXTENDS = 66;
	public static readonly STATIC = 67;
	public static readonly AUTOMATIC = 68;
	public static readonly PROTECTED = 69;
	public static readonly LOCAL = 70;
	public static readonly TYPEDEF = 71;
	public static readonly NETTYPE = 72;
	public static readonly IMPORT = 73;
	public static readonly EXPORT = 74;
	public static readonly THIS = 75;
	public static readonly SUPER = 76;
	public static readonly THISSUPER = 77;
	public static readonly CHANDLE = 78;
	public static readonly EVENT = 79;
	public static readonly ONESTEP = 80;
	public static readonly CLASS_ROOT = 81;
	public static readonly SCOPE_UNIT = 82;
	public static readonly SCOPE_LOCAL = 83;
	public static readonly SCOPE_STD = 84;
	public static readonly SCOPE_FORALL = 85;
	public static readonly DOL_FATAL = 86;
	public static readonly DOL_ERROR = 87;
	public static readonly DOL_WARNING = 88;
	public static readonly DOL_INFO = 89;
	public static readonly POSEDGE = 90;
	public static readonly NEGEDGE = 91;
	public static readonly EDGE = 92;
	public static readonly REF = 93;
	public static readonly INPUT = 94;
	public static readonly OUTPUT = 95;
	public static readonly INOUT = 96;
	public static readonly CONSTRAINT = 97;
	public static readonly CONST = 98;
	public static readonly PARAMETER = 99;
	public static readonly LOCALPARAM = 100;
	public static readonly SIGNING = 101;
	public static readonly STRING = 102;
	public static readonly INTEGER_ATOM_TYPE = 103;
	public static readonly INTEGER_VECTOR_TYPE = 104;
	public static readonly NON_INTEGER_TYPE = 105;
	public static readonly NET_TYPE = 106;
	public static readonly INTERCONNECT = 107;
	public static readonly VAR = 108;
	public static readonly GENVAR = 109;
	public static readonly IFF = 110;
	public static readonly RANDOMIZE = 111;
	public static readonly RANDOM_QUALIFIER = 112;
	public static readonly VOID = 113;
	public static readonly NULL = 114;
	public static readonly TYPE = 115;
	public static readonly ENUM = 116;
	public static readonly TAGGED = 117;
	public static readonly STRUCT = 118;
	public static readonly UNION = 119;
	public static readonly PACKED = 120;
	public static readonly UNPACKED = 121;
	public static readonly SOLVE = 122;
	public static readonly SOFT = 123;
	public static readonly BEFORE = 124;
	public static readonly TIME_UNIT = 125;
	public static readonly OP_PRN = 126;
	public static readonly CL_PRN = 127;
	public static readonly OP_BRC = 128;
	public static readonly CL_BRC = 129;
	public static readonly OP_BRK = 130;
	public static readonly CL_BRK = 131;
	public static readonly OP_CAST = 132;
	public static readonly OP_PATTERN = 133;
	public static readonly QUO = 134;
	public static readonly COLON = 135;
	public static readonly SEMIC = 136;
	public static readonly DOT = 137;
	public static readonly COM = 138;
	public static readonly AT = 139;
	public static readonly EQ = 140;
	public static readonly QUES = 141;
	public static readonly XOR = 142;
	public static readonly OR = 143;
	public static readonly AND = 144;
	public static readonly INV = 145;
	public static readonly NOT = 146;
	public static readonly MINUS = 147;
	public static readonly PLUS = 148;
	public static readonly MULT = 149;
	public static readonly DIV = 150;
	public static readonly MOD = 151;
	public static readonly GT = 152;
	public static readonly LT = 153;
	public static readonly DOL = 154;
	public static readonly SHP = 155;
	public static readonly SHPSHP = 156;
	public static readonly SHPZERO = 157;
	public static readonly ANDANDAND = 158;
	public static readonly MINUSGT = 159;
	public static readonly MINUSGTGT = 160;
	public static readonly DISTW_EQ = 161;
	public static readonly DISTW_SL = 162;
	public static readonly ARR_XOR = 163;
	public static readonly ARR_AND = 164;
	public static readonly ARR_OR = 165;
	public static readonly SCOPE = 166;
	public static readonly FORALL = 167;
	public static readonly PLUSCOLON = 168;
	public static readonly MINUSCOLON = 169;
	public static readonly LTLTLTEQ = 170;
	public static readonly GTGTGTEQ = 171;
	public static readonly LTLTEQ = 172;
	public static readonly GTGTEQ = 173;
	public static readonly PLUSEQ = 174;
	public static readonly MINUSEQ = 175;
	public static readonly MULTEQ = 176;
	public static readonly DIVEQ = 177;
	public static readonly MODEQ = 178;
	public static readonly ANDEQ = 179;
	public static readonly OREQ = 180;
	public static readonly XOREQ = 181;
	public static readonly INVXOR = 182;
	public static readonly INVAND = 183;
	public static readonly INVOR = 184;
	public static readonly EQEQQUES = 185;
	public static readonly NOTEQQUES = 186;
	public static readonly EQEQEQ = 187;
	public static readonly NOTEQEQ = 188;
	public static readonly GTGTGT = 189;
	public static readonly LTLTLT = 190;
	public static readonly LTMINUSGT = 191;
	public static readonly EQEQ = 192;
	public static readonly NOTEQ = 193;
	public static readonly ANDAND = 194;
	public static readonly OROR = 195;
	public static readonly MULTMULT = 196;
	public static readonly LTEQ = 197;
	public static readonly GTEQ = 198;
	public static readonly XORINV = 199;
	public static readonly GTGT = 200;
	public static readonly LTLT = 201;
	public static readonly PLUSPLUS = 202;
	public static readonly MINUSMINUS = 203;
	public static readonly BINARY_NUMBER = 204;
	public static readonly OCTAL_NUMBER = 205;
	public static readonly HEX_NUMBER = 206;
	public static readonly SIZED_UNSIGNED = 207;
	public static readonly FIXED_POINT_NUMBER = 208;
	public static readonly SCIENCE_NUMBER = 209;
	public static readonly UNSIGNED_NUMBER = 210;
	public static readonly UNBASED_UNSIZED_LITERAL = 211;
	public static readonly STRING_LITERAL = 212;
	public static readonly SYSTEM_TF_IDENT = 213;
	public static readonly IDENT = 214;
	public static readonly SIMPLE_IDENT = 215;
	public static readonly ESCAPED_IDENT = 216;
	public static readonly WS = 217;
	public static readonly LINE_COMMENT = 218;
	public static readonly BLOCK_COMMENT = 219;
	public static readonly PP_DEFINE = 220;
	public static readonly PP_UNDEF = 221;
	public static readonly PP_INCLUDE = 222;
	public static readonly PP_TIMESCALE = 223;
	public static readonly PP_DEFAULT_NETTYPE = 224;
	public static readonly PP_IFDEF = 225;
	public static readonly PP_IFNDEF = 226;
	public static readonly PP_ELSE = 227;
	public static readonly PP_ELIF = 228;
	public static readonly PP_ENDIF = 229;
	public static readonly PP_CALL_NOARG = 230;
	public static readonly PP_CALL_ARG = 231;
	public static readonly PP_WS = 232;
	public static readonly PP_NL = 233;
	public static readonly PP_DIV = 234;
	public static readonly PP_DEFAULT_NETTYPE_VALUE = 235;
	public static readonly PP_STRING = 236;
	public static readonly PP_UNSIGNED_NUMBER = 237;
	public static readonly PP_TIME_UNIT = 238;
	public static readonly PP_IDENT = 239;
	public static readonly PP_LINE_COMMENT = 240;
	public static readonly PP_BLOCK_COMMENT = 241;
	public static readonly PPCL_WS = 242;
	public static readonly PPCL_CL_PRN = 243;
	public static readonly PPCL_COM = 244;
	public static readonly PPCL_IDENT = 245;
	public static readonly DF_WS = 246;
	public static readonly DF_NL = 247;
	public static readonly DF_MACRO_NAME_NOARG = 248;
	public static readonly DF_MACRO_NAME_ARG = 249;
	public static readonly DF_IDENT = 250;
	public static readonly DFAG_WS = 251;
	public static readonly DFAG_NL = 252;
	public static readonly DFAG_CL_PRN = 253;
	public static readonly DFAG_COM = 254;
	public static readonly DFAG_EQ = 255;
	public static readonly DFAG_IDENT = 256;
	public static readonly DFTX_MACRO_TEXT = 257;
	public static readonly BACKQUOTE = 258;
	public static readonly RULE_source_text = 0;
	public static readonly RULE_description = 1;
	public static readonly RULE_module_nonansi_header = 2;
	public static readonly RULE_module_ansi_header = 3;
	public static readonly RULE_module_declaration = 4;
	public static readonly RULE_interface_declaration = 5;
	public static readonly RULE_interface_nonansi_header = 6;
	public static readonly RULE_interface_ansi_header = 7;
	public static readonly RULE_class_declaration = 8;
	public static readonly RULE_interface_class_type = 9;
	public static readonly RULE_interface_class_declaration = 10;
	public static readonly RULE_interface_class_item = 11;
	public static readonly RULE_interface_class_method = 12;
	public static readonly RULE_package_declaration = 13;
	public static readonly RULE_timeunits_declaration = 14;
	public static readonly RULE_parameter_port_list = 15;
	public static readonly RULE_parameter_port_declaration = 16;
	public static readonly RULE_list_of_ports = 17;
	public static readonly RULE_list_of_port_declarations = 18;
	public static readonly RULE_port_declaration = 19;
	public static readonly RULE_port = 20;
	public static readonly RULE_port_expression = 21;
	public static readonly RULE_port_reference = 22;
	public static readonly RULE_port_direction = 23;
	public static readonly RULE_net_port_header = 24;
	public static readonly RULE_interface_port_header = 25;
	public static readonly RULE_ansi_port_declaration = 26;
	public static readonly RULE_elaboration_system_task = 27;
	public static readonly RULE_finish_number = 28;
	public static readonly RULE_module_common_item = 29;
	public static readonly RULE_module_item = 30;
	public static readonly RULE_module_or_generate_item = 31;
	public static readonly RULE_module_or_generate_item_declaration = 32;
	public static readonly RULE_non_port_module_item = 33;
	public static readonly RULE_parameter_override = 34;
	public static readonly RULE_interface_or_generate_item = 35;
	public static readonly RULE_extern_tf_declaration = 36;
	public static readonly RULE_interface_item = 37;
	public static readonly RULE_non_port_interface_item = 38;
	public static readonly RULE_class_item = 39;
	public static readonly RULE_class_property = 40;
	public static readonly RULE_class_method = 41;
	public static readonly RULE_class_constructor_prototype = 42;
	public static readonly RULE_class_constraint = 43;
	public static readonly RULE_class_item_qualifier = 44;
	public static readonly RULE_property_qualifier = 45;
	public static readonly RULE_method_qualifier = 46;
	public static readonly RULE_method_prototype = 47;
	public static readonly RULE_class_constructor_declaration = 48;
	public static readonly RULE_constraint_declaration = 49;
	public static readonly RULE_constraint_block = 50;
	public static readonly RULE_constraint_block_item = 51;
	public static readonly RULE_solve_before_list = 52;
	public static readonly RULE_constraint_primary = 53;
	public static readonly RULE_constraint_expression = 54;
	public static readonly RULE_uniqueness_constraint = 55;
	public static readonly RULE_constraint_set = 56;
	public static readonly RULE_dist_list = 57;
	public static readonly RULE_dist_item = 58;
	public static readonly RULE_dist_weight = 59;
	public static readonly RULE_constraint_prototype = 60;
	public static readonly RULE_constraint_prototype_qualifier = 61;
	public static readonly RULE_package_item = 62;
	public static readonly RULE_package_or_generate_item_declaration = 63;
	public static readonly RULE_anonymous_program = 64;
	public static readonly RULE_local_parameter_declaration = 65;
	public static readonly RULE_parameter_declaration = 66;
	public static readonly RULE_inout_declaration = 67;
	public static readonly RULE_input_declaration = 68;
	public static readonly RULE_output_declaration = 69;
	public static readonly RULE_interface_port_declaration = 70;
	public static readonly RULE_ref_declaration = 71;
	public static readonly RULE_data_declaration = 72;
	public static readonly RULE_package_import_declaration = 73;
	public static readonly RULE_package_import_item = 74;
	public static readonly RULE_package_export_declaration = 75;
	public static readonly RULE_genvar_declaration = 76;
	public static readonly RULE_net_declaration = 77;
	public static readonly RULE_type_declaration = 78;
	public static readonly RULE_type_declaration_type = 79;
	public static readonly RULE_net_type_declaration = 80;
	public static readonly RULE_lifetime = 81;
	public static readonly RULE_casting_type = 82;
	public static readonly RULE_data_type = 83;
	public static readonly RULE_data_type_or_implicit = 84;
	public static readonly RULE_implicit_data_type = 85;
	public static readonly RULE_enum_base_type = 86;
	public static readonly RULE_enum_name_declaration = 87;
	public static readonly RULE_class_scope = 88;
	public static readonly RULE_class_type = 89;
	public static readonly RULE_integer_type = 90;
	public static readonly RULE_net_port_type = 91;
	public static readonly RULE_variable_port_type = 92;
	public static readonly RULE_var_data_type = 93;
	public static readonly RULE_simple_type = 94;
	public static readonly RULE_struct_union = 95;
	public static readonly RULE_data_type_or_void = 96;
	public static readonly RULE_struct_union_member = 97;
	public static readonly RULE_type_reference = 98;
	public static readonly RULE_delay_value = 99;
	public static readonly RULE_list_of_defparam_assignments = 100;
	public static readonly RULE_list_of_genvar_identifiers = 101;
	public static readonly RULE_list_of_interface_identifiers = 102;
	public static readonly RULE_list_of_net_decl_assignments = 103;
	public static readonly RULE_list_of_param_assignments = 104;
	public static readonly RULE_list_of_port_identifiers = 105;
	public static readonly RULE_list_of_tf_variable_identifiers = 106;
	public static readonly RULE_list_of_type_assignments = 107;
	public static readonly RULE_list_of_variable_decl_assignments = 108;
	public static readonly RULE_list_of_variable_identifiers = 109;
	public static readonly RULE_list_of_variable_port_identifiers = 110;
	public static readonly RULE_defparam_assignment = 111;
	public static readonly RULE_net_decl_assignment = 112;
	public static readonly RULE_param_assignment = 113;
	public static readonly RULE_type_assignment = 114;
	public static readonly RULE_variable_decl_assignment = 115;
	public static readonly RULE_class_new = 116;
	public static readonly RULE_dynamic_array_new = 117;
	public static readonly RULE_unpacked_dimension = 118;
	public static readonly RULE_packed_dimension = 119;
	public static readonly RULE_assosiative_dimension = 120;
	public static readonly RULE_variable_dimension = 121;
	public static readonly RULE_queue_dimension = 122;
	public static readonly RULE_unsized_dimension = 123;
	public static readonly RULE_function_data_type_or_implicit = 124;
	public static readonly RULE_function_declaration = 125;
	public static readonly RULE_function_body_declaration = 126;
	public static readonly RULE_function_prototype = 127;
	public static readonly RULE_task_declaration = 128;
	public static readonly RULE_task_body_declaration = 129;
	public static readonly RULE_tf_item_declaration = 130;
	public static readonly RULE_tf_port_list = 131;
	public static readonly RULE_tf_port_item = 132;
	public static readonly RULE_tf_port_direction = 133;
	public static readonly RULE_tf_port_declaration = 134;
	public static readonly RULE_task_prototype = 135;
	public static readonly RULE_block_item_declaration = 136;
	public static readonly RULE_modport_declaration = 137;
	public static readonly RULE_modport_item = 138;
	public static readonly RULE_modport_ports_declaration = 139;
	public static readonly RULE_modport_clocking_declaration = 140;
	public static readonly RULE_modport_simple_ports_declaration = 141;
	public static readonly RULE_modport_simple_port = 142;
	public static readonly RULE_modport_tf_ports_declaration = 143;
	public static readonly RULE_modport_tf_port = 144;
	public static readonly RULE_import_export = 145;
	public static readonly RULE_concurrent_assertion_item = 146;
	public static readonly RULE_concurrent_assertion_statement = 147;
	public static readonly RULE_expression_or_dist = 148;
	public static readonly RULE_module_instantiation = 149;
	public static readonly RULE_parameter_value_assignment = 150;
	public static readonly RULE_parameter_assign_comma = 151;
	public static readonly RULE_list_of_parameter_assignments = 152;
	public static readonly RULE_ordered_parameter_assignment = 153;
	public static readonly RULE_named_parameter_assignment = 154;
	public static readonly RULE_hierarchical_instance = 155;
	public static readonly RULE_name_of_instance = 156;
	public static readonly RULE_port_conn_comma = 157;
	public static readonly RULE_list_of_port_connections = 158;
	public static readonly RULE_ordered_port_connection = 159;
	public static readonly RULE_named_port_connection = 160;
	public static readonly RULE_checker_instantiation = 161;
	public static readonly RULE_list_of_checker_port_connections = 162;
	public static readonly RULE_generate_region = 163;
	public static readonly RULE_loop_generate_construct = 164;
	public static readonly RULE_genvar_initialization = 165;
	public static readonly RULE_genvar_iteration = 166;
	public static readonly RULE_conditional_generate_construct = 167;
	public static readonly RULE_if_generate_construct = 168;
	public static readonly RULE_case_generate_construct = 169;
	public static readonly RULE_case_generate_item = 170;
	public static readonly RULE_generate_block = 171;
	public static readonly RULE_generate_item = 172;
	public static readonly RULE_continuous_assign = 173;
	public static readonly RULE_list_of_net_assignments = 174;
	public static readonly RULE_list_of_variable_assignments = 175;
	public static readonly RULE_net_alias = 176;
	public static readonly RULE_net_assignment = 177;
	public static readonly RULE_initial_construct = 178;
	public static readonly RULE_always_construct = 179;
	public static readonly RULE_final_construct = 180;
	public static readonly RULE_blocking_assignment = 181;
	public static readonly RULE_operator_assignment = 182;
	public static readonly RULE_assignment_operator = 183;
	public static readonly RULE_nonblocking_assignment = 184;
	public static readonly RULE_procedural_continuous_assignment = 185;
	public static readonly RULE_variable_assignment = 186;
	public static readonly RULE_action_block = 187;
	public static readonly RULE_seq_block = 188;
	public static readonly RULE_statement_or_null = 189;
	public static readonly RULE_statement = 190;
	public static readonly RULE_statement_item = 191;
	public static readonly RULE_function_statement = 192;
	public static readonly RULE_function_statement_or_null = 193;
	public static readonly RULE_variable_identifier_list = 194;
	public static readonly RULE_procedural_timing_control_statement = 195;
	public static readonly RULE_delay_or_event_control = 196;
	public static readonly RULE_delay_control = 197;
	public static readonly RULE_event_control = 198;
	public static readonly RULE_event_expression = 199;
	public static readonly RULE_procedural_timing_control = 200;
	public static readonly RULE_jump_statement = 201;
	public static readonly RULE_wait_statement = 202;
	public static readonly RULE_event_trigger = 203;
	public static readonly RULE_disable_statement = 204;
	public static readonly RULE_conditional_statement = 205;
	public static readonly RULE_unique_priority = 206;
	public static readonly RULE_cond_predicate = 207;
	public static readonly RULE_expression_or_cond_pattern = 208;
	public static readonly RULE_cond_pattern = 209;
	public static readonly RULE_case_statement = 210;
	public static readonly RULE_case_expression = 211;
	public static readonly RULE_case_item = 212;
	public static readonly RULE_case_inside_item = 213;
	public static readonly RULE_case_item_expression = 214;
	public static readonly RULE_open_range_list = 215;
	public static readonly RULE_open_value_range = 216;
	public static readonly RULE_pattern = 217;
	public static readonly RULE_loop_statement = 218;
	public static readonly RULE_for_initialization = 219;
	public static readonly RULE_for_variable_declaration = 220;
	public static readonly RULE_for_step = 221;
	public static readonly RULE_for_step_assignment = 222;
	public static readonly RULE_loop_variables = 223;
	public static readonly RULE_subroutine_call_statement = 224;
	public static readonly RULE_assertion_item = 225;
	public static readonly RULE_deferred_immediate_assertion_item = 226;
	public static readonly RULE_procedural_assertion_statement = 227;
	public static readonly RULE_immediate_assertion_statement = 228;
	public static readonly RULE_simple_immediate_assertion_statement = 229;
	public static readonly RULE_simple_immediate_assert_statement = 230;
	public static readonly RULE_simple_immediate_assume_statement = 231;
	public static readonly RULE_simple_immediate_cover_statement = 232;
	public static readonly RULE_deferred_immediate_assertion_statement = 233;
	public static readonly RULE_deferred_immediate_assert_statement = 234;
	public static readonly RULE_deferred_immediate_assume_statement = 235;
	public static readonly RULE_deferred_immediate_cover_statement = 236;
	public static readonly RULE_cycle_delay = 237;
	public static readonly RULE_edge_ident = 238;
	public static readonly RULE_concatenation = 239;
	public static readonly RULE_constant_concatenation = 240;
	public static readonly RULE_constant_multiple_concatenation = 241;
	public static readonly RULE_multiple_concatenation = 242;
	public static readonly RULE_array_range_expression = 243;
	public static readonly RULE_empty_queue = 244;
	public static readonly RULE_constant_function_call = 245;
	public static readonly RULE_tf_call = 246;
	public static readonly RULE_system_tf_call = 247;
	public static readonly RULE_subroutine_call = 248;
	public static readonly RULE_function_subroutine_call = 249;
	public static readonly RULE_arg_comma = 250;
	public static readonly RULE_list_of_arguments = 251;
	public static readonly RULE_method_call = 252;
	public static readonly RULE_method_call_root = 253;
	public static readonly RULE_method_call_body = 254;
	public static readonly RULE_built_in_method_call = 255;
	public static readonly RULE_array_manipulation_call = 256;
	public static readonly RULE_randomize_call = 257;
	public static readonly RULE_array_method_name = 258;
	public static readonly RULE_inc_or_dec_expression = 259;
	public static readonly RULE_constant_expression = 260;
	public static readonly RULE_constant_mintypmax_expression = 261;
	public static readonly RULE_constant_param_expression = 262;
	public static readonly RULE_param_expression = 263;
	public static readonly RULE_constant_range_expression = 264;
	public static readonly RULE_constant_part_select_range = 265;
	public static readonly RULE_constant_range = 266;
	public static readonly RULE_constant_indexed_range = 267;
	public static readonly RULE_expression = 268;
	public static readonly RULE_tagged_union_expression = 269;
	public static readonly RULE_value_range = 270;
	public static readonly RULE_mintypmax_expression = 271;
	public static readonly RULE_part_select_range = 272;
	public static readonly RULE_indexed_range = 273;
	public static readonly RULE_genvar_expression = 274;
	public static readonly RULE_constant_primary = 275;
	public static readonly RULE_primary = 276;
	public static readonly RULE_class_qualifier = 277;
	public static readonly RULE_range_expression = 278;
	public static readonly RULE_primary_literal = 279;
	public static readonly RULE_time_literal = 280;
	public static readonly RULE_implicit_class_handle = 281;
	public static readonly RULE_bit_select = 282;
	public static readonly RULE_select = 283;
	public static readonly RULE_nonrange_select = 284;
	public static readonly RULE_constant_bit_select = 285;
	public static readonly RULE_constant_select = 286;
	public static readonly RULE_constant_cast = 287;
	public static readonly RULE_cast = 288;
	public static readonly RULE_net_lvalue = 289;
	public static readonly RULE_variable_lvalue = 290;
	public static readonly RULE_non_range_variable_lvalue = 291;
	public static readonly RULE_number = 292;
	public static readonly RULE_integral_number = 293;
	public static readonly RULE_decimal_number = 294;
	public static readonly RULE_real_number = 295;
	public static readonly RULE_unary_operator = 296;
	public static readonly RULE_binary_operator = 297;
	public static readonly RULE_inc_or_dec_operator = 298;
	public static readonly RULE_unary_module_path_operator = 299;
	public static readonly RULE_binary_module_path_operator = 300;
	public static readonly RULE_package_scope = 301;
	public static readonly RULE_ident = 302;
	public static readonly RULE_ps_ident = 303;
	public static readonly RULE_hier_ident = 304;
	public static readonly RULE_ps_or_hier_ident = 305;
	public static readonly RULE_pp_text = 306;
	public static readonly RULE_pp_directive = 307;
	public static readonly RULE_pp_default_nettype = 308;
	public static readonly RULE_pp_timescale = 309;
	public static readonly RULE_pp_include = 310;
	public static readonly RULE_pp_define_only = 311;
	public static readonly RULE_pp_define_noarg = 312;
	public static readonly RULE_pp_define_arg = 313;
	public static readonly RULE_pp_undef = 314;
	public static readonly RULE_pp_call_noarg = 315;
	public static readonly RULE_pp_call_arg = 316;
	public static readonly RULE_pp_ifdef = 317;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"source_text", "description", "module_nonansi_header", "module_ansi_header", 
		"module_declaration", "interface_declaration", "interface_nonansi_header", 
		"interface_ansi_header", "class_declaration", "interface_class_type", 
		"interface_class_declaration", "interface_class_item", "interface_class_method", 
		"package_declaration", "timeunits_declaration", "parameter_port_list", 
		"parameter_port_declaration", "list_of_ports", "list_of_port_declarations", 
		"port_declaration", "port", "port_expression", "port_reference", "port_direction", 
		"net_port_header", "interface_port_header", "ansi_port_declaration", "elaboration_system_task", 
		"finish_number", "module_common_item", "module_item", "module_or_generate_item", 
		"module_or_generate_item_declaration", "non_port_module_item", "parameter_override", 
		"interface_or_generate_item", "extern_tf_declaration", "interface_item", 
		"non_port_interface_item", "class_item", "class_property", "class_method", 
		"class_constructor_prototype", "class_constraint", "class_item_qualifier", 
		"property_qualifier", "method_qualifier", "method_prototype", "class_constructor_declaration", 
		"constraint_declaration", "constraint_block", "constraint_block_item", 
		"solve_before_list", "constraint_primary", "constraint_expression", "uniqueness_constraint", 
		"constraint_set", "dist_list", "dist_item", "dist_weight", "constraint_prototype", 
		"constraint_prototype_qualifier", "package_item", "package_or_generate_item_declaration", 
		"anonymous_program", "local_parameter_declaration", "parameter_declaration", 
		"inout_declaration", "input_declaration", "output_declaration", "interface_port_declaration", 
		"ref_declaration", "data_declaration", "package_import_declaration", "package_import_item", 
		"package_export_declaration", "genvar_declaration", "net_declaration", 
		"type_declaration", "type_declaration_type", "net_type_declaration", "lifetime", 
		"casting_type", "data_type", "data_type_or_implicit", "implicit_data_type", 
		"enum_base_type", "enum_name_declaration", "class_scope", "class_type", 
		"integer_type", "net_port_type", "variable_port_type", "var_data_type", 
		"simple_type", "struct_union", "data_type_or_void", "struct_union_member", 
		"type_reference", "delay_value", "list_of_defparam_assignments", "list_of_genvar_identifiers", 
		"list_of_interface_identifiers", "list_of_net_decl_assignments", "list_of_param_assignments", 
		"list_of_port_identifiers", "list_of_tf_variable_identifiers", "list_of_type_assignments", 
		"list_of_variable_decl_assignments", "list_of_variable_identifiers", "list_of_variable_port_identifiers", 
		"defparam_assignment", "net_decl_assignment", "param_assignment", "type_assignment", 
		"variable_decl_assignment", "class_new", "dynamic_array_new", "unpacked_dimension", 
		"packed_dimension", "assosiative_dimension", "variable_dimension", "queue_dimension", 
		"unsized_dimension", "function_data_type_or_implicit", "function_declaration", 
		"function_body_declaration", "function_prototype", "task_declaration", 
		"task_body_declaration", "tf_item_declaration", "tf_port_list", "tf_port_item", 
		"tf_port_direction", "tf_port_declaration", "task_prototype", "block_item_declaration", 
		"modport_declaration", "modport_item", "modport_ports_declaration", "modport_clocking_declaration", 
		"modport_simple_ports_declaration", "modport_simple_port", "modport_tf_ports_declaration", 
		"modport_tf_port", "import_export", "concurrent_assertion_item", "concurrent_assertion_statement", 
		"expression_or_dist", "module_instantiation", "parameter_value_assignment", 
		"parameter_assign_comma", "list_of_parameter_assignments", "ordered_parameter_assignment", 
		"named_parameter_assignment", "hierarchical_instance", "name_of_instance", 
		"port_conn_comma", "list_of_port_connections", "ordered_port_connection", 
		"named_port_connection", "checker_instantiation", "list_of_checker_port_connections", 
		"generate_region", "loop_generate_construct", "genvar_initialization", 
		"genvar_iteration", "conditional_generate_construct", "if_generate_construct", 
		"case_generate_construct", "case_generate_item", "generate_block", "generate_item", 
		"continuous_assign", "list_of_net_assignments", "list_of_variable_assignments", 
		"net_alias", "net_assignment", "initial_construct", "always_construct", 
		"final_construct", "blocking_assignment", "operator_assignment", "assignment_operator", 
		"nonblocking_assignment", "procedural_continuous_assignment", "variable_assignment", 
		"action_block", "seq_block", "statement_or_null", "statement", "statement_item", 
		"function_statement", "function_statement_or_null", "variable_identifier_list", 
		"procedural_timing_control_statement", "delay_or_event_control", "delay_control", 
		"event_control", "event_expression", "procedural_timing_control", "jump_statement", 
		"wait_statement", "event_trigger", "disable_statement", "conditional_statement", 
		"unique_priority", "cond_predicate", "expression_or_cond_pattern", "cond_pattern", 
		"case_statement", "case_expression", "case_item", "case_inside_item", 
		"case_item_expression", "open_range_list", "open_value_range", "pattern", 
		"loop_statement", "for_initialization", "for_variable_declaration", "for_step", 
		"for_step_assignment", "loop_variables", "subroutine_call_statement", 
		"assertion_item", "deferred_immediate_assertion_item", "procedural_assertion_statement", 
		"immediate_assertion_statement", "simple_immediate_assertion_statement", 
		"simple_immediate_assert_statement", "simple_immediate_assume_statement", 
		"simple_immediate_cover_statement", "deferred_immediate_assertion_statement", 
		"deferred_immediate_assert_statement", "deferred_immediate_assume_statement", 
		"deferred_immediate_cover_statement", "cycle_delay", "edge_ident", "concatenation", 
		"constant_concatenation", "constant_multiple_concatenation", "multiple_concatenation", 
		"array_range_expression", "empty_queue", "constant_function_call", "tf_call", 
		"system_tf_call", "subroutine_call", "function_subroutine_call", "arg_comma", 
		"list_of_arguments", "method_call", "method_call_root", "method_call_body", 
		"built_in_method_call", "array_manipulation_call", "randomize_call", "array_method_name", 
		"inc_or_dec_expression", "constant_expression", "constant_mintypmax_expression", 
		"constant_param_expression", "param_expression", "constant_range_expression", 
		"constant_part_select_range", "constant_range", "constant_indexed_range", 
		"expression", "tagged_union_expression", "value_range", "mintypmax_expression", 
		"part_select_range", "indexed_range", "genvar_expression", "constant_primary", 
		"primary", "class_qualifier", "range_expression", "primary_literal", "time_literal", 
		"implicit_class_handle", "bit_select", "select", "nonrange_select", "constant_bit_select", 
		"constant_select", "constant_cast", "cast", "net_lvalue", "variable_lvalue", 
		"non_range_variable_lvalue", "number", "integral_number", "decimal_number", 
		"real_number", "unary_operator", "binary_operator", "inc_or_dec_operator", 
		"unary_module_path_operator", "binary_module_path_operator", "package_scope", 
		"ident", "ps_ident", "hier_ident", "ps_or_hier_ident", "pp_text", "pp_directive", 
		"pp_default_nettype", "pp_timescale", "pp_include", "pp_define_only", 
		"pp_define_noarg", "pp_define_arg", "pp_undef", "pp_call_noarg", "pp_call_arg", 
		"pp_ifdef",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'endmodule'", "'interface'", "'endinterface'", 
		"'class'", "'endclass'", "'package'", "'endpackage'", "'program'", "'endprogram'", 
		"'generate'", "'endgenerate'", "'task'", "'endtask'", "'function'", "'endfunction'", 
		"'clocking'", "'modport'", "'timeunit'", "'timeprecision'", "'implements'", 
		"'alias'", "'assign'", "'deassign'", "'force'", "'release'", "'defparam'", 
		"'initial'", "'forever'", "'repeat'", undefined, "'if'", "'else'", "'foreach'", 
		"'for'", "'while'", "'do'", "'return'", "'break'", "'continue'", "'wait'", 
		"'wait_order'", undefined, "'endcase'", "'default'", "'priority'", "'unique'", 
		"'unique0'", "'inside'", "'with'", "'matches'", "'assert'", "'assume'", 
		"'cover'", "'final'", "'fork'", "'forkjoin'", "'disable'", "'extern'", 
		"'begin'", "'end'", "'dist'", "'new'", "'virtual'", "'pure'", "'extends'", 
		"'static'", "'automatic'", "'protected'", "'local'", "'typedef'", "'nettype'", 
		"'import'", "'export'", "'this'", "'super'", "'this.super'", "'chandle'", 
		"'event'", "'1step'", "'$root.'", "'$unit::'", "'local::'", "'std::'", 
		"'*::*'", "'$fatal'", "'$error'", "'$warning'", "'$info'", "'posedge'", 
		"'negedge'", "'edge'", "'ref'", "'input'", "'output'", "'inout'", "'constraint'", 
		"'const'", "'parameter'", "'localparam'", undefined, "'string'", undefined, 
		undefined, undefined, undefined, "'interconnect'", "'var'", "'genvar'", 
		"'iff'", "'randomize'", undefined, "'void'", "'null'", "'type'", "'enum'", 
		"'tagged'", "'struct'", "'union'", "'packed'", "'unpacked'", "'solve'", 
		"'soft'", "'before'", undefined, "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"'''", "'''", "'''", "':'", "';'", "'.'", "','", "'@'", "'='", "'?'", 
		"'^'", "'|'", "'&'", "'~'", "'!'", "'-'", "'+'", "'*'", "'/'", "'%'", 
		"'>'", "'<'", "'$'", "'#'", "'##'", "'#0'", "'&&&'", "'->'", "'->>'", 
		"':='", "':/'", "'xor'", "'and'", "'or'", "'::'", "'.*'", "'+:'", "'-:'", 
		"'<<<='", "'>>>='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'&='", "'|='", "'^='", "'~^'", "'~&'", "'~|'", "'==?'", "'!=?'", 
		"'==='", "'!=='", "'>>>'", "'<<<'", "'<->'", "'=='", "'!='", "'&&'", "'||'", 
		"'**'", "'<='", "'>='", "'^~'", "'>>'", "'<<'", "'++'", "'--'", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'`'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "MODULE_KEYWORD", "ENDMODULE", "INTERFACE", "ENDINTERFACE", 
		"CLASS", "ENDCLASS", "PACKAGE", "ENDPACKAGE", "PROGRAM", "ENDPROGRAM", 
		"GENERATE", "ENDGENERATE", "TASK", "ENDTASK", "FUNCTION", "ENDFUNCTION", 
		"CLOCKING", "MODPORT", "TIMEUNIT", "TIMEPRECISION", "IMPLEMENTS", "ALIAS", 
		"ASSIGN", "DEASSIGN", "FORCE", "RELEASE", "DEFPARAM", "INITIAL", "FOREVER", 
		"REPEAT", "ALWAYS_KEYWORD", "IF", "ELSE", "FOREACH", "FOR", "WHILE", "DO", 
		"RETURN", "BREAK", "CONTINUE", "WAIT", "WAITORDER", "CASE_KEYWORD", "ENDCASE", 
		"DEFAULT", "PRIORITY", "UNIQUE", "UNIQUE0", "INSIDE", "WITH", "MATCHES", 
		"ASSERT", "ASSUME", "COVER", "FINAL", "FORK", "FORKJOIN", "DISABLE", "EXTERN", 
		"BEGIN", "END", "DIST", "NEW", "VIRTUAL", "PURE", "EXTENDS", "STATIC", 
		"AUTOMATIC", "PROTECTED", "LOCAL", "TYPEDEF", "NETTYPE", "IMPORT", "EXPORT", 
		"THIS", "SUPER", "THISSUPER", "CHANDLE", "EVENT", "ONESTEP", "CLASS_ROOT", 
		"SCOPE_UNIT", "SCOPE_LOCAL", "SCOPE_STD", "SCOPE_FORALL", "DOL_FATAL", 
		"DOL_ERROR", "DOL_WARNING", "DOL_INFO", "POSEDGE", "NEGEDGE", "EDGE", 
		"REF", "INPUT", "OUTPUT", "INOUT", "CONSTRAINT", "CONST", "PARAMETER", 
		"LOCALPARAM", "SIGNING", "STRING", "INTEGER_ATOM_TYPE", "INTEGER_VECTOR_TYPE", 
		"NON_INTEGER_TYPE", "NET_TYPE", "INTERCONNECT", "VAR", "GENVAR", "IFF", 
		"RANDOMIZE", "RANDOM_QUALIFIER", "VOID", "NULL", "TYPE", "ENUM", "TAGGED", 
		"STRUCT", "UNION", "PACKED", "UNPACKED", "SOLVE", "SOFT", "BEFORE", "TIME_UNIT", 
		"OP_PRN", "CL_PRN", "OP_BRC", "CL_BRC", "OP_BRK", "CL_BRK", "OP_CAST", 
		"OP_PATTERN", "QUO", "COLON", "SEMIC", "DOT", "COM", "AT", "EQ", "QUES", 
		"XOR", "OR", "AND", "INV", "NOT", "MINUS", "PLUS", "MULT", "DIV", "MOD", 
		"GT", "LT", "DOL", "SHP", "SHPSHP", "SHPZERO", "ANDANDAND", "MINUSGT", 
		"MINUSGTGT", "DISTW_EQ", "DISTW_SL", "ARR_XOR", "ARR_AND", "ARR_OR", "SCOPE", 
		"FORALL", "PLUSCOLON", "MINUSCOLON", "LTLTLTEQ", "GTGTGTEQ", "LTLTEQ", 
		"GTGTEQ", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "MODEQ", "ANDEQ", "OREQ", 
		"XOREQ", "INVXOR", "INVAND", "INVOR", "EQEQQUES", "NOTEQQUES", "EQEQEQ", 
		"NOTEQEQ", "GTGTGT", "LTLTLT", "LTMINUSGT", "EQEQ", "NOTEQ", "ANDAND", 
		"OROR", "MULTMULT", "LTEQ", "GTEQ", "XORINV", "GTGT", "LTLT", "PLUSPLUS", 
		"MINUSMINUS", "BINARY_NUMBER", "OCTAL_NUMBER", "HEX_NUMBER", "SIZED_UNSIGNED", 
		"FIXED_POINT_NUMBER", "SCIENCE_NUMBER", "UNSIGNED_NUMBER", "UNBASED_UNSIZED_LITERAL", 
		"STRING_LITERAL", "SYSTEM_TF_IDENT", "IDENT", "SIMPLE_IDENT", "ESCAPED_IDENT", 
		"WS", "LINE_COMMENT", "BLOCK_COMMENT", "PP_DEFINE", "PP_UNDEF", "PP_INCLUDE", 
		"PP_TIMESCALE", "PP_DEFAULT_NETTYPE", "PP_IFDEF", "PP_IFNDEF", "PP_ELSE", 
		"PP_ELIF", "PP_ENDIF", "PP_CALL_NOARG", "PP_CALL_ARG", "PP_WS", "PP_NL", 
		"PP_DIV", "PP_DEFAULT_NETTYPE_VALUE", "PP_STRING", "PP_UNSIGNED_NUMBER", 
		"PP_TIME_UNIT", "PP_IDENT", "PP_LINE_COMMENT", "PP_BLOCK_COMMENT", "PPCL_WS", 
		"PPCL_CL_PRN", "PPCL_COM", "PPCL_IDENT", "DF_WS", "DF_NL", "DF_MACRO_NAME_NOARG", 
		"DF_MACRO_NAME_ARG", "DF_IDENT", "DFAG_WS", "DFAG_NL", "DFAG_CL_PRN", 
		"DFAG_COM", "DFAG_EQ", "DFAG_IDENT", "DFTX_MACRO_TEXT", "BACKQUOTE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SystemVerilogParser._LITERAL_NAMES, SystemVerilogParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SystemVerilogParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "SystemVerilogParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return SystemVerilogParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return SystemVerilogParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(SystemVerilogParser._ATN, this);
	}
	// @RuleVersion(0)
	public source_text(): Source_textContext {
		let _localctx: Source_textContext = new Source_textContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, SystemVerilogParser.RULE_source_text);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 637;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {
			case 1:
				{
				this.state = 636;
				this.timeunits_declaration();
				}
				break;
			}
			this.state = 642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.MODULE_KEYWORD) | (1 << SystemVerilogParser.INTERFACE) | (1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.PACKAGE) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION) | (1 << SystemVerilogParser.TIMEUNIT) | (1 << SystemVerilogParser.TIMEPRECISION))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.AUTOMATIC - 64)) | (1 << (SystemVerilogParser.TYPEDEF - 64)) | (1 << (SystemVerilogParser.NETTYPE - 64)) | (1 << (SystemVerilogParser.IMPORT - 64)) | (1 << (SystemVerilogParser.EXPORT - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SystemVerilogParser.CONST - 98)) | (1 << (SystemVerilogParser.PARAMETER - 98)) | (1 << (SystemVerilogParser.LOCALPARAM - 98)) | (1 << (SystemVerilogParser.STRING - 98)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 98)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 98)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 98)) | (1 << (SystemVerilogParser.NET_TYPE - 98)) | (1 << (SystemVerilogParser.INTERCONNECT - 98)) | (1 << (SystemVerilogParser.VAR - 98)) | (1 << (SystemVerilogParser.TYPE - 98)) | (1 << (SystemVerilogParser.ENUM - 98)) | (1 << (SystemVerilogParser.STRUCT - 98)) | (1 << (SystemVerilogParser.UNION - 98)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 639;
				this.description();
				}
				}
				this.state = 644;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 645;
			this.match(SystemVerilogParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public description(): DescriptionContext {
		let _localctx: DescriptionContext = new DescriptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, SystemVerilogParser.RULE_description);
		try {
			this.state = 651;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.MODULE_KEYWORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 647;
				this.module_declaration();
				}
				break;
			case SystemVerilogParser.INTERFACE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 648;
				this.interface_declaration();
				}
				break;
			case SystemVerilogParser.PACKAGE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 649;
				this.package_declaration();
				}
				break;
			case SystemVerilogParser.CLASS:
			case SystemVerilogParser.TASK:
			case SystemVerilogParser.FUNCTION:
			case SystemVerilogParser.TIMEUNIT:
			case SystemVerilogParser.TIMEPRECISION:
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.TYPEDEF:
			case SystemVerilogParser.NETTYPE:
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.EXPORT:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.PARAMETER:
			case SystemVerilogParser.LOCALPARAM:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.NET_TYPE:
			case SystemVerilogParser.INTERCONNECT:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.SEMIC:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 650;
				this.package_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_nonansi_header(): Module_nonansi_headerContext {
		let _localctx: Module_nonansi_headerContext = new Module_nonansi_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, SystemVerilogParser.RULE_module_nonansi_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 653;
			this.match(SystemVerilogParser.MODULE_KEYWORD);
			this.state = 655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 654;
				this.lifetime();
				}
			}

			this.state = 657;
			this.ident();
			this.state = 661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.IMPORT) {
				{
				{
				this.state = 658;
				this.package_import_declaration();
				}
				}
				this.state = 663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 665;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 664;
				this.parameter_port_list();
				}
			}

			this.state = 667;
			this.list_of_ports();
			this.state = 668;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_ansi_header(): Module_ansi_headerContext {
		let _localctx: Module_ansi_headerContext = new Module_ansi_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, SystemVerilogParser.RULE_module_ansi_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 670;
			this.match(SystemVerilogParser.MODULE_KEYWORD);
			this.state = 672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 671;
				this.lifetime();
				}
			}

			this.state = 674;
			this.ident();
			this.state = 678;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.IMPORT) {
				{
				{
				this.state = 675;
				this.package_import_declaration();
				}
				}
				this.state = 680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 682;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 681;
				this.parameter_port_list();
				}
			}

			this.state = 685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_PRN) {
				{
				this.state = 684;
				this.list_of_port_declarations();
				}
			}

			this.state = 687;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_declaration(): Module_declarationContext {
		let _localctx: Module_declarationContext = new Module_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, SystemVerilogParser.RULE_module_declaration);
		let _la: number;
		try {
			this.state = 742;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 20, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 689;
				this.module_ansi_header();
				this.state = 691;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
				case 1:
					{
					this.state = 690;
					this.timeunits_declaration();
					}
					break;
				}
				this.state = 696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.MODULE_KEYWORD) | (1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.GENERATE) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION) | (1 << SystemVerilogParser.TIMEUNIT) | (1 << SystemVerilogParser.TIMEPRECISION) | (1 << SystemVerilogParser.ALIAS) | (1 << SystemVerilogParser.ASSIGN) | (1 << SystemVerilogParser.DEFPARAM) | (1 << SystemVerilogParser.INITIAL) | (1 << SystemVerilogParser.ALWAYS_KEYWORD))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (SystemVerilogParser.IF - 32)) | (1 << (SystemVerilogParser.FOR - 32)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 32)) | (1 << (SystemVerilogParser.FINAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.AUTOMATIC - 64)) | (1 << (SystemVerilogParser.TYPEDEF - 64)) | (1 << (SystemVerilogParser.NETTYPE - 64)) | (1 << (SystemVerilogParser.IMPORT - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.DOL_FATAL - 64)) | (1 << (SystemVerilogParser.DOL_ERROR - 64)) | (1 << (SystemVerilogParser.DOL_WARNING - 64)) | (1 << (SystemVerilogParser.DOL_INFO - 64)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SystemVerilogParser.CONST - 98)) | (1 << (SystemVerilogParser.PARAMETER - 98)) | (1 << (SystemVerilogParser.LOCALPARAM - 98)) | (1 << (SystemVerilogParser.STRING - 98)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 98)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 98)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 98)) | (1 << (SystemVerilogParser.NET_TYPE - 98)) | (1 << (SystemVerilogParser.INTERCONNECT - 98)) | (1 << (SystemVerilogParser.VAR - 98)) | (1 << (SystemVerilogParser.GENVAR - 98)) | (1 << (SystemVerilogParser.TYPE - 98)) | (1 << (SystemVerilogParser.ENUM - 98)) | (1 << (SystemVerilogParser.STRUCT - 98)) | (1 << (SystemVerilogParser.UNION - 98)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 693;
					this.non_port_module_item();
					}
					}
					this.state = 698;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 699;
				this.match(SystemVerilogParser.ENDMODULE);
				this.state = 702;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 700;
					this.match(SystemVerilogParser.COLON);
					this.state = 701;
					this.ident();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 704;
				this.module_nonansi_header();
				this.state = 706;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
				case 1:
					{
					this.state = 705;
					this.timeunits_declaration();
					}
					break;
				}
				this.state = 711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.MODULE_KEYWORD) | (1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.GENERATE) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION) | (1 << SystemVerilogParser.TIMEUNIT) | (1 << SystemVerilogParser.TIMEPRECISION) | (1 << SystemVerilogParser.ALIAS) | (1 << SystemVerilogParser.ASSIGN) | (1 << SystemVerilogParser.DEFPARAM) | (1 << SystemVerilogParser.INITIAL) | (1 << SystemVerilogParser.ALWAYS_KEYWORD))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (SystemVerilogParser.IF - 32)) | (1 << (SystemVerilogParser.FOR - 32)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 32)) | (1 << (SystemVerilogParser.FINAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.AUTOMATIC - 64)) | (1 << (SystemVerilogParser.TYPEDEF - 64)) | (1 << (SystemVerilogParser.NETTYPE - 64)) | (1 << (SystemVerilogParser.IMPORT - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.DOL_FATAL - 64)) | (1 << (SystemVerilogParser.DOL_ERROR - 64)) | (1 << (SystemVerilogParser.DOL_WARNING - 64)) | (1 << (SystemVerilogParser.DOL_INFO - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.PARAMETER - 96)) | (1 << (SystemVerilogParser.LOCALPARAM - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.NET_TYPE - 96)) | (1 << (SystemVerilogParser.INTERCONNECT - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.GENVAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 708;
					this.module_item();
					}
					}
					this.state = 713;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 714;
				this.match(SystemVerilogParser.ENDMODULE);
				this.state = 717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 715;
					this.match(SystemVerilogParser.COLON);
					this.state = 716;
					this.ident();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 719;
				this.match(SystemVerilogParser.MODULE_KEYWORD);
				this.state = 721;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
					{
					this.state = 720;
					this.lifetime();
					}
				}

				this.state = 723;
				this.ident();
				this.state = 724;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 725;
				this.match(SystemVerilogParser.FORALL);
				this.state = 726;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 727;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 729;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
				case 1:
					{
					this.state = 728;
					this.timeunits_declaration();
					}
					break;
				}
				this.state = 734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.MODULE_KEYWORD) | (1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.GENERATE) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION) | (1 << SystemVerilogParser.TIMEUNIT) | (1 << SystemVerilogParser.TIMEPRECISION) | (1 << SystemVerilogParser.ALIAS) | (1 << SystemVerilogParser.ASSIGN) | (1 << SystemVerilogParser.DEFPARAM) | (1 << SystemVerilogParser.INITIAL) | (1 << SystemVerilogParser.ALWAYS_KEYWORD))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (SystemVerilogParser.IF - 32)) | (1 << (SystemVerilogParser.FOR - 32)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 32)) | (1 << (SystemVerilogParser.FINAL - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.AUTOMATIC - 64)) | (1 << (SystemVerilogParser.TYPEDEF - 64)) | (1 << (SystemVerilogParser.NETTYPE - 64)) | (1 << (SystemVerilogParser.IMPORT - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.DOL_FATAL - 64)) | (1 << (SystemVerilogParser.DOL_ERROR - 64)) | (1 << (SystemVerilogParser.DOL_WARNING - 64)) | (1 << (SystemVerilogParser.DOL_INFO - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.PARAMETER - 96)) | (1 << (SystemVerilogParser.LOCALPARAM - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.NET_TYPE - 96)) | (1 << (SystemVerilogParser.INTERCONNECT - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.GENVAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 731;
					this.module_item();
					}
					}
					this.state = 736;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 737;
				this.match(SystemVerilogParser.ENDMODULE);
				this.state = 740;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 738;
					this.match(SystemVerilogParser.COLON);
					this.state = 739;
					this.ident();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_declaration(): Interface_declarationContext {
		let _localctx: Interface_declarationContext = new Interface_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, SystemVerilogParser.RULE_interface_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 744;
			this.interface_nonansi_header();
			this.state = 746;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 21, this._ctx) ) {
			case 1:
				{
				this.state = 745;
				this.timeunits_declaration();
				}
				break;
			}
			this.state = 751;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.INTERFACE) | (1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.GENERATE) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION) | (1 << SystemVerilogParser.MODPORT) | (1 << SystemVerilogParser.TIMEUNIT) | (1 << SystemVerilogParser.TIMEPRECISION) | (1 << SystemVerilogParser.ALIAS) | (1 << SystemVerilogParser.ASSIGN) | (1 << SystemVerilogParser.INITIAL) | (1 << SystemVerilogParser.ALWAYS_KEYWORD))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (SystemVerilogParser.IF - 32)) | (1 << (SystemVerilogParser.FOR - 32)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 32)) | (1 << (SystemVerilogParser.FINAL - 32)) | (1 << (SystemVerilogParser.EXTERN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.AUTOMATIC - 64)) | (1 << (SystemVerilogParser.TYPEDEF - 64)) | (1 << (SystemVerilogParser.NETTYPE - 64)) | (1 << (SystemVerilogParser.IMPORT - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.DOL_FATAL - 64)) | (1 << (SystemVerilogParser.DOL_ERROR - 64)) | (1 << (SystemVerilogParser.DOL_WARNING - 64)) | (1 << (SystemVerilogParser.DOL_INFO - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.PARAMETER - 96)) | (1 << (SystemVerilogParser.LOCALPARAM - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.NET_TYPE - 96)) | (1 << (SystemVerilogParser.INTERCONNECT - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.GENVAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 748;
				this.interface_item();
				}
				}
				this.state = 753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 754;
			this.match(SystemVerilogParser.ENDINTERFACE);
			this.state = 757;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 755;
				this.match(SystemVerilogParser.COLON);
				this.state = 756;
				this.ident();
				}
			}

			this.state = 759;
			this.interface_ansi_header();
			this.state = 761;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				{
				this.state = 760;
				this.timeunits_declaration();
				}
				break;
			}
			this.state = 766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.INTERFACE) | (1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.GENERATE) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION) | (1 << SystemVerilogParser.MODPORT) | (1 << SystemVerilogParser.TIMEUNIT) | (1 << SystemVerilogParser.TIMEPRECISION) | (1 << SystemVerilogParser.ALIAS) | (1 << SystemVerilogParser.ASSIGN) | (1 << SystemVerilogParser.INITIAL) | (1 << SystemVerilogParser.ALWAYS_KEYWORD))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (SystemVerilogParser.IF - 32)) | (1 << (SystemVerilogParser.FOR - 32)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 32)) | (1 << (SystemVerilogParser.FINAL - 32)) | (1 << (SystemVerilogParser.EXTERN - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.AUTOMATIC - 64)) | (1 << (SystemVerilogParser.TYPEDEF - 64)) | (1 << (SystemVerilogParser.NETTYPE - 64)) | (1 << (SystemVerilogParser.IMPORT - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.DOL_FATAL - 64)) | (1 << (SystemVerilogParser.DOL_ERROR - 64)) | (1 << (SystemVerilogParser.DOL_WARNING - 64)) | (1 << (SystemVerilogParser.DOL_INFO - 64)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SystemVerilogParser.CONST - 98)) | (1 << (SystemVerilogParser.PARAMETER - 98)) | (1 << (SystemVerilogParser.LOCALPARAM - 98)) | (1 << (SystemVerilogParser.STRING - 98)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 98)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 98)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 98)) | (1 << (SystemVerilogParser.NET_TYPE - 98)) | (1 << (SystemVerilogParser.INTERCONNECT - 98)) | (1 << (SystemVerilogParser.VAR - 98)) | (1 << (SystemVerilogParser.GENVAR - 98)) | (1 << (SystemVerilogParser.TYPE - 98)) | (1 << (SystemVerilogParser.ENUM - 98)) | (1 << (SystemVerilogParser.STRUCT - 98)) | (1 << (SystemVerilogParser.UNION - 98)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 763;
				this.non_port_interface_item();
				}
				}
				this.state = 768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 769;
			this.match(SystemVerilogParser.ENDINTERFACE);
			this.state = 772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 770;
				this.match(SystemVerilogParser.COLON);
				this.state = 771;
				this.ident();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_nonansi_header(): Interface_nonansi_headerContext {
		let _localctx: Interface_nonansi_headerContext = new Interface_nonansi_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, SystemVerilogParser.RULE_interface_nonansi_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 774;
			this.match(SystemVerilogParser.INTERFACE);
			this.state = 776;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 775;
				this.lifetime();
				}
			}

			this.state = 778;
			this.ident();
			this.state = 782;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.IMPORT) {
				{
				{
				this.state = 779;
				this.package_import_declaration();
				}
				}
				this.state = 784;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 786;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 785;
				this.parameter_port_list();
				}
			}

			this.state = 788;
			this.list_of_ports();
			this.state = 789;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_ansi_header(): Interface_ansi_headerContext {
		let _localctx: Interface_ansi_headerContext = new Interface_ansi_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, SystemVerilogParser.RULE_interface_ansi_header);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 791;
			this.match(SystemVerilogParser.INTERFACE);
			this.state = 793;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 792;
				this.lifetime();
				}
			}

			this.state = 795;
			this.ident();
			this.state = 799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.IMPORT) {
				{
				{
				this.state = 796;
				this.package_import_declaration();
				}
				}
				this.state = 801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 802;
				this.parameter_port_list();
				}
			}

			this.state = 806;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_PRN) {
				{
				this.state = 805;
				this.list_of_port_declarations();
				}
			}

			this.state = 808;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_declaration(): Class_declarationContext {
		let _localctx: Class_declarationContext = new Class_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, SystemVerilogParser.RULE_class_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 811;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.VIRTUAL) {
				{
				this.state = 810;
				this.match(SystemVerilogParser.VIRTUAL);
				}
			}

			this.state = 813;
			this.match(SystemVerilogParser.CLASS);
			this.state = 815;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 814;
				this.lifetime();
				}
			}

			this.state = 817;
			this.ident();
			this.state = 819;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 818;
				this.parameter_port_list();
				}
			}

			this.state = 829;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EXTENDS) {
				{
				this.state = 821;
				this.match(SystemVerilogParser.EXTENDS);
				this.state = 822;
				this.class_type();
				this.state = 827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 823;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 824;
					this.list_of_arguments();
					this.state = 825;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				}
			}

			this.state = 840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.IMPLEMENTS) {
				{
				this.state = 831;
				this.match(SystemVerilogParser.IMPLEMENTS);
				this.state = 832;
				this.interface_class_type();
				this.state = 837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 833;
					this.match(SystemVerilogParser.COM);
					this.state = 834;
					this.interface_class_type();
					}
					}
					this.state = 839;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 842;
			this.match(SystemVerilogParser.SEMIC);
			this.state = 846;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION))) !== 0) || ((((_la - 59)) & ~0x1F) === 0 && ((1 << (_la - 59)) & ((1 << (SystemVerilogParser.EXTERN - 59)) | (1 << (SystemVerilogParser.VIRTUAL - 59)) | (1 << (SystemVerilogParser.PURE - 59)) | (1 << (SystemVerilogParser.STATIC - 59)) | (1 << (SystemVerilogParser.AUTOMATIC - 59)) | (1 << (SystemVerilogParser.PROTECTED - 59)) | (1 << (SystemVerilogParser.LOCAL - 59)) | (1 << (SystemVerilogParser.TYPEDEF - 59)) | (1 << (SystemVerilogParser.NETTYPE - 59)) | (1 << (SystemVerilogParser.IMPORT - 59)) | (1 << (SystemVerilogParser.CHANDLE - 59)) | (1 << (SystemVerilogParser.EVENT - 59)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 59)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (SystemVerilogParser.CONSTRAINT - 97)) | (1 << (SystemVerilogParser.CONST - 97)) | (1 << (SystemVerilogParser.PARAMETER - 97)) | (1 << (SystemVerilogParser.LOCALPARAM - 97)) | (1 << (SystemVerilogParser.STRING - 97)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 97)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 97)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 97)) | (1 << (SystemVerilogParser.VAR - 97)) | (1 << (SystemVerilogParser.RANDOM_QUALIFIER - 97)) | (1 << (SystemVerilogParser.TYPE - 97)) | (1 << (SystemVerilogParser.ENUM - 97)) | (1 << (SystemVerilogParser.STRUCT - 97)) | (1 << (SystemVerilogParser.UNION - 97)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 843;
				this.class_item();
				}
				}
				this.state = 848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 849;
			this.match(SystemVerilogParser.ENDCLASS);
			this.state = 852;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 850;
				this.match(SystemVerilogParser.COLON);
				this.state = 851;
				this.ident();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_class_type(): Interface_class_typeContext {
		let _localctx: Interface_class_typeContext = new Interface_class_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, SystemVerilogParser.RULE_interface_class_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 854;
			this.ps_ident();
			this.state = 856;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 855;
				this.parameter_value_assignment();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_class_declaration(): Interface_class_declarationContext {
		let _localctx: Interface_class_declarationContext = new Interface_class_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, SystemVerilogParser.RULE_interface_class_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 858;
			this.match(SystemVerilogParser.INTERFACE);
			this.state = 859;
			this.match(SystemVerilogParser.CLASS);
			this.state = 860;
			this.ident();
			this.state = 862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 861;
				this.parameter_port_list();
				}
			}

			this.state = 873;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EXTENDS) {
				{
				this.state = 864;
				this.match(SystemVerilogParser.EXTENDS);
				this.state = 865;
				this.interface_class_type();
				this.state = 870;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 866;
					this.match(SystemVerilogParser.COM);
					this.state = 867;
					this.interface_class_type();
					}
					}
					this.state = 872;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 875;
			this.match(SystemVerilogParser.SEMIC);
			this.state = 879;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.PURE || _la === SystemVerilogParser.TYPEDEF || _la === SystemVerilogParser.PARAMETER || _la === SystemVerilogParser.LOCALPARAM || _la === SystemVerilogParser.SEMIC) {
				{
				{
				this.state = 876;
				this.interface_class_item();
				}
				}
				this.state = 881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 882;
			this.match(SystemVerilogParser.ENDCLASS);
			this.state = 885;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 883;
				this.match(SystemVerilogParser.COLON);
				this.state = 884;
				this.ident();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_class_item(): Interface_class_itemContext {
		let _localctx: Interface_class_itemContext = new Interface_class_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, SystemVerilogParser.RULE_interface_class_item);
		try {
			this.state = 896;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.TYPEDEF:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 887;
				this.type_declaration();
				}
				break;
			case SystemVerilogParser.PURE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 888;
				this.interface_class_method();
				}
				break;
			case SystemVerilogParser.LOCALPARAM:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 889;
				this.local_parameter_declaration();
				this.state = 890;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.PARAMETER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 892;
				this.parameter_declaration();
				this.state = 893;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.SEMIC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 895;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_class_method(): Interface_class_methodContext {
		let _localctx: Interface_class_methodContext = new Interface_class_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, SystemVerilogParser.RULE_interface_class_method);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 898;
			this.match(SystemVerilogParser.PURE);
			this.state = 899;
			this.match(SystemVerilogParser.VIRTUAL);
			this.state = 900;
			this.method_prototype();
			this.state = 901;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_declaration(): Package_declarationContext {
		let _localctx: Package_declarationContext = new Package_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, SystemVerilogParser.RULE_package_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 903;
			this.match(SystemVerilogParser.PACKAGE);
			this.state = 905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 904;
				this.lifetime();
				}
			}

			this.state = 907;
			this.ident();
			this.state = 908;
			this.match(SystemVerilogParser.SEMIC);
			this.state = 910;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 51, this._ctx) ) {
			case 1:
				{
				this.state = 909;
				this.timeunits_declaration();
				}
				break;
			}
			this.state = 915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << SystemVerilogParser.CLASS) | (1 << SystemVerilogParser.TASK) | (1 << SystemVerilogParser.FUNCTION) | (1 << SystemVerilogParser.TIMEUNIT) | (1 << SystemVerilogParser.TIMEPRECISION))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.AUTOMATIC - 64)) | (1 << (SystemVerilogParser.TYPEDEF - 64)) | (1 << (SystemVerilogParser.NETTYPE - 64)) | (1 << (SystemVerilogParser.IMPORT - 64)) | (1 << (SystemVerilogParser.EXPORT - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SystemVerilogParser.CONST - 98)) | (1 << (SystemVerilogParser.PARAMETER - 98)) | (1 << (SystemVerilogParser.LOCALPARAM - 98)) | (1 << (SystemVerilogParser.STRING - 98)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 98)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 98)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 98)) | (1 << (SystemVerilogParser.NET_TYPE - 98)) | (1 << (SystemVerilogParser.INTERCONNECT - 98)) | (1 << (SystemVerilogParser.VAR - 98)) | (1 << (SystemVerilogParser.TYPE - 98)) | (1 << (SystemVerilogParser.ENUM - 98)) | (1 << (SystemVerilogParser.STRUCT - 98)) | (1 << (SystemVerilogParser.UNION - 98)))) !== 0) || _la === SystemVerilogParser.SEMIC || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 912;
				this.package_item();
				}
				}
				this.state = 917;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 918;
			this.match(SystemVerilogParser.ENDPACKAGE);
			this.state = 921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 919;
				this.match(SystemVerilogParser.COLON);
				this.state = 920;
				this.ident();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timeunits_declaration(): Timeunits_declarationContext {
		let _localctx: Timeunits_declarationContext = new Timeunits_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, SystemVerilogParser.RULE_timeunits_declaration);
		let _la: number;
		try {
			this.state = 949;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 55, this._ctx) ) {
			case 1:
				_localctx = new Timeunits_declaration_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 923;
				this.match(SystemVerilogParser.TIMEUNIT);
				this.state = 924;
				this.time_literal();
				this.state = 927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.DIV) {
					{
					this.state = 925;
					this.match(SystemVerilogParser.DIV);
					this.state = 926;
					this.time_literal();
					}
				}

				this.state = 929;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				_localctx = new Timeunits_declaration_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 931;
				this.match(SystemVerilogParser.TIMEPRECISION);
				this.state = 932;
				this.time_literal();
				this.state = 933;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 3:
				_localctx = new Timeunits_declaration_2Context(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 935;
				this.match(SystemVerilogParser.TIMEUNIT);
				this.state = 936;
				this.time_literal();
				this.state = 937;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 938;
				this.match(SystemVerilogParser.TIMEPRECISION);
				this.state = 939;
				this.time_literal();
				this.state = 940;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 4:
				_localctx = new Timeunits_declaration_3Context(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 942;
				this.match(SystemVerilogParser.TIMEPRECISION);
				this.state = 943;
				this.time_literal();
				this.state = 944;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 945;
				this.match(SystemVerilogParser.TIMEUNIT);
				this.state = 946;
				this.time_literal();
				this.state = 947;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameter_port_list(): Parameter_port_listContext {
		let _localctx: Parameter_port_listContext = new Parameter_port_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, SystemVerilogParser.RULE_parameter_port_list);
		let _la: number;
		try {
			this.state = 978;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 951;
				this.match(SystemVerilogParser.SHP);
				this.state = 952;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 953;
				this.list_of_param_assignments();
				this.state = 958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 954;
					this.match(SystemVerilogParser.COM);
					this.state = 955;
					this.parameter_port_declaration();
					}
					}
					this.state = 960;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 961;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 963;
				this.match(SystemVerilogParser.SHP);
				this.state = 964;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 965;
				this.parameter_port_declaration();
				this.state = 970;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 966;
					this.match(SystemVerilogParser.COM);
					this.state = 967;
					this.parameter_port_declaration();
					}
					}
					this.state = 972;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 973;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 975;
				this.match(SystemVerilogParser.SHP);
				this.state = 976;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 977;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameter_port_declaration(): Parameter_port_declarationContext {
		let _localctx: Parameter_port_declarationContext = new Parameter_port_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, SystemVerilogParser.RULE_parameter_port_declaration);
		try {
			this.state = 984;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.PARAMETER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 980;
				this.parameter_declaration();
				}
				break;
			case SystemVerilogParser.LOCALPARAM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 981;
				this.local_parameter_declaration();
				}
				break;
			case SystemVerilogParser.TYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 982;
				this.match(SystemVerilogParser.TYPE);
				this.state = 983;
				this.list_of_type_assignments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_ports(): List_of_portsContext {
		let _localctx: List_of_portsContext = new List_of_portsContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, SystemVerilogParser.RULE_list_of_ports);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 986;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 987;
			this.port();
			this.state = 992;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 988;
				this.match(SystemVerilogParser.COM);
				this.state = 989;
				this.port();
				}
				}
				this.state = 994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 995;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_port_declarations(): List_of_port_declarationsContext {
		let _localctx: List_of_port_declarationsContext = new List_of_port_declarationsContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, SystemVerilogParser.RULE_list_of_port_declarations);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 997;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 1006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.INTERFACE || ((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (SystemVerilogParser.REF - 93)) | (1 << (SystemVerilogParser.INPUT - 93)) | (1 << (SystemVerilogParser.OUTPUT - 93)) | (1 << (SystemVerilogParser.INOUT - 93)))) !== 0) || _la === SystemVerilogParser.IDENT) {
				{
				this.state = 998;
				this.ansi_port_declaration();
				this.state = 1003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 999;
					this.match(SystemVerilogParser.COM);
					this.state = 1000;
					this.ansi_port_declaration();
					}
					}
					this.state = 1005;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1008;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public port_declaration(): Port_declarationContext {
		let _localctx: Port_declarationContext = new Port_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, SystemVerilogParser.RULE_port_declaration);
		try {
			this.state = 1015;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.INOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1010;
				this.inout_declaration();
				}
				break;
			case SystemVerilogParser.INPUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1011;
				this.input_declaration();
				}
				break;
			case SystemVerilogParser.OUTPUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1012;
				this.output_declaration();
				}
				break;
			case SystemVerilogParser.REF:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1013;
				this.ref_declaration();
				}
				break;
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1014;
				this.interface_port_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public port(): PortContext {
		let _localctx: PortContext = new PortContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, SystemVerilogParser.RULE_port);
		try {
			this.state = 1024;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.CL_PRN:
			case SystemVerilogParser.COM:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1017;
				this.port_expression();
				}
				break;
			case SystemVerilogParser.DOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1018;
				this.match(SystemVerilogParser.DOT);
				this.state = 1019;
				this.ident();
				this.state = 1020;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 1021;
				this.port_expression();
				this.state = 1022;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public port_expression(): Port_expressionContext {
		let _localctx: Port_expressionContext = new Port_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, SystemVerilogParser.RULE_port_expression);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1040;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1026;
				this.port_reference();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 1027;
					this.port_reference();
					this.state = 1032;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1028;
							this.match(SystemVerilogParser.COM);
							this.state = 1029;
							this.port_reference();
							}
							}
						}
						this.state = 1034;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
					}
					}
					}
					this.state = 1039;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public port_reference(): Port_referenceContext {
		let _localctx: Port_referenceContext = new Port_referenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, SystemVerilogParser.RULE_port_reference);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1042;
			this.ident();
			this.state = 1043;
			this.constant_select();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public port_direction(): Port_directionContext {
		let _localctx: Port_directionContext = new Port_directionContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, SystemVerilogParser.RULE_port_direction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1045;
			_la = this._input.LA(1);
			if (!(((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (SystemVerilogParser.REF - 93)) | (1 << (SystemVerilogParser.INPUT - 93)) | (1 << (SystemVerilogParser.OUTPUT - 93)) | (1 << (SystemVerilogParser.INOUT - 93)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_port_header(): Net_port_headerContext {
		let _localctx: Net_port_headerContext = new Net_port_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, SystemVerilogParser.RULE_net_port_header);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1047;
			this.port_direction();
			this.state = 1048;
			this.net_port_type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_port_header(): Interface_port_headerContext {
		let _localctx: Interface_port_headerContext = new Interface_port_headerContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, SystemVerilogParser.RULE_interface_port_header);
		let _la: number;
		try {
			this.state = 1060;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.IDENT:
				_localctx = new Interface_port_header_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1050;
				this.ident();
				this.state = 1053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.DOT) {
					{
					this.state = 1051;
					this.match(SystemVerilogParser.DOT);
					this.state = 1052;
					this.ident();
					}
				}

				}
				break;
			case SystemVerilogParser.INTERFACE:
				_localctx = new Interface_port_header_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1055;
				this.match(SystemVerilogParser.INTERFACE);
				this.state = 1058;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.DOT) {
					{
					this.state = 1056;
					this.match(SystemVerilogParser.DOT);
					this.state = 1057;
					this.ident();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ansi_port_declaration(): Ansi_port_declarationContext {
		let _localctx: Ansi_port_declarationContext = new Ansi_port_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, SystemVerilogParser.RULE_ansi_port_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1064;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 71, this._ctx) ) {
			case 1:
				{
				this.state = 1062;
				this.net_port_header();
				}
				break;

			case 2:
				{
				this.state = 1063;
				this.interface_port_header();
				}
				break;
			}
			this.state = 1066;
			this.ident();
			this.state = 1070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 1067;
				this.unpacked_dimension();
				}
				}
				this.state = 1072;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EQ) {
				{
				this.state = 1073;
				this.match(SystemVerilogParser.EQ);
				this.state = 1074;
				this.constant_expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elaboration_system_task(): Elaboration_system_taskContext {
		let _localctx: Elaboration_system_taskContext = new Elaboration_system_taskContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, SystemVerilogParser.RULE_elaboration_system_task);
		let _la: number;
		try {
			this.state = 1113;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.DOL_FATAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1077;
				this.match(SystemVerilogParser.DOL_FATAL);
				this.state = 1086;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 1078;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 1079;
					this.finish_number();
					this.state = 1082;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SystemVerilogParser.COM) {
						{
						this.state = 1080;
						this.match(SystemVerilogParser.COM);
						this.state = 1081;
						this.list_of_arguments();
						}
					}

					this.state = 1084;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				this.state = 1088;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.DOL_ERROR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1089;
				this.match(SystemVerilogParser.DOL_ERROR);
				this.state = 1094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 1090;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 1091;
					this.list_of_arguments();
					this.state = 1092;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				this.state = 1096;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.DOL_WARNING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1097;
				this.match(SystemVerilogParser.DOL_WARNING);
				this.state = 1102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 1098;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 1099;
					this.list_of_arguments();
					this.state = 1100;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				this.state = 1104;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.DOL_INFO:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1105;
				this.match(SystemVerilogParser.DOL_INFO);
				this.state = 1110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 1106;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 1107;
					this.list_of_arguments();
					this.state = 1108;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				this.state = 1112;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public finish_number(): Finish_numberContext {
		let _localctx: Finish_numberContext = new Finish_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, SystemVerilogParser.RULE_finish_number);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1115;
			this.match(SystemVerilogParser.UNSIGNED_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_common_item(): Module_common_itemContext {
		let _localctx: Module_common_itemContext = new Module_common_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, SystemVerilogParser.RULE_module_common_item);
		try {
			this.state = 1126;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.CLASS:
			case SystemVerilogParser.TASK:
			case SystemVerilogParser.FUNCTION:
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.TYPEDEF:
			case SystemVerilogParser.NETTYPE:
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.PARAMETER:
			case SystemVerilogParser.LOCALPARAM:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.NET_TYPE:
			case SystemVerilogParser.INTERCONNECT:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.GENVAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.SEMIC:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1117;
				this.module_or_generate_item_declaration();
				}
				break;
			case SystemVerilogParser.ALWAYS_KEYWORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1118;
				this.always_construct();
				}
				break;
			case SystemVerilogParser.ASSIGN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1119;
				this.continuous_assign();
				}
				break;
			case SystemVerilogParser.INITIAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1120;
				this.initial_construct();
				}
				break;
			case SystemVerilogParser.FINAL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1121;
				this.final_construct();
				}
				break;
			case SystemVerilogParser.FOR:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1122;
				this.loop_generate_construct();
				}
				break;
			case SystemVerilogParser.IF:
			case SystemVerilogParser.CASE_KEYWORD:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1123;
				this.conditional_generate_construct();
				}
				break;
			case SystemVerilogParser.ALIAS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1124;
				this.net_alias();
				}
				break;
			case SystemVerilogParser.DOL_FATAL:
			case SystemVerilogParser.DOL_ERROR:
			case SystemVerilogParser.DOL_WARNING:
			case SystemVerilogParser.DOL_INFO:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1125;
				this.elaboration_system_task();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_item(): Module_itemContext {
		let _localctx: Module_itemContext = new Module_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, SystemVerilogParser.RULE_module_item);
		try {
			this.state = 1132;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 81, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1128;
				this.port_declaration();
				this.state = 1129;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1131;
				this.non_port_module_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_or_generate_item(): Module_or_generate_itemContext {
		let _localctx: Module_or_generate_itemContext = new Module_or_generate_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, SystemVerilogParser.RULE_module_or_generate_item);
		try {
			this.state = 1137;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 82, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1134;
				this.module_common_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1135;
				this.module_instantiation();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1136;
				this.parameter_override();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_or_generate_item_declaration(): Module_or_generate_item_declarationContext {
		let _localctx: Module_or_generate_item_declarationContext = new Module_or_generate_item_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, SystemVerilogParser.RULE_module_or_generate_item_declaration);
		try {
			this.state = 1141;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.CLASS:
			case SystemVerilogParser.TASK:
			case SystemVerilogParser.FUNCTION:
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.TYPEDEF:
			case SystemVerilogParser.NETTYPE:
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.PARAMETER:
			case SystemVerilogParser.LOCALPARAM:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.NET_TYPE:
			case SystemVerilogParser.INTERCONNECT:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.SEMIC:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1139;
				this.package_or_generate_item_declaration();
				}
				break;
			case SystemVerilogParser.GENVAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1140;
				this.genvar_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public non_port_module_item(): Non_port_module_itemContext {
		let _localctx: Non_port_module_itemContext = new Non_port_module_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, SystemVerilogParser.RULE_non_port_module_item);
		try {
			this.state = 1147;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.CLASS:
			case SystemVerilogParser.TASK:
			case SystemVerilogParser.FUNCTION:
			case SystemVerilogParser.ALIAS:
			case SystemVerilogParser.ASSIGN:
			case SystemVerilogParser.DEFPARAM:
			case SystemVerilogParser.INITIAL:
			case SystemVerilogParser.ALWAYS_KEYWORD:
			case SystemVerilogParser.IF:
			case SystemVerilogParser.FOR:
			case SystemVerilogParser.CASE_KEYWORD:
			case SystemVerilogParser.FINAL:
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.TYPEDEF:
			case SystemVerilogParser.NETTYPE:
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.DOL_FATAL:
			case SystemVerilogParser.DOL_ERROR:
			case SystemVerilogParser.DOL_WARNING:
			case SystemVerilogParser.DOL_INFO:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.PARAMETER:
			case SystemVerilogParser.LOCALPARAM:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.NET_TYPE:
			case SystemVerilogParser.INTERCONNECT:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.GENVAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.SEMIC:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1143;
				this.module_or_generate_item();
				}
				break;
			case SystemVerilogParser.GENERATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1144;
				this.generate_region();
				}
				break;
			case SystemVerilogParser.MODULE_KEYWORD:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1145;
				this.module_declaration();
				}
				break;
			case SystemVerilogParser.TIMEUNIT:
			case SystemVerilogParser.TIMEPRECISION:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1146;
				this.timeunits_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameter_override(): Parameter_overrideContext {
		let _localctx: Parameter_overrideContext = new Parameter_overrideContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, SystemVerilogParser.RULE_parameter_override);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1149;
			this.match(SystemVerilogParser.DEFPARAM);
			this.state = 1150;
			this.list_of_defparam_assignments();
			this.state = 1151;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_or_generate_item(): Interface_or_generate_itemContext {
		let _localctx: Interface_or_generate_itemContext = new Interface_or_generate_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, SystemVerilogParser.RULE_interface_or_generate_item);
		try {
			this.state = 1156;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.CLASS:
			case SystemVerilogParser.TASK:
			case SystemVerilogParser.FUNCTION:
			case SystemVerilogParser.ALIAS:
			case SystemVerilogParser.ASSIGN:
			case SystemVerilogParser.INITIAL:
			case SystemVerilogParser.ALWAYS_KEYWORD:
			case SystemVerilogParser.IF:
			case SystemVerilogParser.FOR:
			case SystemVerilogParser.CASE_KEYWORD:
			case SystemVerilogParser.FINAL:
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.TYPEDEF:
			case SystemVerilogParser.NETTYPE:
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.DOL_FATAL:
			case SystemVerilogParser.DOL_ERROR:
			case SystemVerilogParser.DOL_WARNING:
			case SystemVerilogParser.DOL_INFO:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.PARAMETER:
			case SystemVerilogParser.LOCALPARAM:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.NET_TYPE:
			case SystemVerilogParser.INTERCONNECT:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.GENVAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.SEMIC:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1153;
				this.module_common_item();
				}
				break;
			case SystemVerilogParser.MODPORT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1154;
				this.modport_declaration();
				}
				break;
			case SystemVerilogParser.EXTERN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1155;
				this.extern_tf_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extern_tf_declaration(): Extern_tf_declarationContext {
		let _localctx: Extern_tf_declarationContext = new Extern_tf_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, SystemVerilogParser.RULE_extern_tf_declaration);
		try {
			this.state = 1167;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 86, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1158;
				this.match(SystemVerilogParser.EXTERN);
				this.state = 1159;
				this.method_prototype();
				this.state = 1160;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1162;
				this.match(SystemVerilogParser.EXTERN);
				this.state = 1163;
				this.match(SystemVerilogParser.FORKJOIN);
				this.state = 1164;
				this.task_prototype();
				this.state = 1165;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_item(): Interface_itemContext {
		let _localctx: Interface_itemContext = new Interface_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, SystemVerilogParser.RULE_interface_item);
		try {
			this.state = 1173;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 87, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1169;
				this.port_declaration();
				this.state = 1170;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1172;
				this.non_port_interface_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public non_port_interface_item(): Non_port_interface_itemContext {
		let _localctx: Non_port_interface_itemContext = new Non_port_interface_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, SystemVerilogParser.RULE_non_port_interface_item);
		try {
			this.state = 1179;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.GENERATE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1175;
				this.generate_region();
				}
				break;
			case SystemVerilogParser.CLASS:
			case SystemVerilogParser.TASK:
			case SystemVerilogParser.FUNCTION:
			case SystemVerilogParser.MODPORT:
			case SystemVerilogParser.ALIAS:
			case SystemVerilogParser.ASSIGN:
			case SystemVerilogParser.INITIAL:
			case SystemVerilogParser.ALWAYS_KEYWORD:
			case SystemVerilogParser.IF:
			case SystemVerilogParser.FOR:
			case SystemVerilogParser.CASE_KEYWORD:
			case SystemVerilogParser.FINAL:
			case SystemVerilogParser.EXTERN:
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.TYPEDEF:
			case SystemVerilogParser.NETTYPE:
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.DOL_FATAL:
			case SystemVerilogParser.DOL_ERROR:
			case SystemVerilogParser.DOL_WARNING:
			case SystemVerilogParser.DOL_INFO:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.PARAMETER:
			case SystemVerilogParser.LOCALPARAM:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.NET_TYPE:
			case SystemVerilogParser.INTERCONNECT:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.GENVAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.SEMIC:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1176;
				this.interface_or_generate_item();
				}
				break;
			case SystemVerilogParser.INTERFACE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1177;
				this.interface_declaration();
				}
				break;
			case SystemVerilogParser.TIMEUNIT:
			case SystemVerilogParser.TIMEPRECISION:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1178;
				this.timeunits_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_item(): Class_itemContext {
		let _localctx: Class_itemContext = new Class_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, SystemVerilogParser.RULE_class_item);
		try {
			this.state = 1188;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 89, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1181;
				this.class_property();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1182;
				this.class_method();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1183;
				this.class_constraint();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1184;
				this.class_declaration();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1185;
				this.local_parameter_declaration();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1186;
				this.parameter_declaration();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1187;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_property(): Class_propertyContext {
		let _localctx: Class_propertyContext = new Class_propertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, SystemVerilogParser.RULE_class_property);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1212;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1193;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1190;
						this.property_qualifier();
						}
						}
					}
					this.state = 1195;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 90, this._ctx);
				}
				this.state = 1196;
				this.data_declaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1197;
				this.match(SystemVerilogParser.CONST);
				this.state = 1201;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (SystemVerilogParser.STATIC - 67)) | (1 << (SystemVerilogParser.PROTECTED - 67)) | (1 << (SystemVerilogParser.LOCAL - 67)))) !== 0)) {
					{
					{
					this.state = 1198;
					this.class_item_qualifier();
					}
					}
					this.state = 1203;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1204;
				this.data_type();
				this.state = 1205;
				this.ident();
				this.state = 1208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.EQ) {
					{
					this.state = 1206;
					this.match(SystemVerilogParser.EQ);
					this.state = 1207;
					this.constant_expression(0);
					}
				}

				this.state = 1210;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_method(): Class_methodContext {
		let _localctx: Class_methodContext = new Class_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, SystemVerilogParser.RULE_class_method);
		let _la: number;
		try {
			this.state = 1264;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 100, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.PURE - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.PROTECTED - 64)) | (1 << (SystemVerilogParser.LOCAL - 64)))) !== 0)) {
					{
					{
					this.state = 1214;
					this.method_qualifier();
					}
					}
					this.state = 1219;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1220;
				this.task_declaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1224;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.PURE - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.PROTECTED - 64)) | (1 << (SystemVerilogParser.LOCAL - 64)))) !== 0)) {
					{
					{
					this.state = 1221;
					this.method_qualifier();
					}
					}
					this.state = 1226;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1227;
				this.function_declaration();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1228;
				this.match(SystemVerilogParser.PURE);
				this.state = 1229;
				this.match(SystemVerilogParser.VIRTUAL);
				this.state = 1233;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (SystemVerilogParser.STATIC - 67)) | (1 << (SystemVerilogParser.PROTECTED - 67)) | (1 << (SystemVerilogParser.LOCAL - 67)))) !== 0)) {
					{
					{
					this.state = 1230;
					this.class_item_qualifier();
					}
					}
					this.state = 1235;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1236;
				this.method_prototype();
				this.state = 1237;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1239;
				this.match(SystemVerilogParser.EXTERN);
				this.state = 1243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.PURE - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.PROTECTED - 64)) | (1 << (SystemVerilogParser.LOCAL - 64)))) !== 0)) {
					{
					{
					this.state = 1240;
					this.method_qualifier();
					}
					}
					this.state = 1245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1246;
				this.method_prototype();
				this.state = 1247;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.PURE - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.PROTECTED - 64)) | (1 << (SystemVerilogParser.LOCAL - 64)))) !== 0)) {
					{
					{
					this.state = 1249;
					this.method_qualifier();
					}
					}
					this.state = 1254;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1255;
				this.class_constructor_declaration();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1256;
				this.match(SystemVerilogParser.EXTERN);
				this.state = 1260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.PURE - 64)) | (1 << (SystemVerilogParser.STATIC - 64)) | (1 << (SystemVerilogParser.PROTECTED - 64)) | (1 << (SystemVerilogParser.LOCAL - 64)))) !== 0)) {
					{
					{
					this.state = 1257;
					this.method_qualifier();
					}
					}
					this.state = 1262;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1263;
				this.class_constructor_prototype();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_constructor_prototype(): Class_constructor_prototypeContext {
		let _localctx: Class_constructor_prototypeContext = new Class_constructor_prototypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, SystemVerilogParser.RULE_class_constructor_prototype);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1266;
			this.match(SystemVerilogParser.FUNCTION);
			this.state = 1267;
			this.match(SystemVerilogParser.NEW);
			this.state = 1273;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_PRN) {
				{
				this.state = 1268;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 1270;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.SIGNING - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.OP_BRK || _la === SystemVerilogParser.SHP || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 1269;
					this.tf_port_list();
					}
				}

				this.state = 1272;
				this.match(SystemVerilogParser.CL_PRN);
				}
			}

			this.state = 1275;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_constraint(): Class_constraintContext {
		let _localctx: Class_constraintContext = new Class_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, SystemVerilogParser.RULE_class_constraint);
		try {
			this.state = 1279;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1277;
				this.constraint_prototype();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1278;
				this.constraint_declaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_item_qualifier(): Class_item_qualifierContext {
		let _localctx: Class_item_qualifierContext = new Class_item_qualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, SystemVerilogParser.RULE_class_item_qualifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1281;
			_la = this._input.LA(1);
			if (!(((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & ((1 << (SystemVerilogParser.STATIC - 67)) | (1 << (SystemVerilogParser.PROTECTED - 67)) | (1 << (SystemVerilogParser.LOCAL - 67)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public property_qualifier(): Property_qualifierContext {
		let _localctx: Property_qualifierContext = new Property_qualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, SystemVerilogParser.RULE_property_qualifier);
		try {
			this.state = 1285;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.RANDOM_QUALIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1283;
				this.match(SystemVerilogParser.RANDOM_QUALIFIER);
				}
				break;
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.PROTECTED:
			case SystemVerilogParser.LOCAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1284;
				this.class_item_qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public method_qualifier(): Method_qualifierContext {
		let _localctx: Method_qualifierContext = new Method_qualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, SystemVerilogParser.RULE_method_qualifier);
		let _la: number;
		try {
			this.state = 1292;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.PURE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1288;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.PURE) {
					{
					this.state = 1287;
					this.match(SystemVerilogParser.PURE);
					}
				}

				this.state = 1290;
				this.match(SystemVerilogParser.VIRTUAL);
				}
				break;
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.PROTECTED:
			case SystemVerilogParser.LOCAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1291;
				this.class_item_qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public method_prototype(): Method_prototypeContext {
		let _localctx: Method_prototypeContext = new Method_prototypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, SystemVerilogParser.RULE_method_prototype);
		try {
			this.state = 1296;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.TASK:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1294;
				this.task_prototype();
				}
				break;
			case SystemVerilogParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1295;
				this.function_prototype();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_constructor_declaration(): Class_constructor_declarationContext {
		let _localctx: Class_constructor_declarationContext = new Class_constructor_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, SystemVerilogParser.RULE_class_constructor_declaration);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1298;
			this.match(SystemVerilogParser.FUNCTION);
			this.state = 1300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SCOPE_UNIT || _la === SystemVerilogParser.IDENT) {
				{
				this.state = 1299;
				this.class_scope();
				}
			}

			this.state = 1302;
			this.match(SystemVerilogParser.NEW);
			this.state = 1308;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_PRN) {
				{
				this.state = 1303;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 1305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.SIGNING - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.OP_BRK || _la === SystemVerilogParser.SHP || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 1304;
					this.tf_port_list();
					}
				}

				this.state = 1307;
				this.match(SystemVerilogParser.CL_PRN);
				}
			}

			this.state = 1310;
			this.match(SystemVerilogParser.SEMIC);
			this.state = 1314;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1311;
					this.block_item_declaration();
					}
					}
				}
				this.state = 1316;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);
			}
			this.state = 1327;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 113, this._ctx) ) {
			case 1:
				{
				this.state = 1317;
				this.match(SystemVerilogParser.SUPER);
				this.state = 1318;
				this.match(SystemVerilogParser.DOT);
				this.state = 1319;
				this.match(SystemVerilogParser.NEW);
				this.state = 1324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 1320;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 1321;
					this.list_of_arguments();
					this.state = 1322;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				this.state = 1326;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
			this.state = 1332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (SystemVerilogParser.ASSIGN - 23)) | (1 << (SystemVerilogParser.DEASSIGN - 23)) | (1 << (SystemVerilogParser.FORCE - 23)) | (1 << (SystemVerilogParser.RELEASE - 23)) | (1 << (SystemVerilogParser.FOREVER - 23)) | (1 << (SystemVerilogParser.REPEAT - 23)) | (1 << (SystemVerilogParser.IF - 23)) | (1 << (SystemVerilogParser.FOREACH - 23)) | (1 << (SystemVerilogParser.FOR - 23)) | (1 << (SystemVerilogParser.WHILE - 23)) | (1 << (SystemVerilogParser.DO - 23)) | (1 << (SystemVerilogParser.RETURN - 23)) | (1 << (SystemVerilogParser.BREAK - 23)) | (1 << (SystemVerilogParser.CONTINUE - 23)) | (1 << (SystemVerilogParser.WAIT - 23)) | (1 << (SystemVerilogParser.WAITORDER - 23)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 23)) | (1 << (SystemVerilogParser.PRIORITY - 23)) | (1 << (SystemVerilogParser.UNIQUE - 23)) | (1 << (SystemVerilogParser.UNIQUE0 - 23)) | (1 << (SystemVerilogParser.ASSERT - 23)) | (1 << (SystemVerilogParser.ASSUME - 23)) | (1 << (SystemVerilogParser.COVER - 23)))) !== 0) || ((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (SystemVerilogParser.DISABLE - 58)) | (1 << (SystemVerilogParser.BEGIN - 58)) | (1 << (SystemVerilogParser.THIS - 58)) | (1 << (SystemVerilogParser.SUPER - 58)) | (1 << (SystemVerilogParser.THISSUPER - 58)) | (1 << (SystemVerilogParser.CLASS_ROOT - 58)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 58)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 58)) | (1 << (SystemVerilogParser.SCOPE_STD - 58)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.VOID - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.SEMIC - 111)) | (1 << (SystemVerilogParser.AT - 111)))) !== 0) || ((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (SystemVerilogParser.SHP - 155)) | (1 << (SystemVerilogParser.SHPSHP - 155)) | (1 << (SystemVerilogParser.MINUSGT - 155)) | (1 << (SystemVerilogParser.MINUSGTGT - 155)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
				{
				{
				this.state = 1329;
				this.function_statement_or_null();
				}
				}
				this.state = 1334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1335;
			this.match(SystemVerilogParser.ENDFUNCTION);
			this.state = 1338;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 1336;
				this.match(SystemVerilogParser.COLON);
				this.state = 1337;
				this.match(SystemVerilogParser.NEW);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_declaration(): Constraint_declarationContext {
		let _localctx: Constraint_declarationContext = new Constraint_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, SystemVerilogParser.RULE_constraint_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC) {
				{
				this.state = 1340;
				this.match(SystemVerilogParser.STATIC);
				}
			}

			this.state = 1343;
			this.match(SystemVerilogParser.CONSTRAINT);
			this.state = 1344;
			this.ident();
			this.state = 1345;
			this.constraint_block();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_block(): Constraint_blockContext {
		let _localctx: Constraint_blockContext = new Constraint_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, SystemVerilogParser.RULE_constraint_block);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1347;
			this.match(SystemVerilogParser.OP_BRC);
			this.state = 1351;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (SystemVerilogParser.IF - 32)) | (1 << (SystemVerilogParser.UNIQUE - 32)) | (1 << (SystemVerilogParser.DISABLE - 32)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.SOLVE - 111)) | (1 << (SystemVerilogParser.SOFT - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 1348;
				this.constraint_block_item();
				}
				}
				this.state = 1353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1354;
			this.match(SystemVerilogParser.CL_BRC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_block_item(): Constraint_block_itemContext {
		let _localctx: Constraint_block_itemContext = new Constraint_block_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, SystemVerilogParser.RULE_constraint_block_item);
		try {
			this.state = 1363;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.SOLVE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1356;
				this.match(SystemVerilogParser.SOLVE);
				this.state = 1357;
				this.solve_before_list();
				this.state = 1358;
				this.match(SystemVerilogParser.BEFORE);
				this.state = 1359;
				this.solve_before_list();
				this.state = 1360;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.IF:
			case SystemVerilogParser.UNIQUE:
			case SystemVerilogParser.DISABLE:
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.SIGNING:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.NULL:
			case SystemVerilogParser.TAGGED:
			case SystemVerilogParser.SOFT:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.DOL:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1362;
				this.constraint_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public solve_before_list(): Solve_before_listContext {
		let _localctx: Solve_before_listContext = new Solve_before_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, SystemVerilogParser.RULE_solve_before_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1365;
			this.constraint_primary();
			this.state = 1370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 1366;
				this.match(SystemVerilogParser.COM);
				this.state = 1367;
				this.constraint_primary();
				}
				}
				this.state = 1372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_primary(): Constraint_primaryContext {
		let _localctx: Constraint_primaryContext = new Constraint_primaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, SystemVerilogParser.RULE_constraint_primary);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1377;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				{
				this.state = 1373;
				this.implicit_class_handle();
				this.state = 1374;
				this.match(SystemVerilogParser.DOT);
				}
				break;

			case 2:
				{
				this.state = 1376;
				this.class_scope();
				}
				break;
			}
			this.state = 1379;
			this.hier_ident();
			this.state = 1380;
			this.select();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_expression(): Constraint_expressionContext {
		let _localctx: Constraint_expressionContext = new Constraint_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, SystemVerilogParser.RULE_constraint_expression);
		let _la: number;
		try {
			this.state = 1409;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 123, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SOFT) {
					{
					this.state = 1382;
					this.match(SystemVerilogParser.SOFT);
					}
				}

				this.state = 1385;
				this.expression_or_dist();
				this.state = 1386;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1388;
				this.uniqueness_constraint();
				this.state = 1389;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1391;
				this.expression(0);
				this.state = 1392;
				this.match(SystemVerilogParser.EVENT);
				this.state = 1393;
				this.constraint_set();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1395;
				this.match(SystemVerilogParser.IF);
				this.state = 1396;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 1397;
				this.expression(0);
				this.state = 1398;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 1399;
				this.constraint_set();
				this.state = 1402;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
				case 1:
					{
					this.state = 1400;
					this.match(SystemVerilogParser.ELSE);
					this.state = 1401;
					this.constraint_set();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1404;
				this.match(SystemVerilogParser.DISABLE);
				this.state = 1405;
				this.match(SystemVerilogParser.SOFT);
				this.state = 1406;
				this.constraint_primary();
				this.state = 1407;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uniqueness_constraint(): Uniqueness_constraintContext {
		let _localctx: Uniqueness_constraintContext = new Uniqueness_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, SystemVerilogParser.RULE_uniqueness_constraint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1411;
			this.match(SystemVerilogParser.UNIQUE);
			this.state = 1412;
			this.match(SystemVerilogParser.OP_BRC);
			this.state = 1413;
			this.open_range_list();
			this.state = 1414;
			this.match(SystemVerilogParser.CL_BRC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_set(): Constraint_setContext {
		let _localctx: Constraint_setContext = new Constraint_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, SystemVerilogParser.RULE_constraint_set);
		let _la: number;
		try {
			this.state = 1425;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 125, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1416;
				this.constraint_expression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1417;
				this.match(SystemVerilogParser.OP_BRC);
				this.state = 1421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (SystemVerilogParser.IF - 32)) | (1 << (SystemVerilogParser.UNIQUE - 32)) | (1 << (SystemVerilogParser.DISABLE - 32)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.SOFT - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 1418;
					this.constraint_expression();
					}
					}
					this.state = 1423;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1424;
				this.match(SystemVerilogParser.CL_BRC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dist_list(): Dist_listContext {
		let _localctx: Dist_listContext = new Dist_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, SystemVerilogParser.RULE_dist_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1427;
			this.dist_item();
			this.state = 1432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 1428;
				this.match(SystemVerilogParser.COM);
				this.state = 1429;
				this.dist_item();
				}
				}
				this.state = 1434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dist_item(): Dist_itemContext {
		let _localctx: Dist_itemContext = new Dist_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, SystemVerilogParser.RULE_dist_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1435;
			this.value_range();
			this.state = 1437;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.DISTW_EQ || _la === SystemVerilogParser.DISTW_SL) {
				{
				this.state = 1436;
				this.dist_weight();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dist_weight(): Dist_weightContext {
		let _localctx: Dist_weightContext = new Dist_weightContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, SystemVerilogParser.RULE_dist_weight);
		try {
			this.state = 1443;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.DISTW_EQ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1439;
				this.match(SystemVerilogParser.DISTW_EQ);
				this.state = 1440;
				this.expression(0);
				}
				break;
			case SystemVerilogParser.DISTW_SL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1441;
				this.match(SystemVerilogParser.DISTW_SL);
				this.state = 1442;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_prototype(): Constraint_prototypeContext {
		let _localctx: Constraint_prototypeContext = new Constraint_prototypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, SystemVerilogParser.RULE_constraint_prototype);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1446;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EXTERN || _la === SystemVerilogParser.PURE) {
				{
				this.state = 1445;
				this.constraint_prototype_qualifier();
				}
			}

			this.state = 1449;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC) {
				{
				this.state = 1448;
				this.match(SystemVerilogParser.STATIC);
				}
			}

			this.state = 1451;
			this.match(SystemVerilogParser.CONSTRAINT);
			this.state = 1452;
			this.ident();
			this.state = 1453;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraint_prototype_qualifier(): Constraint_prototype_qualifierContext {
		let _localctx: Constraint_prototype_qualifierContext = new Constraint_prototype_qualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, SystemVerilogParser.RULE_constraint_prototype_qualifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1455;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.EXTERN || _la === SystemVerilogParser.PURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_item(): Package_itemContext {
		let _localctx: Package_itemContext = new Package_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, SystemVerilogParser.RULE_package_item);
		try {
			this.state = 1461;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 131, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1457;
				this.package_or_generate_item_declaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1458;
				this.anonymous_program();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1459;
				this.package_export_declaration();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1460;
				this.timeunits_declaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_or_generate_item_declaration(): Package_or_generate_item_declarationContext {
		let _localctx: Package_or_generate_item_declarationContext = new Package_or_generate_item_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, SystemVerilogParser.RULE_package_or_generate_item_declaration);
		try {
			this.state = 1476;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 132, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1463;
				this.net_declaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1464;
				this.data_declaration();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1465;
				this.task_declaration();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1466;
				this.function_declaration();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1467;
				this.class_declaration();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1468;
				this.class_constructor_declaration();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1469;
				this.local_parameter_declaration();
				this.state = 1470;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1472;
				this.parameter_declaration();
				this.state = 1473;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1475;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public anonymous_program(): Anonymous_programContext {
		let _localctx: Anonymous_programContext = new Anonymous_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, SystemVerilogParser.RULE_anonymous_program);
		try {
			this.state = 1483;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 133, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1478;
				this.task_declaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1479;
				this.function_declaration();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1480;
				this.class_declaration();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1481;
				this.class_constructor_declaration();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1482;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public local_parameter_declaration(): Local_parameter_declarationContext {
		let _localctx: Local_parameter_declarationContext = new Local_parameter_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, SystemVerilogParser.RULE_local_parameter_declaration);
		try {
			this.state = 1492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 134, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1485;
				this.match(SystemVerilogParser.LOCALPARAM);
				this.state = 1486;
				this.data_type_or_implicit();
				this.state = 1487;
				this.list_of_param_assignments();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1489;
				this.match(SystemVerilogParser.LOCALPARAM);
				this.state = 1490;
				this.match(SystemVerilogParser.TYPE);
				this.state = 1491;
				this.list_of_type_assignments();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameter_declaration(): Parameter_declarationContext {
		let _localctx: Parameter_declarationContext = new Parameter_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, SystemVerilogParser.RULE_parameter_declaration);
		try {
			this.state = 1501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 135, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1494;
				this.match(SystemVerilogParser.PARAMETER);
				this.state = 1495;
				this.data_type_or_implicit();
				this.state = 1496;
				this.list_of_param_assignments();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1498;
				this.match(SystemVerilogParser.PARAMETER);
				this.state = 1499;
				this.match(SystemVerilogParser.TYPE);
				this.state = 1500;
				this.list_of_type_assignments();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inout_declaration(): Inout_declarationContext {
		let _localctx: Inout_declarationContext = new Inout_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, SystemVerilogParser.RULE_inout_declaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1503;
			this.match(SystemVerilogParser.INOUT);
			this.state = 1504;
			this.net_port_type();
			this.state = 1505;
			this.list_of_port_identifiers();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public input_declaration(): Input_declarationContext {
		let _localctx: Input_declarationContext = new Input_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, SystemVerilogParser.RULE_input_declaration);
		try {
			this.state = 1515;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1507;
				this.match(SystemVerilogParser.INPUT);
				this.state = 1508;
				this.net_port_type();
				this.state = 1509;
				this.list_of_port_identifiers();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1511;
				this.match(SystemVerilogParser.INPUT);
				this.state = 1512;
				this.variable_port_type();
				this.state = 1513;
				this.list_of_variable_port_identifiers();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public output_declaration(): Output_declarationContext {
		let _localctx: Output_declarationContext = new Output_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, SystemVerilogParser.RULE_output_declaration);
		try {
			this.state = 1525;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 137, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1517;
				this.match(SystemVerilogParser.OUTPUT);
				this.state = 1518;
				this.net_port_type();
				this.state = 1519;
				this.list_of_port_identifiers();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1521;
				this.match(SystemVerilogParser.OUTPUT);
				this.state = 1522;
				this.variable_port_type();
				this.state = 1523;
				this.list_of_variable_port_identifiers();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interface_port_declaration(): Interface_port_declarationContext {
		let _localctx: Interface_port_declarationContext = new Interface_port_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, SystemVerilogParser.RULE_interface_port_declaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1527;
			this.ident();
			this.state = 1528;
			this.list_of_interface_identifiers();
			this.state = 1529;
			this.ident();
			this.state = 1530;
			this.match(SystemVerilogParser.DOT);
			this.state = 1531;
			this.ident();
			this.state = 1532;
			this.list_of_interface_identifiers();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ref_declaration(): Ref_declarationContext {
		let _localctx: Ref_declarationContext = new Ref_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, SystemVerilogParser.RULE_ref_declaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1534;
			this.match(SystemVerilogParser.REF);
			this.state = 1535;
			this.variable_port_type();
			this.state = 1536;
			this.list_of_variable_identifiers();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_declaration(): Data_declarationContext {
		let _localctx: Data_declarationContext = new Data_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, SystemVerilogParser.RULE_data_declaration);
		let _la: number;
		try {
			this.state = 1554;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.IDENT:
				_localctx = new Data_declaration_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.CONST) {
					{
					this.state = 1538;
					(_localctx as Data_declaration_0Context)._c = this.match(SystemVerilogParser.CONST);
					}
				}

				this.state = 1542;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.VAR) {
					{
					this.state = 1541;
					(_localctx as Data_declaration_0Context)._v = this.match(SystemVerilogParser.VAR);
					}
				}

				this.state = 1545;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
					{
					this.state = 1544;
					this.lifetime();
					}
				}

				this.state = 1547;
				this.data_type();
				this.state = 1548;
				this.list_of_variable_decl_assignments();
				this.state = 1549;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.TYPEDEF:
				_localctx = new Data_declaration_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1551;
				this.type_declaration();
				}
				break;
			case SystemVerilogParser.IMPORT:
				_localctx = new Data_declaration_2Context(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1552;
				this.package_import_declaration();
				}
				break;
			case SystemVerilogParser.NETTYPE:
				_localctx = new Data_declaration_3Context(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1553;
				this.net_type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_import_declaration(): Package_import_declarationContext {
		let _localctx: Package_import_declarationContext = new Package_import_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, SystemVerilogParser.RULE_package_import_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1556;
			this.match(SystemVerilogParser.IMPORT);
			this.state = 1557;
			this.package_import_item();
			this.state = 1562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 1558;
				this.match(SystemVerilogParser.COM);
				this.state = 1559;
				this.package_import_item();
				}
				}
				this.state = 1564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1565;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_import_item(): Package_import_itemContext {
		let _localctx: Package_import_itemContext = new Package_import_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, SystemVerilogParser.RULE_package_import_item);
		try {
			this.state = 1575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1567;
				this.ident();
				this.state = 1568;
				this.match(SystemVerilogParser.SCOPE);
				this.state = 1569;
				this.ident();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1571;
				this.ident();
				this.state = 1572;
				this.match(SystemVerilogParser.SCOPE);
				this.state = 1573;
				this.match(SystemVerilogParser.MULT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_export_declaration(): Package_export_declarationContext {
		let _localctx: Package_export_declarationContext = new Package_export_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, SystemVerilogParser.RULE_package_export_declaration);
		try {
			this.state = 1587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 144, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1577;
				this.match(SystemVerilogParser.EXPORT);
				this.state = 1578;
				this.match(SystemVerilogParser.SCOPE_FORALL);
				this.state = 1579;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1580;
				this.match(SystemVerilogParser.EXPORT);
				this.state = 1581;
				this.package_import_item();
				{
				this.state = 1582;
				this.match(SystemVerilogParser.COM);
				this.state = 1583;
				this.package_import_item();
				}
				this.state = 1585;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public genvar_declaration(): Genvar_declarationContext {
		let _localctx: Genvar_declarationContext = new Genvar_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, SystemVerilogParser.RULE_genvar_declaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1589;
			this.match(SystemVerilogParser.GENVAR);
			this.state = 1590;
			this.list_of_genvar_identifiers();
			this.state = 1591;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_declaration(): Net_declarationContext {
		let _localctx: Net_declarationContext = new Net_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, SystemVerilogParser.RULE_net_declaration);
		let _la: number;
		try {
			this.state = 1618;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.NET_TYPE:
				_localctx = new Net_declaration_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1593;
				this.match(SystemVerilogParser.NET_TYPE);
				this.state = 1594;
				this.data_type_or_implicit();
				this.state = 1595;
				this.list_of_net_decl_assignments();
				this.state = 1596;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.IDENT:
				_localctx = new Net_declaration_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1598;
				this.ident();
				this.state = 1599;
				this.list_of_net_decl_assignments();
				this.state = 1600;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.INTERCONNECT:
				_localctx = new Net_declaration_2Context(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1602;
				this.match(SystemVerilogParser.INTERCONNECT);
				this.state = 1603;
				this.implicit_data_type();
				this.state = 1606;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SHP) {
					{
					this.state = 1604;
					this.match(SystemVerilogParser.SHP);
					this.state = 1605;
					this.delay_value();
					}
				}

				this.state = 1608;
				this.ident();
				this.state = 1609;
				this.unpacked_dimension();
				this.state = 1614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COM) {
					{
					this.state = 1610;
					this.match(SystemVerilogParser.COM);
					this.state = 1611;
					this.ident();
					this.state = 1612;
					this.unpacked_dimension();
					}
				}

				this.state = 1616;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_declaration(): Type_declarationContext {
		let _localctx: Type_declarationContext = new Type_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, SystemVerilogParser.RULE_type_declaration);
		let _la: number;
		try {
			this.state = 1646;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 150, this._ctx) ) {
			case 1:
				_localctx = new Type_declaration_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1620;
				this.match(SystemVerilogParser.TYPEDEF);
				this.state = 1621;
				this.data_type();
				this.state = 1622;
				this.ident();
				this.state = 1626;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1623;
					this.variable_dimension();
					}
					}
					this.state = 1628;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1629;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				_localctx = new Type_declaration_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1631;
				this.match(SystemVerilogParser.TYPEDEF);
				this.state = 1632;
				this.ident();
				this.state = 1633;
				this.constant_bit_select();
				this.state = 1634;
				this.match(SystemVerilogParser.DOT);
				this.state = 1635;
				this.ident();
				this.state = 1636;
				this.ident();
				this.state = 1637;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 3:
				_localctx = new Type_declaration_2Context(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1639;
				this.match(SystemVerilogParser.TYPEDEF);
				this.state = 1641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.INTERFACE || _la === SystemVerilogParser.CLASS || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & ((1 << (SystemVerilogParser.ENUM - 116)) | (1 << (SystemVerilogParser.STRUCT - 116)) | (1 << (SystemVerilogParser.UNION - 116)))) !== 0)) {
					{
					this.state = 1640;
					this.type_declaration_type();
					}
				}

				this.state = 1643;
				this.ident();
				this.state = 1644;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_declaration_type(): Type_declaration_typeContext {
		let _localctx: Type_declaration_typeContext = new Type_declaration_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, SystemVerilogParser.RULE_type_declaration_type);
		try {
			this.state = 1654;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.ENUM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1648;
				this.match(SystemVerilogParser.ENUM);
				}
				break;
			case SystemVerilogParser.STRUCT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1649;
				this.match(SystemVerilogParser.STRUCT);
				}
				break;
			case SystemVerilogParser.UNION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1650;
				this.match(SystemVerilogParser.UNION);
				}
				break;
			case SystemVerilogParser.CLASS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1651;
				this.match(SystemVerilogParser.CLASS);
				}
				break;
			case SystemVerilogParser.INTERFACE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1652;
				this.match(SystemVerilogParser.INTERFACE);
				this.state = 1653;
				this.match(SystemVerilogParser.CLASS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_type_declaration(): Net_type_declarationContext {
		let _localctx: Net_type_declarationContext = new Net_type_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, SystemVerilogParser.RULE_net_type_declaration);
		let _la: number;
		try {
			this.state = 1679;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1656;
				this.match(SystemVerilogParser.NETTYPE);
				this.state = 1657;
				this.data_type();
				this.state = 1658;
				this.ident();
				this.state = 1666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.WITH) {
					{
					this.state = 1659;
					this.match(SystemVerilogParser.WITH);
					this.state = 1662;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
					case 1:
						{
						this.state = 1660;
						this.package_scope();
						}
						break;

					case 2:
						{
						this.state = 1661;
						this.class_scope();
						}
						break;
					}
					this.state = 1664;
					this.ident();
					}
				}

				this.state = 1668;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1670;
				this.match(SystemVerilogParser.NETTYPE);
				this.state = 1673;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
				case 1:
					{
					this.state = 1671;
					this.package_scope();
					}
					break;

				case 2:
					{
					this.state = 1672;
					this.class_scope();
					}
					break;
				}
				this.state = 1675;
				this.ident();
				this.state = 1676;
				this.ident();
				this.state = 1677;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lifetime(): LifetimeContext {
		let _localctx: LifetimeContext = new LifetimeContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, SystemVerilogParser.RULE_lifetime);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1681;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public casting_type(): Casting_typeContext {
		let _localctx: Casting_typeContext = new Casting_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, SystemVerilogParser.RULE_casting_type);
		try {
			this.state = 1689;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1683;
				this.simple_type();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1684;
				this.constant_primary();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1685;
				this.number();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1686;
				this.match(SystemVerilogParser.SIGNING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1687;
				this.match(SystemVerilogParser.STRING);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1688;
				this.match(SystemVerilogParser.CONST);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type(): Data_typeContext {
		let _localctx: Data_typeContext = new Data_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, SystemVerilogParser.RULE_data_type);
		let _la: number;
		try {
			this.state = 1776;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				_localctx = new Data_type_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1691;
				this.match(SystemVerilogParser.INTEGER_VECTOR_TYPE);
				this.state = 1693;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SIGNING) {
					{
					this.state = 1692;
					this.match(SystemVerilogParser.SIGNING);
					}
				}

				this.state = 1698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1695;
					this.packed_dimension();
					}
					}
					this.state = 1700;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new Data_type_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1701;
				this.match(SystemVerilogParser.INTEGER_ATOM_TYPE);
				this.state = 1703;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SIGNING) {
					{
					this.state = 1702;
					this.match(SystemVerilogParser.SIGNING);
					}
				}

				}
				break;

			case 3:
				_localctx = new Data_type_2Context(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1705;
				this.match(SystemVerilogParser.NON_INTEGER_TYPE);
				}
				break;

			case 4:
				_localctx = new Data_type_3Context(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1706;
				this.struct_union();
				this.state = 1711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.PACKED) {
					{
					this.state = 1707;
					(_localctx as Data_type_3Context)._p = this.match(SystemVerilogParser.PACKED);
					this.state = 1709;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SystemVerilogParser.SIGNING) {
						{
						this.state = 1708;
						this.match(SystemVerilogParser.SIGNING);
						}
					}

					}
				}

				this.state = 1713;
				this.match(SystemVerilogParser.OP_BRC);
				this.state = 1715;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1714;
					this.struct_union_member();
					}
					}
					this.state = 1717;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)))) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & ((1 << (SystemVerilogParser.STRING - 102)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 102)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 102)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 102)) | (1 << (SystemVerilogParser.RANDOM_QUALIFIER - 102)) | (1 << (SystemVerilogParser.VOID - 102)) | (1 << (SystemVerilogParser.TYPE - 102)) | (1 << (SystemVerilogParser.ENUM - 102)) | (1 << (SystemVerilogParser.STRUCT - 102)) | (1 << (SystemVerilogParser.UNION - 102)))) !== 0) || _la === SystemVerilogParser.IDENT);
				this.state = 1719;
				this.match(SystemVerilogParser.CL_BRC);
				this.state = 1723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1720;
					this.packed_dimension();
					}
					}
					this.state = 1725;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 5:
				_localctx = new Data_type_4Context(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1726;
				this.match(SystemVerilogParser.ENUM);
				this.state = 1727;
				this.enum_base_type();
				this.state = 1728;
				this.match(SystemVerilogParser.OP_BRC);
				this.state = 1729;
				this.enum_name_declaration();
				this.state = 1734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 1730;
					this.match(SystemVerilogParser.COM);
					this.state = 1731;
					this.enum_name_declaration();
					}
					}
					this.state = 1736;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1737;
				this.match(SystemVerilogParser.CL_BRC);
				this.state = 1741;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1738;
					this.packed_dimension();
					}
					}
					this.state = 1743;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 6:
				_localctx = new Data_type_5Context(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1744;
				this.match(SystemVerilogParser.STRING);
				}
				break;

			case 7:
				_localctx = new Data_type_6Context(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1745;
				this.match(SystemVerilogParser.CHANDLE);
				}
				break;

			case 8:
				_localctx = new Data_type_7Context(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1746;
				this.match(SystemVerilogParser.VIRTUAL);
				this.state = 1748;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.INTERFACE) {
					{
					this.state = 1747;
					this.match(SystemVerilogParser.INTERFACE);
					}
				}

				this.state = 1750;
				this.ident();
				this.state = 1754;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.SHP) {
					{
					{
					this.state = 1751;
					this.parameter_value_assignment();
					}
					}
					this.state = 1756;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.DOT) {
					{
					this.state = 1757;
					this.match(SystemVerilogParser.DOT);
					this.state = 1758;
					this.ident();
					}
				}

				}
				break;

			case 9:
				_localctx = new Data_type_8Context(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1763;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
				case 1:
					{
					this.state = 1761;
					this.class_scope();
					}
					break;

				case 2:
					{
					this.state = 1762;
					this.package_scope();
					}
					break;
				}
				this.state = 1765;
				this.ident();
				this.state = 1769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1766;
					this.packed_dimension();
					}
					}
					this.state = 1771;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 10:
				_localctx = new Data_type_9Context(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1772;
				this.class_type();
				}
				break;

			case 11:
				_localctx = new Data_type_10Context(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1773;
				this.match(SystemVerilogParser.EVENT);
				}
				break;

			case 12:
				_localctx = new Data_type_11Context(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1774;
				this.ps_ident();
				}
				break;

			case 13:
				_localctx = new Data_type_12Context(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1775;
				this.type_reference();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type_or_implicit(): Data_type_or_implicitContext {
		let _localctx: Data_type_or_implicitContext = new Data_type_or_implicitContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, SystemVerilogParser.RULE_data_type_or_implicit);
		try {
			this.state = 1780;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 172, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1778;
				this.data_type();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1779;
				this.implicit_data_type();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public implicit_data_type(): Implicit_data_typeContext {
		let _localctx: Implicit_data_typeContext = new Implicit_data_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, SystemVerilogParser.RULE_implicit_data_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1783;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SIGNING) {
				{
				this.state = 1782;
				this.match(SystemVerilogParser.SIGNING);
				}
			}

			this.state = 1788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 1785;
				this.packed_dimension();
				}
				}
				this.state = 1790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enum_base_type(): Enum_base_typeContext {
		let _localctx: Enum_base_typeContext = new Enum_base_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, SystemVerilogParser.RULE_enum_base_type);
		let _la: number;
		try {
			this.state = 1806;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1791;
				this.match(SystemVerilogParser.INTEGER_ATOM_TYPE);
				this.state = 1793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SIGNING) {
					{
					this.state = 1792;
					this.match(SystemVerilogParser.SIGNING);
					}
				}

				}
				break;
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1795;
				this.match(SystemVerilogParser.INTEGER_VECTOR_TYPE);
				this.state = 1797;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SIGNING) {
					{
					this.state = 1796;
					this.match(SystemVerilogParser.SIGNING);
					}
				}

				this.state = 1800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_BRK) {
					{
					this.state = 1799;
					this.packed_dimension();
					}
				}

				}
				break;
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1802;
				this.ident();
				this.state = 1804;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_BRK) {
					{
					this.state = 1803;
					this.packed_dimension();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enum_name_declaration(): Enum_name_declarationContext {
		let _localctx: Enum_name_declarationContext = new Enum_name_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, SystemVerilogParser.RULE_enum_name_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1808;
			this.ident();
			this.state = 1817;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_BRK) {
				{
				this.state = 1809;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 1810;
				this.integral_number();
				this.state = 1813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 1811;
					this.match(SystemVerilogParser.COLON);
					this.state = 1812;
					this.integral_number();
					}
				}

				this.state = 1815;
				this.match(SystemVerilogParser.CL_BRK);
				}
			}

			this.state = 1821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EQ) {
				{
				this.state = 1819;
				this.match(SystemVerilogParser.EQ);
				this.state = 1820;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_scope(): Class_scopeContext {
		let _localctx: Class_scopeContext = new Class_scopeContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, SystemVerilogParser.RULE_class_scope);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1823;
			this.class_type();
			this.state = 1824;
			this.match(SystemVerilogParser.SCOPE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_type(): Class_typeContext {
		let _localctx: Class_typeContext = new Class_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, SystemVerilogParser.RULE_class_type);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1826;
			this.ps_ident();
			this.state = 1828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 1827;
				this.parameter_value_assignment();
				}
			}

			this.state = 1837;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1830;
					this.match(SystemVerilogParser.SCOPE);
					this.state = 1831;
					this.ident();
					this.state = 1833;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SystemVerilogParser.SHP) {
						{
						this.state = 1832;
						this.parameter_value_assignment();
						}
					}

					}
					}
				}
				this.state = 1839;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 185, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public integer_type(): Integer_typeContext {
		let _localctx: Integer_typeContext = new Integer_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, SystemVerilogParser.RULE_integer_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1840;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.INTEGER_ATOM_TYPE || _la === SystemVerilogParser.INTEGER_VECTOR_TYPE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_port_type(): Net_port_typeContext {
		let _localctx: Net_port_typeContext = new Net_port_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, SystemVerilogParser.RULE_net_port_type);
		let _la: number;
		try {
			this.state = 1849;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				_localctx = new Net_port_type_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1842;
				this.ident();
				}
				break;

			case 2:
				_localctx = new Net_port_type_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.NET_TYPE) {
					{
					this.state = 1843;
					this.match(SystemVerilogParser.NET_TYPE);
					}
				}

				this.state = 1846;
				this.data_type_or_implicit();
				}
				break;

			case 3:
				_localctx = new Net_port_type_2Context(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1847;
				this.match(SystemVerilogParser.INTERCONNECT);
				this.state = 1848;
				this.implicit_data_type();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable_port_type(): Variable_port_typeContext {
		let _localctx: Variable_port_typeContext = new Variable_port_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, SystemVerilogParser.RULE_variable_port_type);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1851;
			this.var_data_type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public var_data_type(): Var_data_typeContext {
		let _localctx: Var_data_typeContext = new Var_data_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, SystemVerilogParser.RULE_var_data_type);
		try {
			this.state = 1856;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1853;
				this.data_type();
				}
				break;
			case SystemVerilogParser.VAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1854;
				this.match(SystemVerilogParser.VAR);
				this.state = 1855;
				this.data_type_or_implicit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_type(): Simple_typeContext {
		let _localctx: Simple_typeContext = new Simple_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, SystemVerilogParser.RULE_simple_type);
		try {
			this.state = 1861;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1858;
				this.integer_type();
				}
				break;
			case SystemVerilogParser.NON_INTEGER_TYPE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1859;
				this.match(SystemVerilogParser.NON_INTEGER_TYPE);
				}
				break;
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1860;
				this.ps_ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public struct_union(): Struct_unionContext {
		let _localctx: Struct_unionContext = new Struct_unionContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, SystemVerilogParser.RULE_struct_union);
		let _la: number;
		try {
			this.state = 1868;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.STRUCT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1863;
				this.match(SystemVerilogParser.STRUCT);
				}
				break;
			case SystemVerilogParser.UNION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1864;
				this.match(SystemVerilogParser.UNION);
				this.state = 1866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.TAGGED) {
					{
					this.state = 1865;
					this.match(SystemVerilogParser.TAGGED);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type_or_void(): Data_type_or_voidContext {
		let _localctx: Data_type_or_voidContext = new Data_type_or_voidContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, SystemVerilogParser.RULE_data_type_or_void);
		try {
			this.state = 1872;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1870;
				this.data_type();
				}
				break;
			case SystemVerilogParser.VOID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1871;
				this.match(SystemVerilogParser.VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public struct_union_member(): Struct_union_memberContext {
		let _localctx: Struct_union_memberContext = new Struct_union_memberContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, SystemVerilogParser.RULE_struct_union_member);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.RANDOM_QUALIFIER) {
				{
				this.state = 1874;
				this.match(SystemVerilogParser.RANDOM_QUALIFIER);
				}
			}

			this.state = 1877;
			this.data_type_or_void();
			this.state = 1878;
			this.list_of_variable_decl_assignments();
			this.state = 1879;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_reference(): Type_referenceContext {
		let _localctx: Type_referenceContext = new Type_referenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, SystemVerilogParser.RULE_type_reference);
		try {
			this.state = 1891;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 194, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1881;
				this.match(SystemVerilogParser.TYPE);
				this.state = 1882;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 1883;
				this.expression(0);
				this.state = 1884;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1886;
				this.match(SystemVerilogParser.TYPE);
				this.state = 1887;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 1888;
				this.data_type();
				this.state = 1889;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delay_value(): Delay_valueContext {
		let _localctx: Delay_valueContext = new Delay_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, SystemVerilogParser.RULE_delay_value);
		try {
			this.state = 1898;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1893;
				this.match(SystemVerilogParser.UNSIGNED_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1894;
				this.real_number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1895;
				this.ps_ident();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1896;
				this.time_literal();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1897;
				this.match(SystemVerilogParser.ONESTEP);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_defparam_assignments(): List_of_defparam_assignmentsContext {
		let _localctx: List_of_defparam_assignmentsContext = new List_of_defparam_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, SystemVerilogParser.RULE_list_of_defparam_assignments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1900;
			this.defparam_assignment();
			this.state = 1905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 1901;
				this.match(SystemVerilogParser.COM);
				this.state = 1902;
				this.defparam_assignment();
				}
				}
				this.state = 1907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_genvar_identifiers(): List_of_genvar_identifiersContext {
		let _localctx: List_of_genvar_identifiersContext = new List_of_genvar_identifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, SystemVerilogParser.RULE_list_of_genvar_identifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1908;
			this.ident();
			this.state = 1913;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 1909;
				this.match(SystemVerilogParser.COM);
				this.state = 1910;
				this.ident();
				}
				}
				this.state = 1915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_interface_identifiers(): List_of_interface_identifiersContext {
		let _localctx: List_of_interface_identifiersContext = new List_of_interface_identifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, SystemVerilogParser.RULE_list_of_interface_identifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1916;
			this.ident();
			this.state = 1920;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 1917;
				this.unpacked_dimension();
				}
				}
				this.state = 1922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1933;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 1923;
				this.match(SystemVerilogParser.COM);
				this.state = 1924;
				this.ident();
				this.state = 1928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1925;
					this.unpacked_dimension();
					}
					}
					this.state = 1930;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1935;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_net_decl_assignments(): List_of_net_decl_assignmentsContext {
		let _localctx: List_of_net_decl_assignmentsContext = new List_of_net_decl_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, SystemVerilogParser.RULE_list_of_net_decl_assignments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1936;
			this.net_decl_assignment();
			this.state = 1941;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 1937;
				this.match(SystemVerilogParser.COM);
				this.state = 1938;
				this.net_decl_assignment();
				}
				}
				this.state = 1943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_param_assignments(): List_of_param_assignmentsContext {
		let _localctx: List_of_param_assignmentsContext = new List_of_param_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, SystemVerilogParser.RULE_list_of_param_assignments);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1944;
			this.param_assignment();
			this.state = 1949;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1945;
					this.match(SystemVerilogParser.COM);
					this.state = 1946;
					this.param_assignment();
					}
					}
				}
				this.state = 1951;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_port_identifiers(): List_of_port_identifiersContext {
		let _localctx: List_of_port_identifiersContext = new List_of_port_identifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, SystemVerilogParser.RULE_list_of_port_identifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1952;
			this.ident();
			this.state = 1956;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 1953;
				this.unpacked_dimension();
				}
				}
				this.state = 1958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 1959;
				this.ident();
				this.state = 1963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1960;
					this.unpacked_dimension();
					}
					}
					this.state = 1965;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 1970;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_tf_variable_identifiers(): List_of_tf_variable_identifiersContext {
		let _localctx: List_of_tf_variable_identifiersContext = new List_of_tf_variable_identifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, SystemVerilogParser.RULE_list_of_tf_variable_identifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1971;
			this.ident();
			this.state = 1975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 1972;
				this.variable_dimension();
				}
				}
				this.state = 1977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EQ) {
				{
				this.state = 1978;
				this.match(SystemVerilogParser.EQ);
				this.state = 1979;
				this.expression(0);
				}
			}

			this.state = 1995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 1982;
				this.ident();
				this.state = 1986;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 1983;
					this.variable_dimension();
					}
					}
					this.state = 1988;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.EQ) {
					{
					this.state = 1989;
					this.match(SystemVerilogParser.EQ);
					this.state = 1990;
					this.expression(0);
					}
				}

				}
				}
				this.state = 1997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_type_assignments(): List_of_type_assignmentsContext {
		let _localctx: List_of_type_assignmentsContext = new List_of_type_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, SystemVerilogParser.RULE_list_of_type_assignments);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1998;
			this.type_assignment();
			this.state = 2003;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1999;
					this.match(SystemVerilogParser.COM);
					this.state = 2000;
					this.type_assignment();
					}
					}
				}
				this.state = 2005;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_variable_decl_assignments(): List_of_variable_decl_assignmentsContext {
		let _localctx: List_of_variable_decl_assignmentsContext = new List_of_variable_decl_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, SystemVerilogParser.RULE_list_of_variable_decl_assignments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2006;
			this.variable_decl_assignment();
			this.state = 2011;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2007;
				this.match(SystemVerilogParser.COM);
				this.state = 2008;
				this.variable_decl_assignment();
				}
				}
				this.state = 2013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_variable_identifiers(): List_of_variable_identifiersContext {
		let _localctx: List_of_variable_identifiersContext = new List_of_variable_identifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, SystemVerilogParser.RULE_list_of_variable_identifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2014;
			this.ident();
			this.state = 2018;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 2015;
				this.variable_dimension();
				}
				}
				this.state = 2020;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2031;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2021;
				this.match(SystemVerilogParser.COM);
				this.state = 2022;
				this.ident();
				this.state = 2026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 2023;
					this.variable_dimension();
					}
					}
					this.state = 2028;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				this.state = 2033;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_variable_port_identifiers(): List_of_variable_port_identifiersContext {
		let _localctx: List_of_variable_port_identifiersContext = new List_of_variable_port_identifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, SystemVerilogParser.RULE_list_of_variable_port_identifiers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2034;
			this.ident();
			this.state = 2038;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 2035;
				this.variable_dimension();
				}
				}
				this.state = 2040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EQ) {
				{
				this.state = 2041;
				this.match(SystemVerilogParser.EQ);
				this.state = 2042;
				this.constant_expression(0);
				}
			}

			this.state = 2058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 2045;
				this.ident();
				this.state = 2049;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 2046;
					this.variable_dimension();
					}
					}
					this.state = 2051;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.EQ) {
					{
					this.state = 2052;
					this.match(SystemVerilogParser.EQ);
					this.state = 2053;
					this.constant_expression(0);
					}
				}

				}
				}
				this.state = 2060;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defparam_assignment(): Defparam_assignmentContext {
		let _localctx: Defparam_assignmentContext = new Defparam_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, SystemVerilogParser.RULE_defparam_assignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2061;
			this.hier_ident();
			this.state = 2062;
			this.match(SystemVerilogParser.EQ);
			this.state = 2063;
			this.constant_mintypmax_expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_decl_assignment(): Net_decl_assignmentContext {
		let _localctx: Net_decl_assignmentContext = new Net_decl_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, SystemVerilogParser.RULE_net_decl_assignment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2065;
			this.ident();
			this.state = 2069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 2066;
				this.unpacked_dimension();
				}
				}
				this.state = 2071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EQ) {
				{
				this.state = 2072;
				this.match(SystemVerilogParser.EQ);
				this.state = 2073;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public param_assignment(): Param_assignmentContext {
		let _localctx: Param_assignmentContext = new Param_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, SystemVerilogParser.RULE_param_assignment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2076;
			this.ident();
			this.state = 2080;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 2077;
				this.unpacked_dimension();
				}
				}
				this.state = 2082;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2085;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EQ) {
				{
				this.state = 2083;
				this.match(SystemVerilogParser.EQ);
				this.state = 2084;
				this.constant_param_expression();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_assignment(): Type_assignmentContext {
		let _localctx: Type_assignmentContext = new Type_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, SystemVerilogParser.RULE_type_assignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2087;
			this.ident();
			{
			this.state = 2088;
			this.match(SystemVerilogParser.EQ);
			this.state = 2089;
			this.data_type();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable_decl_assignment(): Variable_decl_assignmentContext {
		let _localctx: Variable_decl_assignmentContext = new Variable_decl_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, SystemVerilogParser.RULE_variable_decl_assignment);
		let _la: number;
		try {
			this.state = 2119;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2091;
				this.ident();
				this.state = 2095;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 2092;
					this.variable_dimension();
					}
					}
					this.state = 2097;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.EQ) {
					{
					this.state = 2098;
					this.match(SystemVerilogParser.EQ);
					this.state = 2099;
					this.expression(0);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2102;
				this.ident();
				this.state = 2103;
				this.unsized_dimension();
				this.state = 2107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.OP_BRK) {
					{
					{
					this.state = 2104;
					this.variable_dimension();
					}
					}
					this.state = 2109;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2112;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.EQ) {
					{
					this.state = 2110;
					this.match(SystemVerilogParser.EQ);
					this.state = 2111;
					this.dynamic_array_new();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2114;
				this.ident();
				this.state = 2117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.EQ) {
					{
					this.state = 2115;
					this.match(SystemVerilogParser.EQ);
					this.state = 2116;
					this.class_new();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_new(): Class_newContext {
		let _localctx: Class_newContext = new Class_newContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, SystemVerilogParser.RULE_class_new);
		let _la: number;
		try {
			this.state = 2133;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 233, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SCOPE_UNIT || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 2121;
					this.class_scope();
					}
				}

				this.state = 2124;
				this.match(SystemVerilogParser.NEW);
				this.state = 2129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 2125;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 2126;
					this.list_of_arguments();
					this.state = 2127;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2131;
				this.match(SystemVerilogParser.NEW);
				this.state = 2132;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dynamic_array_new(): Dynamic_array_newContext {
		let _localctx: Dynamic_array_newContext = new Dynamic_array_newContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, SystemVerilogParser.RULE_dynamic_array_new);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2135;
			this.match(SystemVerilogParser.NEW);
			this.state = 2136;
			this.match(SystemVerilogParser.OP_BRK);
			this.state = 2137;
			this.expression(0);
			this.state = 2138;
			this.match(SystemVerilogParser.CL_BRK);
			this.state = 2143;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_PRN) {
				{
				this.state = 2139;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2140;
				this.expression(0);
				this.state = 2141;
				this.match(SystemVerilogParser.CL_PRN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unpacked_dimension(): Unpacked_dimensionContext {
		let _localctx: Unpacked_dimensionContext = new Unpacked_dimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, SystemVerilogParser.RULE_unpacked_dimension);
		try {
			this.state = 2153;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2145;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 2146;
				this.constant_range();
				this.state = 2147;
				this.match(SystemVerilogParser.CL_BRK);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2149;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 2150;
				this.constant_expression(0);
				this.state = 2151;
				this.match(SystemVerilogParser.CL_BRK);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public packed_dimension(): Packed_dimensionContext {
		let _localctx: Packed_dimensionContext = new Packed_dimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, SystemVerilogParser.RULE_packed_dimension);
		try {
			this.state = 2160;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 236, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2155;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 2156;
				this.constant_range();
				this.state = 2157;
				this.match(SystemVerilogParser.CL_BRK);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2159;
				this.unsized_dimension();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assosiative_dimension(): Assosiative_dimensionContext {
		let _localctx: Assosiative_dimensionContext = new Assosiative_dimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, SystemVerilogParser.RULE_assosiative_dimension);
		try {
			this.state = 2169;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 237, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2162;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 2163;
				this.data_type();
				this.state = 2164;
				this.match(SystemVerilogParser.CL_BRK);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2166;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 2167;
				this.match(SystemVerilogParser.MULT);
				this.state = 2168;
				this.match(SystemVerilogParser.CL_BRK);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable_dimension(): Variable_dimensionContext {
		let _localctx: Variable_dimensionContext = new Variable_dimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, SystemVerilogParser.RULE_variable_dimension);
		try {
			this.state = 2175;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 238, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2171;
				this.unsized_dimension();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2172;
				this.unpacked_dimension();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2173;
				this.assosiative_dimension();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2174;
				this.queue_dimension();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queue_dimension(): Queue_dimensionContext {
		let _localctx: Queue_dimensionContext = new Queue_dimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, SystemVerilogParser.RULE_queue_dimension);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2177;
			this.match(SystemVerilogParser.OP_BRK);
			this.state = 2178;
			this.match(SystemVerilogParser.DOL);
			this.state = 2181;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 2179;
				this.match(SystemVerilogParser.COLON);
				this.state = 2180;
				this.constant_expression(0);
				}
			}

			this.state = 2183;
			this.match(SystemVerilogParser.CL_BRK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unsized_dimension(): Unsized_dimensionContext {
		let _localctx: Unsized_dimensionContext = new Unsized_dimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, SystemVerilogParser.RULE_unsized_dimension);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2185;
			this.match(SystemVerilogParser.OP_BRK);
			this.state = 2186;
			this.match(SystemVerilogParser.CL_BRK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_data_type_or_implicit(): Function_data_type_or_implicitContext {
		let _localctx: Function_data_type_or_implicitContext = new Function_data_type_or_implicitContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, SystemVerilogParser.RULE_function_data_type_or_implicit);
		try {
			this.state = 2190;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 240, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2188;
				this.data_type_or_void();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2189;
				this.implicit_data_type();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_declaration(): Function_declarationContext {
		let _localctx: Function_declarationContext = new Function_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, SystemVerilogParser.RULE_function_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2192;
			this.match(SystemVerilogParser.FUNCTION);
			this.state = 2194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 2193;
				this.lifetime();
				}
			}

			this.state = 2196;
			this.function_body_declaration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_body_declaration(): Function_body_declarationContext {
		let _localctx: Function_body_declarationContext = new Function_body_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, SystemVerilogParser.RULE_function_body_declaration);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2255;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 251, this._ctx) ) {
			case 1:
				_localctx = new Function_body_declaration_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2198;
				this.function_data_type_or_implicit();
				this.state = 2203;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 242, this._ctx) ) {
				case 1:
					{
					this.state = 2199;
					this.ident();
					this.state = 2200;
					this.match(SystemVerilogParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 2202;
					this.class_scope();
					}
					break;
				}
				this.state = 2205;
				this.ident();
				this.state = 2206;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 2210;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2207;
						this.tf_item_declaration();
						}
						}
					}
					this.state = 2212;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 243, this._ctx);
				}
				this.state = 2216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (SystemVerilogParser.ASSIGN - 23)) | (1 << (SystemVerilogParser.DEASSIGN - 23)) | (1 << (SystemVerilogParser.FORCE - 23)) | (1 << (SystemVerilogParser.RELEASE - 23)) | (1 << (SystemVerilogParser.FOREVER - 23)) | (1 << (SystemVerilogParser.REPEAT - 23)) | (1 << (SystemVerilogParser.IF - 23)) | (1 << (SystemVerilogParser.FOREACH - 23)) | (1 << (SystemVerilogParser.FOR - 23)) | (1 << (SystemVerilogParser.WHILE - 23)) | (1 << (SystemVerilogParser.DO - 23)) | (1 << (SystemVerilogParser.RETURN - 23)) | (1 << (SystemVerilogParser.BREAK - 23)) | (1 << (SystemVerilogParser.CONTINUE - 23)) | (1 << (SystemVerilogParser.WAIT - 23)) | (1 << (SystemVerilogParser.WAITORDER - 23)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 23)) | (1 << (SystemVerilogParser.PRIORITY - 23)) | (1 << (SystemVerilogParser.UNIQUE - 23)) | (1 << (SystemVerilogParser.UNIQUE0 - 23)) | (1 << (SystemVerilogParser.ASSERT - 23)) | (1 << (SystemVerilogParser.ASSUME - 23)) | (1 << (SystemVerilogParser.COVER - 23)))) !== 0) || ((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (SystemVerilogParser.DISABLE - 58)) | (1 << (SystemVerilogParser.BEGIN - 58)) | (1 << (SystemVerilogParser.THIS - 58)) | (1 << (SystemVerilogParser.SUPER - 58)) | (1 << (SystemVerilogParser.THISSUPER - 58)) | (1 << (SystemVerilogParser.CLASS_ROOT - 58)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 58)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 58)) | (1 << (SystemVerilogParser.SCOPE_STD - 58)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.VOID - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.SEMIC - 111)) | (1 << (SystemVerilogParser.AT - 111)))) !== 0) || ((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (SystemVerilogParser.SHP - 155)) | (1 << (SystemVerilogParser.SHPSHP - 155)) | (1 << (SystemVerilogParser.MINUSGT - 155)) | (1 << (SystemVerilogParser.MINUSGTGT - 155)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
					{
					{
					this.state = 2213;
					this.function_statement_or_null();
					}
					}
					this.state = 2218;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2219;
				this.match(SystemVerilogParser.ENDFUNCTION);
				this.state = 2222;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 2220;
					this.match(SystemVerilogParser.COLON);
					this.state = 2221;
					this.ident();
					}
				}

				}
				break;

			case 2:
				_localctx = new Function_body_declaration_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2224;
				this.function_data_type_or_implicit();
				this.state = 2229;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 246, this._ctx) ) {
				case 1:
					{
					this.state = 2225;
					this.ident();
					this.state = 2226;
					this.match(SystemVerilogParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 2228;
					this.class_scope();
					}
					break;
				}
				this.state = 2231;
				this.ident();
				this.state = 2232;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2234;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.SIGNING - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.OP_BRK || _la === SystemVerilogParser.SHP || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 2233;
					this.tf_port_list();
					}
				}

				this.state = 2236;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 2237;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 2241;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2238;
						this.block_item_declaration();
						}
						}
					}
					this.state = 2243;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);
				}
				this.state = 2247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (SystemVerilogParser.ASSIGN - 23)) | (1 << (SystemVerilogParser.DEASSIGN - 23)) | (1 << (SystemVerilogParser.FORCE - 23)) | (1 << (SystemVerilogParser.RELEASE - 23)) | (1 << (SystemVerilogParser.FOREVER - 23)) | (1 << (SystemVerilogParser.REPEAT - 23)) | (1 << (SystemVerilogParser.IF - 23)) | (1 << (SystemVerilogParser.FOREACH - 23)) | (1 << (SystemVerilogParser.FOR - 23)) | (1 << (SystemVerilogParser.WHILE - 23)) | (1 << (SystemVerilogParser.DO - 23)) | (1 << (SystemVerilogParser.RETURN - 23)) | (1 << (SystemVerilogParser.BREAK - 23)) | (1 << (SystemVerilogParser.CONTINUE - 23)) | (1 << (SystemVerilogParser.WAIT - 23)) | (1 << (SystemVerilogParser.WAITORDER - 23)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 23)) | (1 << (SystemVerilogParser.PRIORITY - 23)) | (1 << (SystemVerilogParser.UNIQUE - 23)) | (1 << (SystemVerilogParser.UNIQUE0 - 23)) | (1 << (SystemVerilogParser.ASSERT - 23)) | (1 << (SystemVerilogParser.ASSUME - 23)) | (1 << (SystemVerilogParser.COVER - 23)))) !== 0) || ((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (SystemVerilogParser.DISABLE - 58)) | (1 << (SystemVerilogParser.BEGIN - 58)) | (1 << (SystemVerilogParser.THIS - 58)) | (1 << (SystemVerilogParser.SUPER - 58)) | (1 << (SystemVerilogParser.THISSUPER - 58)) | (1 << (SystemVerilogParser.CLASS_ROOT - 58)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 58)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 58)) | (1 << (SystemVerilogParser.SCOPE_STD - 58)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.VOID - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.SEMIC - 111)) | (1 << (SystemVerilogParser.AT - 111)))) !== 0) || ((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (SystemVerilogParser.SHP - 155)) | (1 << (SystemVerilogParser.SHPSHP - 155)) | (1 << (SystemVerilogParser.MINUSGT - 155)) | (1 << (SystemVerilogParser.MINUSGTGT - 155)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
					{
					{
					this.state = 2244;
					this.function_statement_or_null();
					}
					}
					this.state = 2249;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2250;
				this.match(SystemVerilogParser.ENDFUNCTION);
				this.state = 2253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 2251;
					this.match(SystemVerilogParser.COLON);
					this.state = 2252;
					this.ident();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_prototype(): Function_prototypeContext {
		let _localctx: Function_prototypeContext = new Function_prototypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, SystemVerilogParser.RULE_function_prototype);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2257;
			this.match(SystemVerilogParser.FUNCTION);
			this.state = 2258;
			this.data_type_or_void();
			this.state = 2259;
			this.ident();
			this.state = 2265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_PRN) {
				{
				this.state = 2260;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.SIGNING - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.OP_BRK || _la === SystemVerilogParser.SHP || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 2261;
					this.tf_port_list();
					}
				}

				this.state = 2264;
				this.match(SystemVerilogParser.CL_PRN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public task_declaration(): Task_declarationContext {
		let _localctx: Task_declarationContext = new Task_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, SystemVerilogParser.RULE_task_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2267;
			this.match(SystemVerilogParser.TASK);
			this.state = 2269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.STATIC || _la === SystemVerilogParser.AUTOMATIC) {
				{
				this.state = 2268;
				this.lifetime();
				}
			}

			this.state = 2271;
			this.task_body_declaration();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public task_body_declaration(): Task_body_declarationContext {
		let _localctx: Task_body_declarationContext = new Task_body_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, SystemVerilogParser.RULE_task_body_declaration);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2328;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 264, this._ctx) ) {
			case 1:
				_localctx = new Task_body_declaration_0Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2277;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
				case 1:
					{
					this.state = 2273;
					this.ident();
					this.state = 2274;
					this.match(SystemVerilogParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 2276;
					this.class_scope();
					}
					break;
				}
				this.state = 2279;
				this.ident();
				this.state = 2280;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 2284;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2281;
						this.tf_item_declaration();
						}
						}
					}
					this.state = 2286;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);
				}
				this.state = 2290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (SystemVerilogParser.ASSIGN - 23)) | (1 << (SystemVerilogParser.DEASSIGN - 23)) | (1 << (SystemVerilogParser.FORCE - 23)) | (1 << (SystemVerilogParser.RELEASE - 23)) | (1 << (SystemVerilogParser.FOREVER - 23)) | (1 << (SystemVerilogParser.REPEAT - 23)) | (1 << (SystemVerilogParser.IF - 23)) | (1 << (SystemVerilogParser.FOREACH - 23)) | (1 << (SystemVerilogParser.FOR - 23)) | (1 << (SystemVerilogParser.WHILE - 23)) | (1 << (SystemVerilogParser.DO - 23)) | (1 << (SystemVerilogParser.RETURN - 23)) | (1 << (SystemVerilogParser.BREAK - 23)) | (1 << (SystemVerilogParser.CONTINUE - 23)) | (1 << (SystemVerilogParser.WAIT - 23)) | (1 << (SystemVerilogParser.WAITORDER - 23)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 23)) | (1 << (SystemVerilogParser.PRIORITY - 23)) | (1 << (SystemVerilogParser.UNIQUE - 23)) | (1 << (SystemVerilogParser.UNIQUE0 - 23)) | (1 << (SystemVerilogParser.ASSERT - 23)) | (1 << (SystemVerilogParser.ASSUME - 23)) | (1 << (SystemVerilogParser.COVER - 23)))) !== 0) || ((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (SystemVerilogParser.DISABLE - 58)) | (1 << (SystemVerilogParser.BEGIN - 58)) | (1 << (SystemVerilogParser.THIS - 58)) | (1 << (SystemVerilogParser.SUPER - 58)) | (1 << (SystemVerilogParser.THISSUPER - 58)) | (1 << (SystemVerilogParser.CLASS_ROOT - 58)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 58)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 58)) | (1 << (SystemVerilogParser.SCOPE_STD - 58)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.VOID - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.SEMIC - 111)) | (1 << (SystemVerilogParser.AT - 111)))) !== 0) || ((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (SystemVerilogParser.SHP - 155)) | (1 << (SystemVerilogParser.SHPSHP - 155)) | (1 << (SystemVerilogParser.MINUSGT - 155)) | (1 << (SystemVerilogParser.MINUSGTGT - 155)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
					{
					{
					this.state = 2287;
					this.statement_or_null();
					}
					}
					this.state = 2292;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2293;
				this.match(SystemVerilogParser.ENDTASK);
				this.state = 2296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 2294;
					this.match(SystemVerilogParser.COLON);
					this.state = 2295;
					this.ident();
					}
				}

				}
				break;

			case 2:
				_localctx = new Task_body_declaration_1Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2302;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
				case 1:
					{
					this.state = 2298;
					this.ident();
					this.state = 2299;
					this.match(SystemVerilogParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 2301;
					this.class_scope();
					}
					break;
				}
				this.state = 2304;
				this.ident();
				this.state = 2305;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.REF - 64)) | (1 << (SystemVerilogParser.INPUT - 64)) | (1 << (SystemVerilogParser.OUTPUT - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (SystemVerilogParser.INOUT - 96)) | (1 << (SystemVerilogParser.CONST - 96)) | (1 << (SystemVerilogParser.SIGNING - 96)) | (1 << (SystemVerilogParser.STRING - 96)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 96)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 96)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 96)) | (1 << (SystemVerilogParser.VAR - 96)) | (1 << (SystemVerilogParser.TYPE - 96)) | (1 << (SystemVerilogParser.ENUM - 96)) | (1 << (SystemVerilogParser.STRUCT - 96)) | (1 << (SystemVerilogParser.UNION - 96)))) !== 0) || _la === SystemVerilogParser.OP_BRK || _la === SystemVerilogParser.SHP || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 2306;
					this.tf_port_list();
					}
				}

				this.state = 2309;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 2310;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 2314;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2311;
						this.block_item_declaration();
						}
						}
					}
					this.state = 2316;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 261, this._ctx);
				}
				this.state = 2320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (SystemVerilogParser.ASSIGN - 23)) | (1 << (SystemVerilogParser.DEASSIGN - 23)) | (1 << (SystemVerilogParser.FORCE - 23)) | (1 << (SystemVerilogParser.RELEASE - 23)) | (1 << (SystemVerilogParser.FOREVER - 23)) | (1 << (SystemVerilogParser.REPEAT - 23)) | (1 << (SystemVerilogParser.IF - 23)) | (1 << (SystemVerilogParser.FOREACH - 23)) | (1 << (SystemVerilogParser.FOR - 23)) | (1 << (SystemVerilogParser.WHILE - 23)) | (1 << (SystemVerilogParser.DO - 23)) | (1 << (SystemVerilogParser.RETURN - 23)) | (1 << (SystemVerilogParser.BREAK - 23)) | (1 << (SystemVerilogParser.CONTINUE - 23)) | (1 << (SystemVerilogParser.WAIT - 23)) | (1 << (SystemVerilogParser.WAITORDER - 23)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 23)) | (1 << (SystemVerilogParser.PRIORITY - 23)) | (1 << (SystemVerilogParser.UNIQUE - 23)) | (1 << (SystemVerilogParser.UNIQUE0 - 23)) | (1 << (SystemVerilogParser.ASSERT - 23)) | (1 << (SystemVerilogParser.ASSUME - 23)) | (1 << (SystemVerilogParser.COVER - 23)))) !== 0) || ((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (SystemVerilogParser.DISABLE - 58)) | (1 << (SystemVerilogParser.BEGIN - 58)) | (1 << (SystemVerilogParser.THIS - 58)) | (1 << (SystemVerilogParser.SUPER - 58)) | (1 << (SystemVerilogParser.THISSUPER - 58)) | (1 << (SystemVerilogParser.CLASS_ROOT - 58)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 58)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 58)) | (1 << (SystemVerilogParser.SCOPE_STD - 58)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.VOID - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.SEMIC - 111)) | (1 << (SystemVerilogParser.AT - 111)))) !== 0) || ((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (SystemVerilogParser.SHP - 155)) | (1 << (SystemVerilogParser.SHPSHP - 155)) | (1 << (SystemVerilogParser.MINUSGT - 155)) | (1 << (SystemVerilogParser.MINUSGTGT - 155)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
					{
					{
					this.state = 2317;
					this.statement_or_null();
					}
					}
					this.state = 2322;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2323;
				this.match(SystemVerilogParser.ENDTASK);
				this.state = 2326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 2324;
					this.match(SystemVerilogParser.COLON);
					this.state = 2325;
					this.ident();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tf_item_declaration(): Tf_item_declarationContext {
		let _localctx: Tf_item_declarationContext = new Tf_item_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, SystemVerilogParser.RULE_tf_item_declaration);
		try {
			this.state = 2332;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 265, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2330;
				this.block_item_declaration();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2331;
				this.tf_port_declaration();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tf_port_list(): Tf_port_listContext {
		let _localctx: Tf_port_listContext = new Tf_port_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, SystemVerilogParser.RULE_tf_port_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2334;
			this.tf_port_item();
			this.state = 2339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2335;
				this.match(SystemVerilogParser.COM);
				this.state = 2336;
				this.tf_port_item();
				}
				}
				this.state = 2341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tf_port_item(): Tf_port_itemContext {
		let _localctx: Tf_port_itemContext = new Tf_port_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, SystemVerilogParser.RULE_tf_port_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & ((1 << (SystemVerilogParser.REF - 93)) | (1 << (SystemVerilogParser.INPUT - 93)) | (1 << (SystemVerilogParser.OUTPUT - 93)) | (1 << (SystemVerilogParser.INOUT - 93)) | (1 << (SystemVerilogParser.CONST - 93)))) !== 0)) {
				{
				this.state = 2342;
				this.tf_port_direction();
				}
			}

			this.state = 2346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.VAR) {
				{
				this.state = 2345;
				this.match(SystemVerilogParser.VAR);
				}
			}

			this.state = 2348;
			this.data_type_or_implicit();
			this.state = 2349;
			this.ident();
			this.state = 2353;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 2350;
				this.variable_dimension();
				}
				}
				this.state = 2355;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.EQ) {
				{
				this.state = 2356;
				this.match(SystemVerilogParser.EQ);
				this.state = 2357;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tf_port_direction(): Tf_port_directionContext {
		let _localctx: Tf_port_directionContext = new Tf_port_directionContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, SystemVerilogParser.RULE_tf_port_direction);
		try {
			this.state = 2363;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.REF:
			case SystemVerilogParser.INPUT:
			case SystemVerilogParser.OUTPUT:
			case SystemVerilogParser.INOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2360;
				this.port_direction();
				}
				break;
			case SystemVerilogParser.CONST:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2361;
				this.match(SystemVerilogParser.CONST);
				this.state = 2362;
				this.match(SystemVerilogParser.REF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tf_port_declaration(): Tf_port_declarationContext {
		let _localctx: Tf_port_declarationContext = new Tf_port_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, SystemVerilogParser.RULE_tf_port_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2365;
			this.tf_port_direction();
			this.state = 2367;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.VAR) {
				{
				this.state = 2366;
				this.match(SystemVerilogParser.VAR);
				}
			}

			this.state = 2369;
			this.data_type_or_implicit();
			this.state = 2370;
			this.list_of_tf_variable_identifiers();
			this.state = 2371;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public task_prototype(): Task_prototypeContext {
		let _localctx: Task_prototypeContext = new Task_prototypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, SystemVerilogParser.RULE_task_prototype);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2373;
			this.match(SystemVerilogParser.TASK);
			this.state = 2374;
			this.ident();
			this.state = 2379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.OP_PRN) {
				{
				this.state = 2375;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2376;
				this.tf_port_list();
				this.state = 2377;
				this.match(SystemVerilogParser.CL_PRN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_item_declaration(): Block_item_declarationContext {
		let _localctx: Block_item_declarationContext = new Block_item_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, SystemVerilogParser.RULE_block_item_declaration);
		try {
			this.state = 2388;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.STATIC:
			case SystemVerilogParser.AUTOMATIC:
			case SystemVerilogParser.TYPEDEF:
			case SystemVerilogParser.NETTYPE:
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.VAR:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2381;
				this.data_declaration();
				}
				break;
			case SystemVerilogParser.LOCALPARAM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2382;
				this.local_parameter_declaration();
				this.state = 2383;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.PARAMETER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2385;
				this.parameter_declaration();
				this.state = 2386;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_declaration(): Modport_declarationContext {
		let _localctx: Modport_declarationContext = new Modport_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, SystemVerilogParser.RULE_modport_declaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2390;
			this.match(SystemVerilogParser.MODPORT);
			this.state = 2391;
			this.modport_item();
			this.state = 2396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2392;
				this.match(SystemVerilogParser.COM);
				this.state = 2393;
				this.modport_item();
				}
				}
				this.state = 2398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2399;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_item(): Modport_itemContext {
		let _localctx: Modport_itemContext = new Modport_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, SystemVerilogParser.RULE_modport_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2401;
			this.ident();
			this.state = 2402;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 2403;
			this.modport_ports_declaration();
			this.state = 2408;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2404;
				this.match(SystemVerilogParser.COM);
				this.state = 2405;
				this.modport_ports_declaration();
				}
				}
				this.state = 2410;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2411;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_ports_declaration(): Modport_ports_declarationContext {
		let _localctx: Modport_ports_declarationContext = new Modport_ports_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, SystemVerilogParser.RULE_modport_ports_declaration);
		try {
			this.state = 2416;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.REF:
			case SystemVerilogParser.INPUT:
			case SystemVerilogParser.OUTPUT:
			case SystemVerilogParser.INOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2413;
				this.modport_simple_ports_declaration();
				}
				break;
			case SystemVerilogParser.IMPORT:
			case SystemVerilogParser.EXPORT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2414;
				this.modport_tf_ports_declaration();
				}
				break;
			case SystemVerilogParser.CLOCKING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2415;
				this.modport_clocking_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_clocking_declaration(): Modport_clocking_declarationContext {
		let _localctx: Modport_clocking_declarationContext = new Modport_clocking_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, SystemVerilogParser.RULE_modport_clocking_declaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2418;
			this.match(SystemVerilogParser.CLOCKING);
			this.state = 2419;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_simple_ports_declaration(): Modport_simple_ports_declarationContext {
		let _localctx: Modport_simple_ports_declarationContext = new Modport_simple_ports_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, SystemVerilogParser.RULE_modport_simple_ports_declaration);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2421;
			this.port_direction();
			this.state = 2422;
			this.modport_simple_port();
			this.state = 2427;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2423;
					this.match(SystemVerilogParser.COM);
					this.state = 2424;
					this.modport_simple_port();
					}
					}
				}
				this.state = 2429;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_simple_port(): Modport_simple_portContext {
		let _localctx: Modport_simple_portContext = new Modport_simple_portContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, SystemVerilogParser.RULE_modport_simple_port);
		let _la: number;
		try {
			this.state = 2439;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2430;
				this.ident();
				}
				break;
			case SystemVerilogParser.DOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2431;
				this.match(SystemVerilogParser.DOT);
				this.state = 2432;
				this.ident();
				this.state = 2433;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2435;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 2434;
					this.expression(0);
					}
				}

				this.state = 2437;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_tf_ports_declaration(): Modport_tf_ports_declarationContext {
		let _localctx: Modport_tf_ports_declarationContext = new Modport_tf_ports_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, SystemVerilogParser.RULE_modport_tf_ports_declaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2441;
			this.import_export();
			this.state = 2442;
			this.modport_tf_port();
			{
			this.state = 2443;
			this.match(SystemVerilogParser.COM);
			this.state = 2444;
			this.modport_tf_port();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public modport_tf_port(): Modport_tf_portContext {
		let _localctx: Modport_tf_portContext = new Modport_tf_portContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, SystemVerilogParser.RULE_modport_tf_port);
		try {
			this.state = 2448;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.TASK:
			case SystemVerilogParser.FUNCTION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2446;
				this.method_prototype();
				}
				break;
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2447;
				this.ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public import_export(): Import_exportContext {
		let _localctx: Import_exportContext = new Import_exportContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, SystemVerilogParser.RULE_import_export);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2450;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.IMPORT || _la === SystemVerilogParser.EXPORT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public concurrent_assertion_item(): Concurrent_assertion_itemContext {
		let _localctx: Concurrent_assertion_itemContext = new Concurrent_assertion_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, SystemVerilogParser.RULE_concurrent_assertion_item);
		let _la: number;
		try {
			this.state = 2459;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 283, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.IDENT) {
					{
					this.state = 2452;
					this.ident();
					this.state = 2453;
					this.match(SystemVerilogParser.COLON);
					}
				}

				this.state = 2457;
				this.concurrent_assertion_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2458;
				this.checker_instantiation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public concurrent_assertion_statement(): Concurrent_assertion_statementContext {
		let _localctx: Concurrent_assertion_statementContext = new Concurrent_assertion_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, SystemVerilogParser.RULE_concurrent_assertion_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			// tslint:disable-next-line:no-empty
			{
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression_or_dist(): Expression_or_distContext {
		let _localctx: Expression_or_distContext = new Expression_or_distContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, SystemVerilogParser.RULE_expression_or_dist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2463;
			this.expression(0);
			this.state = 2469;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.DIST) {
				{
				this.state = 2464;
				this.match(SystemVerilogParser.DIST);
				this.state = 2465;
				this.match(SystemVerilogParser.OP_BRC);
				this.state = 2466;
				this.dist_list();
				this.state = 2467;
				this.match(SystemVerilogParser.CL_BRC);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public module_instantiation(): Module_instantiationContext {
		let _localctx: Module_instantiationContext = new Module_instantiationContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, SystemVerilogParser.RULE_module_instantiation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2471;
			this.ident();
			this.state = 2473;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SHP) {
				{
				this.state = 2472;
				this.parameter_value_assignment();
				}
			}

			this.state = 2475;
			this.hierarchical_instance();
			this.state = 2480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2476;
				this.match(SystemVerilogParser.COM);
				this.state = 2477;
				this.hierarchical_instance();
				}
				}
				this.state = 2482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2483;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameter_value_assignment(): Parameter_value_assignmentContext {
		let _localctx: Parameter_value_assignmentContext = new Parameter_value_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, SystemVerilogParser.RULE_parameter_value_assignment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2485;
			this.match(SystemVerilogParser.SHP);
			this.state = 2486;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 2488;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.THIS - 64)) | (1 << (SystemVerilogParser.SUPER - 64)) | (1 << (SystemVerilogParser.THISSUPER - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.CLASS_ROOT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 64)) | (1 << (SystemVerilogParser.SCOPE_STD - 64)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SystemVerilogParser.CONST - 98)) | (1 << (SystemVerilogParser.SIGNING - 98)) | (1 << (SystemVerilogParser.STRING - 98)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 98)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 98)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 98)) | (1 << (SystemVerilogParser.RANDOMIZE - 98)) | (1 << (SystemVerilogParser.NULL - 98)) | (1 << (SystemVerilogParser.TYPE - 98)) | (1 << (SystemVerilogParser.ENUM - 98)) | (1 << (SystemVerilogParser.TAGGED - 98)) | (1 << (SystemVerilogParser.STRUCT - 98)) | (1 << (SystemVerilogParser.UNION - 98)) | (1 << (SystemVerilogParser.OP_PRN - 98)) | (1 << (SystemVerilogParser.OP_BRC - 98)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (SystemVerilogParser.DOT - 137)) | (1 << (SystemVerilogParser.XOR - 137)) | (1 << (SystemVerilogParser.OR - 137)) | (1 << (SystemVerilogParser.AND - 137)) | (1 << (SystemVerilogParser.INV - 137)) | (1 << (SystemVerilogParser.NOT - 137)) | (1 << (SystemVerilogParser.MINUS - 137)) | (1 << (SystemVerilogParser.PLUS - 137)) | (1 << (SystemVerilogParser.DOL - 137)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
				{
				this.state = 2487;
				this.list_of_parameter_assignments();
				}
			}

			this.state = 2490;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameter_assign_comma(): Parameter_assign_commaContext {
		let _localctx: Parameter_assign_commaContext = new Parameter_assign_commaContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, SystemVerilogParser.RULE_parameter_assign_comma);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2492;
			this.match(SystemVerilogParser.COM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_parameter_assignments(): List_of_parameter_assignmentsContext {
		let _localctx: List_of_parameter_assignmentsContext = new List_of_parameter_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, SystemVerilogParser.RULE_list_of_parameter_assignments);
		let _la: number;
		try {
			this.state = 2512;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.VIRTUAL:
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CHANDLE:
			case SystemVerilogParser.EVENT:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.SIGNING:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.NULL:
			case SystemVerilogParser.TYPE:
			case SystemVerilogParser.ENUM:
			case SystemVerilogParser.TAGGED:
			case SystemVerilogParser.STRUCT:
			case SystemVerilogParser.UNION:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.DOL:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2494;
				this.ordered_parameter_assignment();
				this.state = 2500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 2495;
					this.parameter_assign_comma();
					this.state = 2496;
					this.ordered_parameter_assignment();
					}
					}
					this.state = 2502;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case SystemVerilogParser.DOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2503;
				this.named_parameter_assignment();
				this.state = 2509;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 2504;
					this.parameter_assign_comma();
					this.state = 2505;
					this.named_parameter_assignment();
					}
					}
					this.state = 2511;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ordered_parameter_assignment(): Ordered_parameter_assignmentContext {
		let _localctx: Ordered_parameter_assignmentContext = new Ordered_parameter_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, SystemVerilogParser.RULE_ordered_parameter_assignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2514;
			this.param_expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public named_parameter_assignment(): Named_parameter_assignmentContext {
		let _localctx: Named_parameter_assignmentContext = new Named_parameter_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, SystemVerilogParser.RULE_named_parameter_assignment);
		let _la: number;
		try {
			this.state = 2525;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 292, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2516;
				this.match(SystemVerilogParser.DOT);
				this.state = 2517;
				this.ident();
				this.state = 2518;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.THIS - 64)) | (1 << (SystemVerilogParser.SUPER - 64)) | (1 << (SystemVerilogParser.THISSUPER - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.CLASS_ROOT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 64)) | (1 << (SystemVerilogParser.SCOPE_STD - 64)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (SystemVerilogParser.CONST - 98)) | (1 << (SystemVerilogParser.SIGNING - 98)) | (1 << (SystemVerilogParser.STRING - 98)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 98)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 98)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 98)) | (1 << (SystemVerilogParser.RANDOMIZE - 98)) | (1 << (SystemVerilogParser.NULL - 98)) | (1 << (SystemVerilogParser.TYPE - 98)) | (1 << (SystemVerilogParser.ENUM - 98)) | (1 << (SystemVerilogParser.TAGGED - 98)) | (1 << (SystemVerilogParser.STRUCT - 98)) | (1 << (SystemVerilogParser.UNION - 98)) | (1 << (SystemVerilogParser.OP_PRN - 98)) | (1 << (SystemVerilogParser.OP_BRC - 98)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (SystemVerilogParser.XOR - 142)) | (1 << (SystemVerilogParser.OR - 142)) | (1 << (SystemVerilogParser.AND - 142)) | (1 << (SystemVerilogParser.INV - 142)) | (1 << (SystemVerilogParser.NOT - 142)) | (1 << (SystemVerilogParser.MINUS - 142)) | (1 << (SystemVerilogParser.PLUS - 142)) | (1 << (SystemVerilogParser.DOL - 142)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 2519;
					this.param_expression();
					}
				}

				this.state = 2522;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2524;
				this.match(SystemVerilogParser.DOT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hierarchical_instance(): Hierarchical_instanceContext {
		let _localctx: Hierarchical_instanceContext = new Hierarchical_instanceContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, SystemVerilogParser.RULE_hierarchical_instance);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2527;
			this.name_of_instance();
			this.state = 2528;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 2530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.DOT - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)) | (1 << (SystemVerilogParser.FORALL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
				{
				this.state = 2529;
				this.list_of_port_connections();
				}
			}

			this.state = 2532;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public name_of_instance(): Name_of_instanceContext {
		let _localctx: Name_of_instanceContext = new Name_of_instanceContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, SystemVerilogParser.RULE_name_of_instance);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2534;
			this.ident();
			this.state = 2538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.OP_BRK) {
				{
				{
				this.state = 2535;
				this.unpacked_dimension();
				}
				}
				this.state = 2540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public port_conn_comma(): Port_conn_commaContext {
		let _localctx: Port_conn_commaContext = new Port_conn_commaContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, SystemVerilogParser.RULE_port_conn_comma);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2541;
			this.match(SystemVerilogParser.COM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_port_connections(): List_of_port_connectionsContext {
		let _localctx: List_of_port_connectionsContext = new List_of_port_connectionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, SystemVerilogParser.RULE_list_of_port_connections);
		let _la: number;
		try {
			this.state = 2561;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.SIGNING:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.NULL:
			case SystemVerilogParser.TAGGED:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.DOL:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2543;
				this.ordered_port_connection();
				this.state = 2549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 2544;
					this.port_conn_comma();
					this.state = 2545;
					this.ordered_port_connection();
					}
					}
					this.state = 2551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case SystemVerilogParser.DOT:
			case SystemVerilogParser.FORALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2552;
				this.named_port_connection();
				this.state = 2558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 2553;
					this.port_conn_comma();
					this.state = 2554;
					this.named_port_connection();
					}
					}
					this.state = 2560;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ordered_port_connection(): Ordered_port_connectionContext {
		let _localctx: Ordered_port_connectionContext = new Ordered_port_connectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, SystemVerilogParser.RULE_ordered_port_connection);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2563;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public named_port_connection(): Named_port_connectionContext {
		let _localctx: Named_port_connectionContext = new Named_port_connectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, SystemVerilogParser.RULE_named_port_connection);
		let _la: number;
		try {
			this.state = 2575;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.DOT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2565;
				this.match(SystemVerilogParser.DOT);
				this.state = 2566;
				this.ident();
				this.state = 2572;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.OP_PRN) {
					{
					this.state = 2567;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 2569;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
						{
						this.state = 2568;
						this.expression(0);
						}
					}

					this.state = 2571;
					this.match(SystemVerilogParser.CL_PRN);
					}
				}

				}
				break;
			case SystemVerilogParser.FORALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2574;
				this.match(SystemVerilogParser.FORALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checker_instantiation(): Checker_instantiationContext {
		let _localctx: Checker_instantiationContext = new Checker_instantiationContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, SystemVerilogParser.RULE_checker_instantiation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2577;
			this.ps_ident();
			this.state = 2578;
			this.name_of_instance();
			this.state = 2579;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 2580;
			this.list_of_checker_port_connections();
			this.state = 2581;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_checker_port_connections(): List_of_checker_port_connectionsContext {
		let _localctx: List_of_checker_port_connectionsContext = new List_of_checker_port_connectionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, SystemVerilogParser.RULE_list_of_checker_port_connections);
		try {
			this.enterOuterAlt(_localctx, 1);
			// tslint:disable-next-line:no-empty
			{
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generate_region(): Generate_regionContext {
		let _localctx: Generate_regionContext = new Generate_regionContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, SystemVerilogParser.RULE_generate_region);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2585;
			this.match(SystemVerilogParser.GENERATE);
			this.state = 2589;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 5)) & ~0x1F) === 0 && ((1 << (_la - 5)) & ((1 << (SystemVerilogParser.CLASS - 5)) | (1 << (SystemVerilogParser.TASK - 5)) | (1 << (SystemVerilogParser.FUNCTION - 5)) | (1 << (SystemVerilogParser.ALIAS - 5)) | (1 << (SystemVerilogParser.ASSIGN - 5)) | (1 << (SystemVerilogParser.DEFPARAM - 5)) | (1 << (SystemVerilogParser.INITIAL - 5)) | (1 << (SystemVerilogParser.ALWAYS_KEYWORD - 5)) | (1 << (SystemVerilogParser.IF - 5)) | (1 << (SystemVerilogParser.FOR - 5)))) !== 0) || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & ((1 << (SystemVerilogParser.CASE_KEYWORD - 43)) | (1 << (SystemVerilogParser.FINAL - 43)) | (1 << (SystemVerilogParser.VIRTUAL - 43)) | (1 << (SystemVerilogParser.STATIC - 43)) | (1 << (SystemVerilogParser.AUTOMATIC - 43)) | (1 << (SystemVerilogParser.TYPEDEF - 43)) | (1 << (SystemVerilogParser.NETTYPE - 43)) | (1 << (SystemVerilogParser.IMPORT - 43)))) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (SystemVerilogParser.CHANDLE - 78)) | (1 << (SystemVerilogParser.EVENT - 78)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 78)) | (1 << (SystemVerilogParser.DOL_FATAL - 78)) | (1 << (SystemVerilogParser.DOL_ERROR - 78)) | (1 << (SystemVerilogParser.DOL_WARNING - 78)) | (1 << (SystemVerilogParser.DOL_INFO - 78)) | (1 << (SystemVerilogParser.CONST - 78)) | (1 << (SystemVerilogParser.PARAMETER - 78)) | (1 << (SystemVerilogParser.LOCALPARAM - 78)) | (1 << (SystemVerilogParser.STRING - 78)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 78)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 78)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 78)) | (1 << (SystemVerilogParser.NET_TYPE - 78)) | (1 << (SystemVerilogParser.INTERCONNECT - 78)) | (1 << (SystemVerilogParser.VAR - 78)) | (1 << (SystemVerilogParser.GENVAR - 78)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (SystemVerilogParser.TYPE - 115)) | (1 << (SystemVerilogParser.ENUM - 115)) | (1 << (SystemVerilogParser.STRUCT - 115)) | (1 << (SystemVerilogParser.UNION - 115)) | (1 << (SystemVerilogParser.SEMIC - 115)))) !== 0) || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 2586;
				this.generate_item();
				}
				}
				this.state = 2591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2592;
			this.match(SystemVerilogParser.ENDGENERATE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loop_generate_construct(): Loop_generate_constructContext {
		let _localctx: Loop_generate_constructContext = new Loop_generate_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, SystemVerilogParser.RULE_loop_generate_construct);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2594;
			this.match(SystemVerilogParser.FOR);
			this.state = 2595;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 2596;
			this.genvar_initialization();
			this.state = 2597;
			this.match(SystemVerilogParser.SEMIC);
			this.state = 2598;
			this.genvar_expression();
			this.state = 2599;
			this.match(SystemVerilogParser.SEMIC);
			this.state = 2600;
			this.genvar_iteration();
			this.state = 2601;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 2602;
			this.generate_block();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public genvar_initialization(): Genvar_initializationContext {
		let _localctx: Genvar_initializationContext = new Genvar_initializationContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, SystemVerilogParser.RULE_genvar_initialization);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2605;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.GENVAR) {
				{
				this.state = 2604;
				this.match(SystemVerilogParser.GENVAR);
				}
			}

			this.state = 2607;
			this.ident();
			this.state = 2608;
			this.match(SystemVerilogParser.EQ);
			this.state = 2609;
			this.constant_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public genvar_iteration(): Genvar_iterationContext {
		let _localctx: Genvar_iterationContext = new Genvar_iterationContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, SystemVerilogParser.RULE_genvar_iteration);
		try {
			this.state = 2621;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2611;
				this.ident();
				this.state = 2612;
				this.assignment_operator();
				this.state = 2613;
				this.genvar_expression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2615;
				this.inc_or_dec_operator();
				this.state = 2616;
				this.ident();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2618;
				this.ident();
				this.state = 2619;
				this.inc_or_dec_operator();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conditional_generate_construct(): Conditional_generate_constructContext {
		let _localctx: Conditional_generate_constructContext = new Conditional_generate_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, SystemVerilogParser.RULE_conditional_generate_construct);
		try {
			this.state = 2625;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.IF:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2623;
				this.if_generate_construct();
				}
				break;
			case SystemVerilogParser.CASE_KEYWORD:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2624;
				this.case_generate_construct();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_generate_construct(): If_generate_constructContext {
		let _localctx: If_generate_constructContext = new If_generate_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, SystemVerilogParser.RULE_if_generate_construct);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2627;
			this.match(SystemVerilogParser.IF);
			this.state = 2628;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 2629;
			this.constant_expression(0);
			this.state = 2630;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 2631;
			this.generate_block();
			this.state = 2634;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 305, this._ctx) ) {
			case 1:
				{
				this.state = 2632;
				this.match(SystemVerilogParser.ELSE);
				this.state = 2633;
				this.generate_block();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_generate_construct(): Case_generate_constructContext {
		let _localctx: Case_generate_constructContext = new Case_generate_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, SystemVerilogParser.RULE_case_generate_construct);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2636;
			this.match(SystemVerilogParser.CASE_KEYWORD);
			this.state = 2637;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 2638;
			this.constant_expression(0);
			this.state = 2639;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 2640;
			this.case_generate_item();
			this.state = 2644;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (SystemVerilogParser.DEFAULT - 45)) | (1 << (SystemVerilogParser.THIS - 45)) | (1 << (SystemVerilogParser.SUPER - 45)))) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (SystemVerilogParser.THISSUPER - 77)) | (1 << (SystemVerilogParser.CLASS_ROOT - 77)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 77)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 77)) | (1 << (SystemVerilogParser.SCOPE_STD - 77)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
				{
				{
				this.state = 2641;
				this.case_generate_item();
				}
				}
				this.state = 2646;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2647;
			this.match(SystemVerilogParser.ENDCASE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_generate_item(): Case_generate_itemContext {
		let _localctx: Case_generate_itemContext = new Case_generate_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, SystemVerilogParser.RULE_case_generate_item);
		let _la: number;
		try {
			this.state = 2665;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2649;
				this.constant_expression(0);
				this.state = 2654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 2650;
					this.match(SystemVerilogParser.COM);
					this.state = 2651;
					this.constant_expression(0);
					}
					}
					this.state = 2656;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2657;
				this.match(SystemVerilogParser.COLON);
				this.state = 2658;
				this.generate_block();
				}
				break;
			case SystemVerilogParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2660;
				this.match(SystemVerilogParser.DEFAULT);
				this.state = 2662;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 2661;
					this.match(SystemVerilogParser.COLON);
					}
				}

				this.state = 2664;
				this.generate_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generate_block(): Generate_blockContext {
		let _localctx: Generate_blockContext = new Generate_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, SystemVerilogParser.RULE_generate_block);
		let _la: number;
		try {
			this.state = 2689;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 314, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2667;
				this.generate_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.IDENT) {
					{
					this.state = 2668;
					this.ident();
					this.state = 2669;
					this.match(SystemVerilogParser.COLON);
					}
				}

				this.state = 2673;
				this.match(SystemVerilogParser.BEGIN);
				this.state = 2676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 2674;
					this.match(SystemVerilogParser.COLON);
					this.state = 2675;
					this.ident();
					}
				}

				this.state = 2681;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 5)) & ~0x1F) === 0 && ((1 << (_la - 5)) & ((1 << (SystemVerilogParser.CLASS - 5)) | (1 << (SystemVerilogParser.TASK - 5)) | (1 << (SystemVerilogParser.FUNCTION - 5)) | (1 << (SystemVerilogParser.ALIAS - 5)) | (1 << (SystemVerilogParser.ASSIGN - 5)) | (1 << (SystemVerilogParser.DEFPARAM - 5)) | (1 << (SystemVerilogParser.INITIAL - 5)) | (1 << (SystemVerilogParser.ALWAYS_KEYWORD - 5)) | (1 << (SystemVerilogParser.IF - 5)) | (1 << (SystemVerilogParser.FOR - 5)))) !== 0) || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & ((1 << (SystemVerilogParser.CASE_KEYWORD - 43)) | (1 << (SystemVerilogParser.FINAL - 43)) | (1 << (SystemVerilogParser.VIRTUAL - 43)) | (1 << (SystemVerilogParser.STATIC - 43)) | (1 << (SystemVerilogParser.AUTOMATIC - 43)) | (1 << (SystemVerilogParser.TYPEDEF - 43)) | (1 << (SystemVerilogParser.NETTYPE - 43)) | (1 << (SystemVerilogParser.IMPORT - 43)))) !== 0) || ((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (SystemVerilogParser.CHANDLE - 78)) | (1 << (SystemVerilogParser.EVENT - 78)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 78)) | (1 << (SystemVerilogParser.DOL_FATAL - 78)) | (1 << (SystemVerilogParser.DOL_ERROR - 78)) | (1 << (SystemVerilogParser.DOL_WARNING - 78)) | (1 << (SystemVerilogParser.DOL_INFO - 78)) | (1 << (SystemVerilogParser.CONST - 78)) | (1 << (SystemVerilogParser.PARAMETER - 78)) | (1 << (SystemVerilogParser.LOCALPARAM - 78)) | (1 << (SystemVerilogParser.STRING - 78)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 78)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 78)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 78)) | (1 << (SystemVerilogParser.NET_TYPE - 78)) | (1 << (SystemVerilogParser.INTERCONNECT - 78)) | (1 << (SystemVerilogParser.VAR - 78)) | (1 << (SystemVerilogParser.GENVAR - 78)))) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & ((1 << (SystemVerilogParser.TYPE - 115)) | (1 << (SystemVerilogParser.ENUM - 115)) | (1 << (SystemVerilogParser.STRUCT - 115)) | (1 << (SystemVerilogParser.UNION - 115)) | (1 << (SystemVerilogParser.SEMIC - 115)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 2678;
					this.generate_item();
					}
					}
					this.state = 2683;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2684;
				this.match(SystemVerilogParser.END);
				this.state = 2687;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 2685;
					this.match(SystemVerilogParser.COLON);
					this.state = 2686;
					this.ident();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generate_item(): Generate_itemContext {
		let _localctx: Generate_itemContext = new Generate_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, SystemVerilogParser.RULE_generate_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2691;
			this.module_or_generate_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public continuous_assign(): Continuous_assignContext {
		let _localctx: Continuous_assignContext = new Continuous_assignContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, SystemVerilogParser.RULE_continuous_assign);
		let _la: number;
		try {
			this.state = 2704;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 316, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2693;
				this.match(SystemVerilogParser.ASSIGN);
				this.state = 2694;
				this.list_of_net_assignments();
				this.state = 2695;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2697;
				this.match(SystemVerilogParser.ASSIGN);
				this.state = 2699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SHP) {
					{
					this.state = 2698;
					this.delay_control();
					}
				}

				this.state = 2701;
				this.list_of_variable_assignments();
				this.state = 2702;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_net_assignments(): List_of_net_assignmentsContext {
		let _localctx: List_of_net_assignmentsContext = new List_of_net_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, SystemVerilogParser.RULE_list_of_net_assignments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2706;
			this.net_assignment();
			this.state = 2711;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2707;
				this.match(SystemVerilogParser.COM);
				this.state = 2708;
				this.net_assignment();
				}
				}
				this.state = 2713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_variable_assignments(): List_of_variable_assignmentsContext {
		let _localctx: List_of_variable_assignmentsContext = new List_of_variable_assignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, SystemVerilogParser.RULE_list_of_variable_assignments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2714;
			this.variable_assignment();
			this.state = 2719;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2715;
				this.match(SystemVerilogParser.COM);
				this.state = 2716;
				this.variable_assignment();
				}
				}
				this.state = 2721;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_alias(): Net_aliasContext {
		let _localctx: Net_aliasContext = new Net_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, SystemVerilogParser.RULE_net_alias);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2722;
			this.match(SystemVerilogParser.ALIAS);
			this.state = 2723;
			this.net_lvalue();
			this.state = 2724;
			this.match(SystemVerilogParser.EQ);
			this.state = 2725;
			this.net_lvalue();
			this.state = 2730;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.EQ) {
				{
				{
				this.state = 2726;
				this.match(SystemVerilogParser.EQ);
				this.state = 2727;
				this.net_lvalue();
				}
				}
				this.state = 2732;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2733;
			this.match(SystemVerilogParser.SEMIC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_assignment(): Net_assignmentContext {
		let _localctx: Net_assignmentContext = new Net_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, SystemVerilogParser.RULE_net_assignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2735;
			this.net_lvalue();
			this.state = 2736;
			this.match(SystemVerilogParser.EQ);
			this.state = 2737;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initial_construct(): Initial_constructContext {
		let _localctx: Initial_constructContext = new Initial_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, SystemVerilogParser.RULE_initial_construct);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2739;
			this.match(SystemVerilogParser.INITIAL);
			this.state = 2740;
			this.statement_or_null();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public always_construct(): Always_constructContext {
		let _localctx: Always_constructContext = new Always_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, SystemVerilogParser.RULE_always_construct);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2742;
			this.match(SystemVerilogParser.ALWAYS_KEYWORD);
			this.state = 2743;
			this.statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public final_construct(): Final_constructContext {
		let _localctx: Final_constructContext = new Final_constructContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, SystemVerilogParser.RULE_final_construct);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2745;
			this.match(SystemVerilogParser.FINAL);
			this.state = 2746;
			this.function_statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blocking_assignment(): Blocking_assignmentContext {
		let _localctx: Blocking_assignmentContext = new Blocking_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, SystemVerilogParser.RULE_blocking_assignment);
		try {
			this.state = 2770;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 321, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2748;
				this.variable_lvalue();
				this.state = 2749;
				this.match(SystemVerilogParser.EQ);
				this.state = 2750;
				this.delay_or_event_control();
				this.state = 2751;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2753;
				this.non_range_variable_lvalue();
				this.state = 2754;
				this.match(SystemVerilogParser.EQ);
				this.state = 2755;
				this.dynamic_array_new();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2762;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 320, this._ctx) ) {
				case 1:
					{
					this.state = 2757;
					this.implicit_class_handle();
					this.state = 2758;
					this.match(SystemVerilogParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 2760;
					this.class_scope();
					}
					break;

				case 3:
					{
					this.state = 2761;
					this.package_scope();
					}
					break;
				}
				this.state = 2764;
				this.hier_ident();
				this.state = 2765;
				this.select();
				this.state = 2766;
				this.match(SystemVerilogParser.EQ);
				this.state = 2767;
				this.class_new();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2769;
				this.operator_assignment();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_assignment(): Operator_assignmentContext {
		let _localctx: Operator_assignmentContext = new Operator_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, SystemVerilogParser.RULE_operator_assignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2772;
			this.variable_lvalue();
			this.state = 2773;
			this.assignment_operator();
			this.state = 2774;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment_operator(): Assignment_operatorContext {
		let _localctx: Assignment_operatorContext = new Assignment_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, SystemVerilogParser.RULE_assignment_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2776;
			_la = this._input.LA(1);
			if (!(((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & ((1 << (SystemVerilogParser.EQ - 140)) | (1 << (SystemVerilogParser.LTLTLTEQ - 140)) | (1 << (SystemVerilogParser.GTGTGTEQ - 140)))) !== 0) || ((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & ((1 << (SystemVerilogParser.LTLTEQ - 172)) | (1 << (SystemVerilogParser.GTGTEQ - 172)) | (1 << (SystemVerilogParser.PLUSEQ - 172)) | (1 << (SystemVerilogParser.MINUSEQ - 172)) | (1 << (SystemVerilogParser.MULTEQ - 172)) | (1 << (SystemVerilogParser.DIVEQ - 172)) | (1 << (SystemVerilogParser.MODEQ - 172)) | (1 << (SystemVerilogParser.ANDEQ - 172)) | (1 << (SystemVerilogParser.OREQ - 172)) | (1 << (SystemVerilogParser.XOREQ - 172)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonblocking_assignment(): Nonblocking_assignmentContext {
		let _localctx: Nonblocking_assignmentContext = new Nonblocking_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, SystemVerilogParser.RULE_nonblocking_assignment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2778;
			this.variable_lvalue();
			this.state = 2779;
			this.match(SystemVerilogParser.LTEQ);
			this.state = 2781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.REPEAT || _la === SystemVerilogParser.AT || _la === SystemVerilogParser.SHP) {
				{
				this.state = 2780;
				this.delay_or_event_control();
				}
			}

			this.state = 2783;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedural_continuous_assignment(): Procedural_continuous_assignmentContext {
		let _localctx: Procedural_continuous_assignmentContext = new Procedural_continuous_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, SystemVerilogParser.RULE_procedural_continuous_assignment);
		try {
			this.state = 2797;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 323, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2785;
				this.match(SystemVerilogParser.ASSIGN);
				this.state = 2786;
				this.variable_assignment();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2787;
				this.match(SystemVerilogParser.DEASSIGN);
				this.state = 2788;
				this.variable_lvalue();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2789;
				this.match(SystemVerilogParser.FORCE);
				this.state = 2790;
				this.variable_assignment();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2791;
				this.match(SystemVerilogParser.FORCE);
				this.state = 2792;
				this.net_assignment();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2793;
				this.match(SystemVerilogParser.RELEASE);
				this.state = 2794;
				this.variable_lvalue();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2795;
				this.match(SystemVerilogParser.RELEASE);
				this.state = 2796;
				this.net_lvalue();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable_assignment(): Variable_assignmentContext {
		let _localctx: Variable_assignmentContext = new Variable_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, SystemVerilogParser.RULE_variable_assignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2799;
			this.variable_lvalue();
			this.state = 2800;
			this.match(SystemVerilogParser.EQ);
			this.state = 2801;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public action_block(): Action_blockContext {
		let _localctx: Action_blockContext = new Action_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, SystemVerilogParser.RULE_action_block);
		let _la: number;
		try {
			this.state = 2809;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 325, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2803;
				this.statement_or_null();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (SystemVerilogParser.ASSIGN - 23)) | (1 << (SystemVerilogParser.DEASSIGN - 23)) | (1 << (SystemVerilogParser.FORCE - 23)) | (1 << (SystemVerilogParser.RELEASE - 23)) | (1 << (SystemVerilogParser.FOREVER - 23)) | (1 << (SystemVerilogParser.REPEAT - 23)) | (1 << (SystemVerilogParser.IF - 23)) | (1 << (SystemVerilogParser.FOREACH - 23)) | (1 << (SystemVerilogParser.FOR - 23)) | (1 << (SystemVerilogParser.WHILE - 23)) | (1 << (SystemVerilogParser.DO - 23)) | (1 << (SystemVerilogParser.RETURN - 23)) | (1 << (SystemVerilogParser.BREAK - 23)) | (1 << (SystemVerilogParser.CONTINUE - 23)) | (1 << (SystemVerilogParser.WAIT - 23)) | (1 << (SystemVerilogParser.WAITORDER - 23)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 23)) | (1 << (SystemVerilogParser.PRIORITY - 23)) | (1 << (SystemVerilogParser.UNIQUE - 23)) | (1 << (SystemVerilogParser.UNIQUE0 - 23)) | (1 << (SystemVerilogParser.ASSERT - 23)) | (1 << (SystemVerilogParser.ASSUME - 23)) | (1 << (SystemVerilogParser.COVER - 23)))) !== 0) || ((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (SystemVerilogParser.DISABLE - 58)) | (1 << (SystemVerilogParser.BEGIN - 58)) | (1 << (SystemVerilogParser.THIS - 58)) | (1 << (SystemVerilogParser.SUPER - 58)) | (1 << (SystemVerilogParser.THISSUPER - 58)) | (1 << (SystemVerilogParser.CLASS_ROOT - 58)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 58)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 58)) | (1 << (SystemVerilogParser.SCOPE_STD - 58)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.VOID - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.AT - 111)))) !== 0) || ((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (SystemVerilogParser.SHP - 155)) | (1 << (SystemVerilogParser.SHPSHP - 155)) | (1 << (SystemVerilogParser.MINUSGT - 155)) | (1 << (SystemVerilogParser.MINUSGTGT - 155)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
					{
					this.state = 2804;
					this.statement();
					}
				}

				this.state = 2807;
				this.match(SystemVerilogParser.ELSE);
				this.state = 2808;
				this.statement_or_null();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public seq_block(): Seq_blockContext {
		let _localctx: Seq_blockContext = new Seq_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, SystemVerilogParser.RULE_seq_block);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2811;
			this.match(SystemVerilogParser.BEGIN);
			this.state = 2814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 2812;
				this.match(SystemVerilogParser.COLON);
				this.state = 2813;
				this.ident();
				}
			}

			this.state = 2819;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2816;
					this.block_item_declaration();
					}
					}
				}
				this.state = 2821;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 327, this._ctx);
			}
			this.state = 2825;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 23)) & ~0x1F) === 0 && ((1 << (_la - 23)) & ((1 << (SystemVerilogParser.ASSIGN - 23)) | (1 << (SystemVerilogParser.DEASSIGN - 23)) | (1 << (SystemVerilogParser.FORCE - 23)) | (1 << (SystemVerilogParser.RELEASE - 23)) | (1 << (SystemVerilogParser.FOREVER - 23)) | (1 << (SystemVerilogParser.REPEAT - 23)) | (1 << (SystemVerilogParser.IF - 23)) | (1 << (SystemVerilogParser.FOREACH - 23)) | (1 << (SystemVerilogParser.FOR - 23)) | (1 << (SystemVerilogParser.WHILE - 23)) | (1 << (SystemVerilogParser.DO - 23)) | (1 << (SystemVerilogParser.RETURN - 23)) | (1 << (SystemVerilogParser.BREAK - 23)) | (1 << (SystemVerilogParser.CONTINUE - 23)) | (1 << (SystemVerilogParser.WAIT - 23)) | (1 << (SystemVerilogParser.WAITORDER - 23)) | (1 << (SystemVerilogParser.CASE_KEYWORD - 23)) | (1 << (SystemVerilogParser.PRIORITY - 23)) | (1 << (SystemVerilogParser.UNIQUE - 23)) | (1 << (SystemVerilogParser.UNIQUE0 - 23)) | (1 << (SystemVerilogParser.ASSERT - 23)) | (1 << (SystemVerilogParser.ASSUME - 23)) | (1 << (SystemVerilogParser.COVER - 23)))) !== 0) || ((((_la - 58)) & ~0x1F) === 0 && ((1 << (_la - 58)) & ((1 << (SystemVerilogParser.DISABLE - 58)) | (1 << (SystemVerilogParser.BEGIN - 58)) | (1 << (SystemVerilogParser.THIS - 58)) | (1 << (SystemVerilogParser.SUPER - 58)) | (1 << (SystemVerilogParser.THISSUPER - 58)) | (1 << (SystemVerilogParser.CLASS_ROOT - 58)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 58)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 58)) | (1 << (SystemVerilogParser.SCOPE_STD - 58)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.VOID - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.SEMIC - 111)) | (1 << (SystemVerilogParser.AT - 111)))) !== 0) || ((((_la - 155)) & ~0x1F) === 0 && ((1 << (_la - 155)) & ((1 << (SystemVerilogParser.SHP - 155)) | (1 << (SystemVerilogParser.SHPSHP - 155)) | (1 << (SystemVerilogParser.MINUSGT - 155)) | (1 << (SystemVerilogParser.MINUSGTGT - 155)))) !== 0) || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
				{
				{
				this.state = 2822;
				this.statement_or_null();
				}
				}
				this.state = 2827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2828;
			this.match(SystemVerilogParser.END);
			this.state = 2831;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.COLON) {
				{
				this.state = 2829;
				this.match(SystemVerilogParser.COLON);
				this.state = 2830;
				this.ident();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement_or_null(): Statement_or_nullContext {
		let _localctx: Statement_or_nullContext = new Statement_or_nullContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, SystemVerilogParser.RULE_statement_or_null);
		try {
			this.state = 2835;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.ASSIGN:
			case SystemVerilogParser.DEASSIGN:
			case SystemVerilogParser.FORCE:
			case SystemVerilogParser.RELEASE:
			case SystemVerilogParser.FOREVER:
			case SystemVerilogParser.REPEAT:
			case SystemVerilogParser.IF:
			case SystemVerilogParser.FOREACH:
			case SystemVerilogParser.FOR:
			case SystemVerilogParser.WHILE:
			case SystemVerilogParser.DO:
			case SystemVerilogParser.RETURN:
			case SystemVerilogParser.BREAK:
			case SystemVerilogParser.CONTINUE:
			case SystemVerilogParser.WAIT:
			case SystemVerilogParser.WAITORDER:
			case SystemVerilogParser.CASE_KEYWORD:
			case SystemVerilogParser.PRIORITY:
			case SystemVerilogParser.UNIQUE:
			case SystemVerilogParser.UNIQUE0:
			case SystemVerilogParser.ASSERT:
			case SystemVerilogParser.ASSUME:
			case SystemVerilogParser.COVER:
			case SystemVerilogParser.DISABLE:
			case SystemVerilogParser.BEGIN:
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.VOID:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.AT:
			case SystemVerilogParser.SHP:
			case SystemVerilogParser.SHPSHP:
			case SystemVerilogParser.MINUSGT:
			case SystemVerilogParser.MINUSGTGT:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2833;
				this.statement();
				}
				break;
			case SystemVerilogParser.SEMIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2834;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, SystemVerilogParser.RULE_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				{
				this.state = 2837;
				this.ident();
				this.state = 2838;
				this.match(SystemVerilogParser.COLON);
				}
				break;
			}
			this.state = 2842;
			this.statement_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement_item(): Statement_itemContext {
		let _localctx: Statement_itemContext = new Statement_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, SystemVerilogParser.RULE_statement_item);
		try {
			this.state = 2867;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 332, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2844;
				this.seq_block();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2845;
				this.loop_statement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2846;
				this.jump_statement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2847;
				this.case_statement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2848;
				this.blocking_assignment();
				this.state = 2849;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2851;
				this.nonblocking_assignment();
				this.state = 2852;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2854;
				this.procedural_continuous_assignment();
				this.state = 2855;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2857;
				this.conditional_statement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2858;
				this.inc_or_dec_expression();
				this.state = 2859;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2861;
				this.subroutine_call_statement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2862;
				this.disable_statement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2863;
				this.event_trigger();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2864;
				this.procedural_timing_control_statement();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2865;
				this.wait_statement();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2866;
				this.procedural_assertion_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_statement(): Function_statementContext {
		let _localctx: Function_statementContext = new Function_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, SystemVerilogParser.RULE_function_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2869;
			this.statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_statement_or_null(): Function_statement_or_nullContext {
		let _localctx: Function_statement_or_nullContext = new Function_statement_or_nullContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, SystemVerilogParser.RULE_function_statement_or_null);
		try {
			this.state = 2873;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.ASSIGN:
			case SystemVerilogParser.DEASSIGN:
			case SystemVerilogParser.FORCE:
			case SystemVerilogParser.RELEASE:
			case SystemVerilogParser.FOREVER:
			case SystemVerilogParser.REPEAT:
			case SystemVerilogParser.IF:
			case SystemVerilogParser.FOREACH:
			case SystemVerilogParser.FOR:
			case SystemVerilogParser.WHILE:
			case SystemVerilogParser.DO:
			case SystemVerilogParser.RETURN:
			case SystemVerilogParser.BREAK:
			case SystemVerilogParser.CONTINUE:
			case SystemVerilogParser.WAIT:
			case SystemVerilogParser.WAITORDER:
			case SystemVerilogParser.CASE_KEYWORD:
			case SystemVerilogParser.PRIORITY:
			case SystemVerilogParser.UNIQUE:
			case SystemVerilogParser.UNIQUE0:
			case SystemVerilogParser.ASSERT:
			case SystemVerilogParser.ASSUME:
			case SystemVerilogParser.COVER:
			case SystemVerilogParser.DISABLE:
			case SystemVerilogParser.BEGIN:
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.VOID:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.AT:
			case SystemVerilogParser.SHP:
			case SystemVerilogParser.SHPSHP:
			case SystemVerilogParser.MINUSGT:
			case SystemVerilogParser.MINUSGTGT:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2871;
				this.function_statement();
				}
				break;
			case SystemVerilogParser.SEMIC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2872;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable_identifier_list(): Variable_identifier_listContext {
		let _localctx: Variable_identifier_listContext = new Variable_identifier_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, SystemVerilogParser.RULE_variable_identifier_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2875;
			this.ident();
			this.state = 2880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 2876;
				this.match(SystemVerilogParser.COM);
				this.state = 2877;
				this.ident();
				}
				}
				this.state = 2882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedural_timing_control_statement(): Procedural_timing_control_statementContext {
		let _localctx: Procedural_timing_control_statementContext = new Procedural_timing_control_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, SystemVerilogParser.RULE_procedural_timing_control_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2883;
			this.procedural_timing_control();
			this.state = 2884;
			this.statement_or_null();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delay_or_event_control(): Delay_or_event_controlContext {
		let _localctx: Delay_or_event_controlContext = new Delay_or_event_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, SystemVerilogParser.RULE_delay_or_event_control);
		try {
			this.state = 2894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.SHP:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2886;
				this.delay_control();
				}
				break;
			case SystemVerilogParser.AT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2887;
				this.event_control();
				}
				break;
			case SystemVerilogParser.REPEAT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2888;
				this.match(SystemVerilogParser.REPEAT);
				this.state = 2889;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2890;
				this.expression(0);
				this.state = 2891;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 2892;
				this.event_control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delay_control(): Delay_controlContext {
		let _localctx: Delay_controlContext = new Delay_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, SystemVerilogParser.RULE_delay_control);
		try {
			this.state = 2903;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2896;
				this.match(SystemVerilogParser.SHP);
				this.state = 2897;
				this.delay_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2898;
				this.match(SystemVerilogParser.SHP);
				this.state = 2899;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2900;
				this.mintypmax_expression();
				this.state = 2901;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_control(): Event_controlContext {
		let _localctx: Event_controlContext = new Event_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, SystemVerilogParser.RULE_event_control);
		try {
			this.state = 2920;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 337, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2905;
				this.match(SystemVerilogParser.AT);
				this.state = 2906;
				this.hier_ident();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2907;
				this.match(SystemVerilogParser.AT);
				this.state = 2908;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2909;
				this.event_expression(0);
				this.state = 2910;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2912;
				this.match(SystemVerilogParser.AT);
				this.state = 2913;
				this.match(SystemVerilogParser.MULT);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2914;
				this.match(SystemVerilogParser.AT);
				this.state = 2915;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2916;
				this.match(SystemVerilogParser.MULT);
				this.state = 2917;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2918;
				this.match(SystemVerilogParser.AT);
				this.state = 2919;
				this.ps_or_hier_ident();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public event_expression(): Event_expressionContext;
	public event_expression(_p: number): Event_expressionContext;
	// @RuleVersion(0)
	public event_expression(_p?: number): Event_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Event_expressionContext = new Event_expressionContext(this._ctx, _parentState);
		let _prevctx: Event_expressionContext = _localctx;
		let _startState: number = 398;
		this.enterRecursionRule(_localctx, 398, SystemVerilogParser.RULE_event_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2935;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 340, this._ctx) ) {
			case 1:
				{
				this.state = 2924;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & ((1 << (SystemVerilogParser.POSEDGE - 90)) | (1 << (SystemVerilogParser.NEGEDGE - 90)) | (1 << (SystemVerilogParser.EDGE - 90)))) !== 0)) {
					{
					this.state = 2923;
					this.edge_ident();
					}
				}

				this.state = 2926;
				this.expression(0);
				this.state = 2929;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 339, this._ctx) ) {
				case 1:
					{
					this.state = 2927;
					this.match(SystemVerilogParser.IFF);
					this.state = 2928;
					this.expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 2931;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2932;
				this.event_expression(0);
				this.state = 2933;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2945;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 2943;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 341, this._ctx) ) {
					case 1:
						{
						_localctx = new Event_expressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, SystemVerilogParser.RULE_event_expression);
						this.state = 2937;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 2938;
						this.match(SystemVerilogParser.ARR_OR);
						this.state = 2939;
						this.event_expression(4);
						}
						break;

					case 2:
						{
						_localctx = new Event_expressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, SystemVerilogParser.RULE_event_expression);
						this.state = 2940;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 2941;
						this.match(SystemVerilogParser.COM);
						this.state = 2942;
						this.event_expression(3);
						}
						break;
					}
					}
				}
				this.state = 2947;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedural_timing_control(): Procedural_timing_controlContext {
		let _localctx: Procedural_timing_controlContext = new Procedural_timing_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, SystemVerilogParser.RULE_procedural_timing_control);
		try {
			this.state = 2951;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.SHP:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2948;
				this.delay_control();
				}
				break;
			case SystemVerilogParser.AT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2949;
				this.event_control();
				}
				break;
			case SystemVerilogParser.SHPSHP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2950;
				this.cycle_delay();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jump_statement(): Jump_statementContext {
		let _localctx: Jump_statementContext = new Jump_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, SystemVerilogParser.RULE_jump_statement);
		let _la: number;
		try {
			this.state = 2962;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.RETURN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2953;
				this.match(SystemVerilogParser.RETURN);
				this.state = 2955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 2954;
					this.expression(0);
					}
				}

				this.state = 2957;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.BREAK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2958;
				this.match(SystemVerilogParser.BREAK);
				this.state = 2959;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.CONTINUE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2960;
				this.match(SystemVerilogParser.CONTINUE);
				this.state = 2961;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public wait_statement(): Wait_statementContext {
		let _localctx: Wait_statementContext = new Wait_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, SystemVerilogParser.RULE_wait_statement);
		let _la: number;
		try {
			this.state = 2986;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 347, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2964;
				this.match(SystemVerilogParser.WAIT);
				this.state = 2965;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2966;
				this.expression(0);
				this.state = 2967;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 2968;
				this.statement_or_null();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2970;
				this.match(SystemVerilogParser.WAIT);
				this.state = 2971;
				this.match(SystemVerilogParser.FORK);
				this.state = 2972;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2973;
				this.match(SystemVerilogParser.WAITORDER);
				this.state = 2974;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 2975;
				this.hier_ident();
				this.state = 2980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 2976;
					this.match(SystemVerilogParser.COM);
					this.state = 2977;
					this.hier_ident();
					}
					}
					this.state = 2982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2983;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 2984;
				this.action_block();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_trigger(): Event_triggerContext {
		let _localctx: Event_triggerContext = new Event_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, SystemVerilogParser.RULE_event_trigger);
		let _la: number;
		try {
			this.state = 2999;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.MINUSGT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2988;
				this.match(SystemVerilogParser.MINUSGT);
				this.state = 2989;
				this.hier_ident();
				this.state = 2990;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.MINUSGTGT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2992;
				this.match(SystemVerilogParser.MINUSGTGT);
				this.state = 2994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.REPEAT || _la === SystemVerilogParser.AT || _la === SystemVerilogParser.SHP) {
					{
					this.state = 2993;
					this.delay_or_event_control();
					}
				}

				this.state = 2996;
				this.hier_ident();
				this.state = 2997;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public disable_statement(): Disable_statementContext {
		let _localctx: Disable_statementContext = new Disable_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, SystemVerilogParser.RULE_disable_statement);
		try {
			this.state = 3008;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 350, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3001;
				this.match(SystemVerilogParser.DISABLE);
				this.state = 3002;
				this.hier_ident();
				this.state = 3003;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3005;
				this.match(SystemVerilogParser.DISABLE);
				this.state = 3006;
				this.match(SystemVerilogParser.FORK);
				this.state = 3007;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public conditional_statement(): Conditional_statementContext {
		let _localctx: Conditional_statementContext = new Conditional_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, SystemVerilogParser.RULE_conditional_statement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3011;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & ((1 << (SystemVerilogParser.PRIORITY - 46)) | (1 << (SystemVerilogParser.UNIQUE - 46)) | (1 << (SystemVerilogParser.UNIQUE0 - 46)))) !== 0)) {
				{
				this.state = 3010;
				this.unique_priority();
				}
			}

			this.state = 3013;
			this.match(SystemVerilogParser.IF);
			this.state = 3014;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 3015;
			this.cond_predicate();
			this.state = 3016;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 3017;
			this.statement_or_null();
			this.state = 3027;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3018;
					this.match(SystemVerilogParser.ELSE);
					this.state = 3019;
					this.match(SystemVerilogParser.IF);
					this.state = 3020;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 3021;
					this.cond_predicate();
					this.state = 3022;
					this.match(SystemVerilogParser.CL_PRN);
					this.state = 3023;
					this.statement_or_null();
					}
					}
				}
				this.state = 3029;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 352, this._ctx);
			}
			this.state = 3032;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 353, this._ctx) ) {
			case 1:
				{
				this.state = 3030;
				this.match(SystemVerilogParser.ELSE);
				this.state = 3031;
				this.statement_or_null();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unique_priority(): Unique_priorityContext {
		let _localctx: Unique_priorityContext = new Unique_priorityContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, SystemVerilogParser.RULE_unique_priority);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3034;
			_la = this._input.LA(1);
			if (!(((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & ((1 << (SystemVerilogParser.PRIORITY - 46)) | (1 << (SystemVerilogParser.UNIQUE - 46)) | (1 << (SystemVerilogParser.UNIQUE0 - 46)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_predicate(): Cond_predicateContext {
		let _localctx: Cond_predicateContext = new Cond_predicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, SystemVerilogParser.RULE_cond_predicate);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3036;
			this.expression_or_cond_pattern();
			this.state = 3041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.ANDANDAND) {
				{
				{
				this.state = 3037;
				this.match(SystemVerilogParser.ANDANDAND);
				this.state = 3038;
				this.expression_or_cond_pattern();
				}
				}
				this.state = 3043;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression_or_cond_pattern(): Expression_or_cond_patternContext {
		let _localctx: Expression_or_cond_patternContext = new Expression_or_cond_patternContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, SystemVerilogParser.RULE_expression_or_cond_pattern);
		try {
			this.state = 3046;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 355, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3044;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3045;
				this.cond_pattern();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cond_pattern(): Cond_patternContext {
		let _localctx: Cond_patternContext = new Cond_patternContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, SystemVerilogParser.RULE_cond_pattern);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3048;
			this.expression(0);
			this.state = 3049;
			this.match(SystemVerilogParser.MATCHES);
			this.state = 3050;
			this.pattern();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_statement(): Case_statementContext {
		let _localctx: Case_statementContext = new Case_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, SystemVerilogParser.RULE_case_statement);
		let _la: number;
		try {
			this.state = 3085;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 360, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & ((1 << (SystemVerilogParser.PRIORITY - 46)) | (1 << (SystemVerilogParser.UNIQUE - 46)) | (1 << (SystemVerilogParser.UNIQUE0 - 46)))) !== 0)) {
					{
					this.state = 3052;
					this.unique_priority();
					}
				}

				this.state = 3055;
				this.match(SystemVerilogParser.CASE_KEYWORD);
				this.state = 3056;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3057;
				this.case_expression();
				this.state = 3058;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3059;
				this.case_item();
				this.state = 3063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (SystemVerilogParser.DEFAULT - 45)) | (1 << (SystemVerilogParser.THIS - 45)) | (1 << (SystemVerilogParser.SUPER - 45)))) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (SystemVerilogParser.THISSUPER - 77)) | (1 << (SystemVerilogParser.CLASS_ROOT - 77)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 77)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 77)) | (1 << (SystemVerilogParser.SCOPE_STD - 77)) | (1 << (SystemVerilogParser.CONST - 77)) | (1 << (SystemVerilogParser.SIGNING - 77)) | (1 << (SystemVerilogParser.STRING - 77)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 77)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 77)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 77)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 3060;
					this.case_item();
					}
					}
					this.state = 3065;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3066;
				this.match(SystemVerilogParser.ENDCASE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & ((1 << (SystemVerilogParser.PRIORITY - 46)) | (1 << (SystemVerilogParser.UNIQUE - 46)) | (1 << (SystemVerilogParser.UNIQUE0 - 46)))) !== 0)) {
					{
					this.state = 3068;
					this.unique_priority();
					}
				}

				this.state = 3071;
				this.match(SystemVerilogParser.CASE_KEYWORD);
				this.state = 3072;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3073;
				this.case_expression();
				this.state = 3074;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3075;
				this.match(SystemVerilogParser.INSIDE);
				this.state = 3076;
				this.case_inside_item();
				this.state = 3080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (SystemVerilogParser.DEFAULT - 45)) | (1 << (SystemVerilogParser.THIS - 45)) | (1 << (SystemVerilogParser.SUPER - 45)))) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (SystemVerilogParser.THISSUPER - 77)) | (1 << (SystemVerilogParser.CLASS_ROOT - 77)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 77)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 77)) | (1 << (SystemVerilogParser.SCOPE_STD - 77)) | (1 << (SystemVerilogParser.CONST - 77)) | (1 << (SystemVerilogParser.SIGNING - 77)) | (1 << (SystemVerilogParser.STRING - 77)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 77)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 77)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 77)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.OP_BRK - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					{
					this.state = 3077;
					this.case_inside_item();
					}
					}
					this.state = 3082;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3083;
				this.match(SystemVerilogParser.ENDCASE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_expression(): Case_expressionContext {
		let _localctx: Case_expressionContext = new Case_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, SystemVerilogParser.RULE_case_expression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3087;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_item(): Case_itemContext {
		let _localctx: Case_itemContext = new Case_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, SystemVerilogParser.RULE_case_item);
		let _la: number;
		try {
			this.state = 3105;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.SIGNING:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.NULL:
			case SystemVerilogParser.TAGGED:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.DOL:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3089;
				this.case_item_expression();
				this.state = 3094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 3090;
					this.match(SystemVerilogParser.COM);
					this.state = 3091;
					this.case_item_expression();
					}
					}
					this.state = 3096;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3097;
				this.match(SystemVerilogParser.COLON);
				this.state = 3098;
				this.statement_or_null();
				}
				break;
			case SystemVerilogParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3100;
				this.match(SystemVerilogParser.DEFAULT);
				this.state = 3102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 3101;
					this.match(SystemVerilogParser.COLON);
					}
				}

				this.state = 3104;
				this.statement_or_null();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_inside_item(): Case_inside_itemContext {
		let _localctx: Case_inside_itemContext = new Case_inside_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, SystemVerilogParser.RULE_case_inside_item);
		let _la: number;
		try {
			this.state = 3116;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.SIGNING:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.NULL:
			case SystemVerilogParser.TAGGED:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.OP_BRK:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.DOL:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3107;
				this.open_range_list();
				this.state = 3108;
				this.match(SystemVerilogParser.COLON);
				this.state = 3109;
				this.statement_or_null();
				}
				break;
			case SystemVerilogParser.DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3111;
				this.match(SystemVerilogParser.DEFAULT);
				this.state = 3113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COLON) {
					{
					this.state = 3112;
					this.match(SystemVerilogParser.COLON);
					}
				}

				this.state = 3115;
				this.statement_or_null();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_item_expression(): Case_item_expressionContext {
		let _localctx: Case_item_expressionContext = new Case_item_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, SystemVerilogParser.RULE_case_item_expression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3118;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_range_list(): Open_range_listContext {
		let _localctx: Open_range_listContext = new Open_range_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, SystemVerilogParser.RULE_open_range_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3120;
			this.open_value_range();
			this.state = 3125;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 3121;
				this.match(SystemVerilogParser.COM);
				this.state = 3122;
				this.open_value_range();
				}
				}
				this.state = 3127;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_value_range(): Open_value_rangeContext {
		let _localctx: Open_value_rangeContext = new Open_value_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, SystemVerilogParser.RULE_open_value_range);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3128;
			this.value_range();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pattern(): PatternContext {
		let _localctx: PatternContext = new PatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, SystemVerilogParser.RULE_pattern);
		let _la: number;
		try {
			this.state = 3162;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 369, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3130;
				this.match(SystemVerilogParser.DOT);
				this.state = 3131;
				this.ident();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3132;
				this.match(SystemVerilogParser.FORALL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3133;
				this.constant_expression(0);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3134;
				this.match(SystemVerilogParser.TAGGED);
				this.state = 3135;
				this.ident();
				this.state = 3137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.OP_PATTERN - 111)) | (1 << (SystemVerilogParser.DOT - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.FORALL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 3136;
					this.pattern();
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3139;
				this.match(SystemVerilogParser.OP_PATTERN);
				this.state = 3140;
				this.pattern();
				{
				this.state = 3141;
				this.match(SystemVerilogParser.COM);
				this.state = 3142;
				this.pattern();
				}
				this.state = 3144;
				this.match(SystemVerilogParser.CL_BRC);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3146;
				this.match(SystemVerilogParser.OP_PATTERN);
				this.state = 3147;
				this.ident();
				this.state = 3148;
				this.match(SystemVerilogParser.COLON);
				this.state = 3149;
				this.pattern();
				this.state = 3157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 3150;
					this.match(SystemVerilogParser.COM);
					this.state = 3151;
					this.ident();
					this.state = 3152;
					this.match(SystemVerilogParser.COLON);
					this.state = 3153;
					this.pattern();
					}
					}
					this.state = 3159;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3160;
				this.match(SystemVerilogParser.CL_BRC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loop_statement(): Loop_statementContext {
		let _localctx: Loop_statementContext = new Loop_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, SystemVerilogParser.RULE_loop_statement);
		let _la: number;
		try {
			this.state = 3210;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.FOREVER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3164;
				this.match(SystemVerilogParser.FOREVER);
				this.state = 3165;
				this.statement_or_null();
				}
				break;
			case SystemVerilogParser.REPEAT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3166;
				this.match(SystemVerilogParser.REPEAT);
				this.state = 3167;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3168;
				this.expression(0);
				this.state = 3169;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3170;
				this.statement_or_null();
				}
				break;
			case SystemVerilogParser.WHILE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3172;
				this.match(SystemVerilogParser.WHILE);
				this.state = 3173;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3174;
				this.expression(0);
				this.state = 3175;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3176;
				this.statement_or_null();
				}
				break;
			case SystemVerilogParser.FOR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3178;
				this.match(SystemVerilogParser.FOR);
				this.state = 3179;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3181;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (SystemVerilogParser.VIRTUAL - 64)) | (1 << (SystemVerilogParser.THIS - 64)) | (1 << (SystemVerilogParser.SUPER - 64)) | (1 << (SystemVerilogParser.THISSUPER - 64)) | (1 << (SystemVerilogParser.CHANDLE - 64)) | (1 << (SystemVerilogParser.EVENT - 64)) | (1 << (SystemVerilogParser.CLASS_ROOT - 64)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 64)))) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & ((1 << (SystemVerilogParser.STRING - 102)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 102)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 102)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 102)) | (1 << (SystemVerilogParser.VAR - 102)) | (1 << (SystemVerilogParser.TYPE - 102)) | (1 << (SystemVerilogParser.ENUM - 102)) | (1 << (SystemVerilogParser.STRUCT - 102)) | (1 << (SystemVerilogParser.UNION - 102)) | (1 << (SystemVerilogParser.OP_BRC - 102)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 3180;
					this.for_initialization();
					}
				}

				this.state = 3183;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 3185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 3184;
					this.expression(0);
					}
				}

				this.state = 3187;
				this.match(SystemVerilogParser.SEMIC);
				this.state = 3189;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)))) !== 0) || _la === SystemVerilogParser.RANDOMIZE || _la === SystemVerilogParser.OP_BRC || ((((_la - 202)) & ~0x1F) === 0 && ((1 << (_la - 202)) & ((1 << (SystemVerilogParser.PLUSPLUS - 202)) | (1 << (SystemVerilogParser.MINUSMINUS - 202)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 202)) | (1 << (SystemVerilogParser.IDENT - 202)))) !== 0)) {
					{
					this.state = 3188;
					this.for_step();
					}
				}

				this.state = 3191;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3192;
				this.statement_or_null();
				}
				break;
			case SystemVerilogParser.DO:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3193;
				this.match(SystemVerilogParser.DO);
				this.state = 3194;
				this.statement_or_null();
				this.state = 3195;
				this.match(SystemVerilogParser.WHILE);
				this.state = 3196;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3197;
				this.expression(0);
				this.state = 3198;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3199;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.FOREACH:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3201;
				this.match(SystemVerilogParser.FOREACH);
				this.state = 3202;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3203;
				this.ps_or_hier_ident();
				this.state = 3204;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 3205;
				this.loop_variables();
				this.state = 3206;
				this.match(SystemVerilogParser.CL_BRK);
				this.state = 3207;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3208;
				this.statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_initialization(): For_initializationContext {
		let _localctx: For_initializationContext = new For_initializationContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, SystemVerilogParser.RULE_for_initialization);
		let _la: number;
		try {
			this.state = 3221;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 375, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3212;
				this.list_of_variable_assignments();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3213;
				this.for_variable_declaration();
				this.state = 3218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 3214;
					this.match(SystemVerilogParser.COM);
					this.state = 3215;
					this.for_variable_declaration();
					}
					}
					this.state = 3220;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_variable_declaration(): For_variable_declarationContext {
		let _localctx: For_variable_declarationContext = new For_variable_declarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, SystemVerilogParser.RULE_for_variable_declaration);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3224;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.VAR) {
				{
				this.state = 3223;
				this.match(SystemVerilogParser.VAR);
				}
			}

			this.state = 3226;
			this.data_type();
			this.state = 3227;
			this.ident();
			this.state = 3228;
			this.match(SystemVerilogParser.EQ);
			this.state = 3229;
			this.expression(0);
			this.state = 3237;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3230;
					this.match(SystemVerilogParser.COM);
					this.state = 3231;
					this.ident();
					this.state = 3232;
					this.match(SystemVerilogParser.EQ);
					this.state = 3233;
					this.expression(0);
					}
					}
				}
				this.state = 3239;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 377, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_step(): For_stepContext {
		let _localctx: For_stepContext = new For_stepContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, SystemVerilogParser.RULE_for_step);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3240;
			this.for_step_assignment();
			this.state = 3245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 3241;
				this.match(SystemVerilogParser.COM);
				this.state = 3242;
				this.for_step_assignment();
				}
				}
				this.state = 3247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_step_assignment(): For_step_assignmentContext {
		let _localctx: For_step_assignmentContext = new For_step_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, SystemVerilogParser.RULE_for_step_assignment);
		try {
			this.state = 3251;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 379, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3248;
				this.operator_assignment();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3249;
				this.inc_or_dec_expression();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3250;
				this.function_subroutine_call();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loop_variables(): Loop_variablesContext {
		let _localctx: Loop_variablesContext = new Loop_variablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, SystemVerilogParser.RULE_loop_variables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3254;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.IDENT) {
				{
				this.state = 3253;
				this.ident();
				}
			}

			this.state = 3260;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 3256;
				this.match(SystemVerilogParser.COM);
				this.state = 3257;
				this.ident();
				}
				}
				this.state = 3262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subroutine_call_statement(): Subroutine_call_statementContext {
		let _localctx: Subroutine_call_statementContext = new Subroutine_call_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, SystemVerilogParser.RULE_subroutine_call_statement);
		try {
			this.state = 3271;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3263;
				this.subroutine_call();
				this.state = 3264;
				this.match(SystemVerilogParser.SEMIC);
				}
				break;
			case SystemVerilogParser.VOID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3266;
				this.match(SystemVerilogParser.VOID);
				this.state = 3267;
				this.match(SystemVerilogParser.OP_CAST);
				this.state = 3268;
				this.function_subroutine_call();
				this.state = 3269;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assertion_item(): Assertion_itemContext {
		let _localctx: Assertion_itemContext = new Assertion_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, SystemVerilogParser.RULE_assertion_item);
		try {
			this.state = 3275;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 383, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3273;
				this.concurrent_assertion_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3274;
				this.deferred_immediate_assertion_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deferred_immediate_assertion_item(): Deferred_immediate_assertion_itemContext {
		let _localctx: Deferred_immediate_assertion_itemContext = new Deferred_immediate_assertion_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, SystemVerilogParser.RULE_deferred_immediate_assertion_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3280;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.IDENT) {
				{
				this.state = 3277;
				this.ident();
				this.state = 3278;
				this.match(SystemVerilogParser.COLON);
				}
			}

			this.state = 3282;
			this.deferred_immediate_assertion_statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedural_assertion_statement(): Procedural_assertion_statementContext {
		let _localctx: Procedural_assertion_statementContext = new Procedural_assertion_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, SystemVerilogParser.RULE_procedural_assertion_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3284;
			this.immediate_assertion_statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public immediate_assertion_statement(): Immediate_assertion_statementContext {
		let _localctx: Immediate_assertion_statementContext = new Immediate_assertion_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, SystemVerilogParser.RULE_immediate_assertion_statement);
		try {
			this.state = 3288;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 385, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3286;
				this.simple_immediate_assertion_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3287;
				this.deferred_immediate_assertion_statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_immediate_assertion_statement(): Simple_immediate_assertion_statementContext {
		let _localctx: Simple_immediate_assertion_statementContext = new Simple_immediate_assertion_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, SystemVerilogParser.RULE_simple_immediate_assertion_statement);
		try {
			this.state = 3293;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.ASSERT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3290;
				this.simple_immediate_assert_statement();
				}
				break;
			case SystemVerilogParser.ASSUME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3291;
				this.simple_immediate_assume_statement();
				}
				break;
			case SystemVerilogParser.COVER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3292;
				this.simple_immediate_cover_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_immediate_assert_statement(): Simple_immediate_assert_statementContext {
		let _localctx: Simple_immediate_assert_statementContext = new Simple_immediate_assert_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, SystemVerilogParser.RULE_simple_immediate_assert_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3295;
			this.match(SystemVerilogParser.ASSERT);
			this.state = 3296;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 3297;
			this.expression(0);
			this.state = 3298;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 3299;
			this.action_block();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_immediate_assume_statement(): Simple_immediate_assume_statementContext {
		let _localctx: Simple_immediate_assume_statementContext = new Simple_immediate_assume_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, SystemVerilogParser.RULE_simple_immediate_assume_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3301;
			this.match(SystemVerilogParser.ASSUME);
			this.state = 3302;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 3303;
			this.expression(0);
			this.state = 3304;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 3305;
			this.action_block();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_immediate_cover_statement(): Simple_immediate_cover_statementContext {
		let _localctx: Simple_immediate_cover_statementContext = new Simple_immediate_cover_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, SystemVerilogParser.RULE_simple_immediate_cover_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3307;
			this.match(SystemVerilogParser.COVER);
			this.state = 3308;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 3309;
			this.expression(0);
			this.state = 3310;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 3311;
			this.statement_or_null();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deferred_immediate_assertion_statement(): Deferred_immediate_assertion_statementContext {
		let _localctx: Deferred_immediate_assertion_statementContext = new Deferred_immediate_assertion_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, SystemVerilogParser.RULE_deferred_immediate_assertion_statement);
		try {
			this.state = 3316;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.ASSERT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3313;
				this.deferred_immediate_assert_statement();
				}
				break;
			case SystemVerilogParser.ASSUME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3314;
				this.deferred_immediate_assume_statement();
				}
				break;
			case SystemVerilogParser.COVER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3315;
				this.deferred_immediate_cover_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deferred_immediate_assert_statement(): Deferred_immediate_assert_statementContext {
		let _localctx: Deferred_immediate_assert_statementContext = new Deferred_immediate_assert_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, SystemVerilogParser.RULE_deferred_immediate_assert_statement);
		try {
			this.state = 3332;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 388, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3318;
				this.match(SystemVerilogParser.ASSERT);
				this.state = 3319;
				this.match(SystemVerilogParser.SHPZERO);
				this.state = 3320;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3321;
				this.expression(0);
				this.state = 3322;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3323;
				this.action_block();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3325;
				this.match(SystemVerilogParser.ASSERT);
				this.state = 3326;
				this.match(SystemVerilogParser.FINAL);
				this.state = 3327;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3328;
				this.expression(0);
				this.state = 3329;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3330;
				this.action_block();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deferred_immediate_assume_statement(): Deferred_immediate_assume_statementContext {
		let _localctx: Deferred_immediate_assume_statementContext = new Deferred_immediate_assume_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, SystemVerilogParser.RULE_deferred_immediate_assume_statement);
		try {
			this.state = 3348;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3334;
				this.match(SystemVerilogParser.ASSUME);
				this.state = 3335;
				this.match(SystemVerilogParser.SHPZERO);
				this.state = 3336;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3337;
				this.expression(0);
				this.state = 3338;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3339;
				this.action_block();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3341;
				this.match(SystemVerilogParser.ASSUME);
				this.state = 3342;
				this.match(SystemVerilogParser.FINAL);
				this.state = 3343;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3344;
				this.expression(0);
				this.state = 3345;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3346;
				this.action_block();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deferred_immediate_cover_statement(): Deferred_immediate_cover_statementContext {
		let _localctx: Deferred_immediate_cover_statementContext = new Deferred_immediate_cover_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, SystemVerilogParser.RULE_deferred_immediate_cover_statement);
		try {
			this.state = 3364;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3350;
				this.match(SystemVerilogParser.COVER);
				this.state = 3351;
				this.match(SystemVerilogParser.SHPZERO);
				this.state = 3352;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3353;
				this.expression(0);
				this.state = 3354;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3355;
				this.statement_or_null();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3357;
				this.match(SystemVerilogParser.COVER);
				this.state = 3358;
				this.match(SystemVerilogParser.FINAL);
				this.state = 3359;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3360;
				this.expression(0);
				this.state = 3361;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3362;
				this.statement_or_null();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cycle_delay(): Cycle_delayContext {
		let _localctx: Cycle_delayContext = new Cycle_delayContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, SystemVerilogParser.RULE_cycle_delay);
		try {
			this.state = 3375;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3366;
				this.match(SystemVerilogParser.SHPSHP);
				this.state = 3367;
				this.integral_number();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3368;
				this.match(SystemVerilogParser.SHPSHP);
				this.state = 3369;
				this.ident();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3370;
				this.match(SystemVerilogParser.SHPSHP);
				this.state = 3371;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3372;
				this.expression(0);
				this.state = 3373;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public edge_ident(): Edge_identContext {
		let _localctx: Edge_identContext = new Edge_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, SystemVerilogParser.RULE_edge_ident);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3377;
			_la = this._input.LA(1);
			if (!(((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & ((1 << (SystemVerilogParser.POSEDGE - 90)) | (1 << (SystemVerilogParser.NEGEDGE - 90)) | (1 << (SystemVerilogParser.EDGE - 90)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public concatenation(): ConcatenationContext {
		let _localctx: ConcatenationContext = new ConcatenationContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, SystemVerilogParser.RULE_concatenation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3379;
			this.match(SystemVerilogParser.OP_BRC);
			this.state = 3380;
			this.expression(0);
			this.state = 3385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 3381;
				this.match(SystemVerilogParser.COM);
				this.state = 3382;
				this.expression(0);
				}
				}
				this.state = 3387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3388;
			this.match(SystemVerilogParser.CL_BRC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_concatenation(): Constant_concatenationContext {
		let _localctx: Constant_concatenationContext = new Constant_concatenationContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, SystemVerilogParser.RULE_constant_concatenation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3390;
			this.match(SystemVerilogParser.OP_BRC);
			this.state = 3391;
			this.constant_expression(0);
			this.state = 3396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.COM) {
				{
				{
				this.state = 3392;
				this.match(SystemVerilogParser.COM);
				this.state = 3393;
				this.constant_expression(0);
				}
				}
				this.state = 3398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3399;
			this.match(SystemVerilogParser.CL_BRC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_multiple_concatenation(): Constant_multiple_concatenationContext {
		let _localctx: Constant_multiple_concatenationContext = new Constant_multiple_concatenationContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, SystemVerilogParser.RULE_constant_multiple_concatenation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3401;
			this.match(SystemVerilogParser.OP_BRC);
			this.state = 3402;
			this.constant_expression(0);
			this.state = 3403;
			this.constant_concatenation();
			this.state = 3404;
			this.match(SystemVerilogParser.CL_BRC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multiple_concatenation(): Multiple_concatenationContext {
		let _localctx: Multiple_concatenationContext = new Multiple_concatenationContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, SystemVerilogParser.RULE_multiple_concatenation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3406;
			this.match(SystemVerilogParser.OP_BRC);
			this.state = 3407;
			this.expression(0);
			this.state = 3408;
			this.concatenation();
			this.state = 3409;
			this.match(SystemVerilogParser.CL_BRC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_range_expression(): Array_range_expressionContext {
		let _localctx: Array_range_expressionContext = new Array_range_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, SystemVerilogParser.RULE_array_range_expression);
		try {
			this.state = 3424;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 394, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3411;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3412;
				this.expression(0);
				this.state = 3413;
				this.match(SystemVerilogParser.COLON);
				this.state = 3414;
				this.expression(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3416;
				this.expression(0);
				this.state = 3417;
				this.match(SystemVerilogParser.PLUSCOLON);
				this.state = 3418;
				this.expression(0);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3420;
				this.expression(0);
				this.state = 3421;
				this.match(SystemVerilogParser.MINUSCOLON);
				this.state = 3422;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public empty_queue(): Empty_queueContext {
		let _localctx: Empty_queueContext = new Empty_queueContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, SystemVerilogParser.RULE_empty_queue);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3426;
			this.match(SystemVerilogParser.OP_BRC);
			this.state = 3427;
			this.match(SystemVerilogParser.CL_BRC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_function_call(): Constant_function_callContext {
		let _localctx: Constant_function_callContext = new Constant_function_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, SystemVerilogParser.RULE_constant_function_call);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3429;
			this.function_subroutine_call();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tf_call(): Tf_callContext {
		let _localctx: Tf_callContext = new Tf_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, SystemVerilogParser.RULE_tf_call);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3431;
			this.ps_or_hier_ident();
			this.state = 3436;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 395, this._ctx) ) {
			case 1:
				{
				this.state = 3432;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3433;
				this.list_of_arguments();
				this.state = 3434;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public system_tf_call(): System_tf_callContext {
		let _localctx: System_tf_callContext = new System_tf_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, SystemVerilogParser.RULE_system_tf_call);
		let _la: number;
		try {
			this.state = 3454;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3438;
				this.match(SystemVerilogParser.SYSTEM_TF_IDENT);
				this.state = 3443;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
				case 1:
					{
					this.state = 3439;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 3440;
					this.list_of_arguments();
					this.state = 3441;
					this.match(SystemVerilogParser.CL_PRN);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3445;
				this.match(SystemVerilogParser.SYSTEM_TF_IDENT);
				this.state = 3446;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3447;
				this.data_type();
				this.state = 3450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.COM) {
					{
					this.state = 3448;
					this.match(SystemVerilogParser.COM);
					this.state = 3449;
					this.expression(0);
					}
				}

				this.state = 3452;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subroutine_call(): Subroutine_callContext {
		let _localctx: Subroutine_callContext = new Subroutine_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, SystemVerilogParser.RULE_subroutine_call);
		let _la: number;
		try {
			this.state = 3463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 400, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3456;
				this.tf_call();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3457;
				this.system_tf_call();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3458;
				this.method_call();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.SCOPE_STD) {
					{
					this.state = 3459;
					this.match(SystemVerilogParser.SCOPE_STD);
					}
				}

				this.state = 3462;
				this.randomize_call();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_subroutine_call(): Function_subroutine_callContext {
		let _localctx: Function_subroutine_callContext = new Function_subroutine_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, SystemVerilogParser.RULE_function_subroutine_call);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3465;
			this.subroutine_call();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_comma(): Arg_commaContext {
		let _localctx: Arg_commaContext = new Arg_commaContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, SystemVerilogParser.RULE_arg_comma);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3467;
			this.match(SystemVerilogParser.COM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public list_of_arguments(): List_of_argumentsContext {
		let _localctx: List_of_argumentsContext = new List_of_argumentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, SystemVerilogParser.RULE_list_of_arguments);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3516;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.SIGNING:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.NULL:
			case SystemVerilogParser.TAGGED:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.CL_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.COM:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.DOL:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3470;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 3469;
					this.expression(0);
					}
				}

				this.state = 3478;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3472;
						this.arg_comma();
						this.state = 3474;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
							{
							this.state = 3473;
							this.expression(0);
							}
						}

						}
						}
					}
					this.state = 3480;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
				}
				this.state = 3492;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 3481;
					this.arg_comma();
					this.state = 3482;
					this.match(SystemVerilogParser.DOT);
					this.state = 3483;
					this.ident();
					this.state = 3484;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 3486;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
						{
						this.state = 3485;
						this.expression(0);
						}
					}

					this.state = 3488;
					this.match(SystemVerilogParser.CL_PRN);
					}
					}
					this.state = 3494;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case SystemVerilogParser.DOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3495;
				this.match(SystemVerilogParser.DOT);
				this.state = 3496;
				this.ident();
				this.state = 3497;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3499;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
					{
					this.state = 3498;
					this.expression(0);
					}
				}

				this.state = 3501;
				this.match(SystemVerilogParser.CL_PRN);
				this.state = 3513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 3502;
					this.arg_comma();
					this.state = 3503;
					this.match(SystemVerilogParser.DOT);
					this.state = 3504;
					this.ident();
					this.state = 3505;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 3507;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)) | (1 << (SystemVerilogParser.CLASS_ROOT - 75)) | (1 << (SystemVerilogParser.SCOPE_UNIT - 75)) | (1 << (SystemVerilogParser.SCOPE_LOCAL - 75)) | (1 << (SystemVerilogParser.SCOPE_STD - 75)) | (1 << (SystemVerilogParser.CONST - 75)) | (1 << (SystemVerilogParser.SIGNING - 75)) | (1 << (SystemVerilogParser.STRING - 75)) | (1 << (SystemVerilogParser.INTEGER_ATOM_TYPE - 75)) | (1 << (SystemVerilogParser.INTEGER_VECTOR_TYPE - 75)) | (1 << (SystemVerilogParser.NON_INTEGER_TYPE - 75)))) !== 0) || ((((_la - 111)) & ~0x1F) === 0 && ((1 << (_la - 111)) & ((1 << (SystemVerilogParser.RANDOMIZE - 111)) | (1 << (SystemVerilogParser.NULL - 111)) | (1 << (SystemVerilogParser.TAGGED - 111)) | (1 << (SystemVerilogParser.OP_PRN - 111)) | (1 << (SystemVerilogParser.OP_BRC - 111)) | (1 << (SystemVerilogParser.XOR - 111)))) !== 0) || ((((_la - 143)) & ~0x1F) === 0 && ((1 << (_la - 143)) & ((1 << (SystemVerilogParser.OR - 143)) | (1 << (SystemVerilogParser.AND - 143)) | (1 << (SystemVerilogParser.INV - 143)) | (1 << (SystemVerilogParser.NOT - 143)) | (1 << (SystemVerilogParser.MINUS - 143)) | (1 << (SystemVerilogParser.PLUS - 143)) | (1 << (SystemVerilogParser.DOL - 143)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.PLUSPLUS - 182)) | (1 << (SystemVerilogParser.MINUSMINUS - 182)) | (1 << (SystemVerilogParser.BINARY_NUMBER - 182)) | (1 << (SystemVerilogParser.OCTAL_NUMBER - 182)) | (1 << (SystemVerilogParser.HEX_NUMBER - 182)) | (1 << (SystemVerilogParser.SIZED_UNSIGNED - 182)) | (1 << (SystemVerilogParser.FIXED_POINT_NUMBER - 182)) | (1 << (SystemVerilogParser.SCIENCE_NUMBER - 182)) | (1 << (SystemVerilogParser.UNSIGNED_NUMBER - 182)) | (1 << (SystemVerilogParser.UNBASED_UNSIZED_LITERAL - 182)) | (1 << (SystemVerilogParser.STRING_LITERAL - 182)) | (1 << (SystemVerilogParser.SYSTEM_TF_IDENT - 182)))) !== 0) || _la === SystemVerilogParser.IDENT) {
						{
						this.state = 3506;
						this.expression(0);
						}
					}

					this.state = 3509;
					this.match(SystemVerilogParser.CL_PRN);
					}
					}
					this.state = 3515;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public method_call(): Method_callContext {
		let _localctx: Method_callContext = new Method_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, SystemVerilogParser.RULE_method_call);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3518;
			this.method_call_root();
			this.state = 3519;
			this.match(SystemVerilogParser.DOT);
			this.state = 3520;
			this.method_call_body();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public method_call_root(): Method_call_rootContext {
		let _localctx: Method_call_rootContext = new Method_call_rootContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, SystemVerilogParser.RULE_method_call_root);
		try {
			this.state = 3530;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 411, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3524;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 410, this._ctx) ) {
				case 1:
					{
					this.state = 3522;
					this.class_qualifier();
					}
					break;

				case 2:
					{
					this.state = 3523;
					this.package_scope();
					}
					break;
				}
				this.state = 3526;
				this.hier_ident();
				this.state = 3527;
				this.select();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3529;
				this.implicit_class_handle();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public method_call_body(): Method_call_bodyContext {
		let _localctx: Method_call_bodyContext = new Method_call_bodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, SystemVerilogParser.RULE_method_call_body);
		try {
			this.state = 3540;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 413, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3532;
				this.ident();
				this.state = 3537;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 412, this._ctx) ) {
				case 1:
					{
					this.state = 3533;
					this.match(SystemVerilogParser.OP_PRN);
					this.state = 3534;
					this.list_of_arguments();
					this.state = 3535;
					this.match(SystemVerilogParser.CL_PRN);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3539;
				this.built_in_method_call();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public built_in_method_call(): Built_in_method_callContext {
		let _localctx: Built_in_method_callContext = new Built_in_method_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, SystemVerilogParser.RULE_built_in_method_call);
		try {
			this.state = 3544;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.UNIQUE:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3542;
				this.array_manipulation_call();
				}
				break;
			case SystemVerilogParser.RANDOMIZE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3543;
				this.randomize_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_manipulation_call(): Array_manipulation_callContext {
		let _localctx: Array_manipulation_callContext = new Array_manipulation_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, SystemVerilogParser.RULE_array_manipulation_call);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3546;
			this.array_method_name();
			this.state = 3551;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 415, this._ctx) ) {
			case 1:
				{
				this.state = 3547;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3548;
				this.list_of_arguments();
				this.state = 3549;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
			this.state = 3558;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 416, this._ctx) ) {
			case 1:
				{
				this.state = 3553;
				this.match(SystemVerilogParser.WITH);
				this.state = 3554;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3555;
				this.expression(0);
				this.state = 3556;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public randomize_call(): Randomize_callContext {
		let _localctx: Randomize_callContext = new Randomize_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, SystemVerilogParser.RULE_randomize_call);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3560;
			this.match(SystemVerilogParser.RANDOMIZE);
			this.state = 3567;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 418, this._ctx) ) {
			case 1:
				{
				this.state = 3561;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3564;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case SystemVerilogParser.IDENT:
					{
					this.state = 3562;
					this.variable_identifier_list();
					}
					break;
				case SystemVerilogParser.NULL:
					{
					this.state = 3563;
					this.match(SystemVerilogParser.NULL);
					}
					break;
				case SystemVerilogParser.CL_PRN:
					break;
				default:
					break;
				}
				this.state = 3566;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_method_name(): Array_method_nameContext {
		let _localctx: Array_method_nameContext = new Array_method_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, SystemVerilogParser.RULE_array_method_name);
		try {
			this.state = 3574;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3569;
				this.ident();
				}
				break;
			case SystemVerilogParser.UNIQUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3570;
				this.match(SystemVerilogParser.UNIQUE);
				}
				break;
			case SystemVerilogParser.AND:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3571;
				this.match(SystemVerilogParser.AND);
				}
				break;
			case SystemVerilogParser.OR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3572;
				this.match(SystemVerilogParser.OR);
				}
				break;
			case SystemVerilogParser.XOR:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3573;
				this.match(SystemVerilogParser.XOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inc_or_dec_expression(): Inc_or_dec_expressionContext {
		let _localctx: Inc_or_dec_expressionContext = new Inc_or_dec_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, SystemVerilogParser.RULE_inc_or_dec_expression);
		try {
			this.state = 3582;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3576;
				this.inc_or_dec_operator();
				this.state = 3577;
				this.variable_lvalue();
				}
				break;
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3579;
				this.variable_lvalue();
				this.state = 3580;
				this.inc_or_dec_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public constant_expression(): Constant_expressionContext;
	public constant_expression(_p: number): Constant_expressionContext;
	// @RuleVersion(0)
	public constant_expression(_p?: number): Constant_expressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Constant_expressionContext = new Constant_expressionContext(this._ctx, _parentState);
		let _prevctx: Constant_expressionContext = _localctx;
		let _startState: number = 520;
		this.enterRecursionRule(_localctx, 520, SystemVerilogParser.RULE_constant_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3589;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				{
				this.state = 3585;
				this.constant_primary();
				}
				break;
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
				{
				this.state = 3586;
				this.unary_operator();
				this.state = 3587;
				this.constant_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 3603;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 3601;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
					case 1:
						{
						_localctx = new Constant_expressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, SystemVerilogParser.RULE_constant_expression);
						this.state = 3591;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 3592;
						this.binary_operator();
						this.state = 3593;
						this.constant_expression(3);
						}
						break;

					case 2:
						{
						_localctx = new Constant_expressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, SystemVerilogParser.RULE_constant_expression);
						this.state = 3595;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 3596;
						this.match(SystemVerilogParser.QUES);
						this.state = 3597;
						this.constant_expression(0);
						this.state = 3598;
						this.match(SystemVerilogParser.COLON);
						this.state = 3599;
						this.constant_expression(2);
						}
						break;
					}
					}
				}
				this.state = 3605;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_mintypmax_expression(): Constant_mintypmax_expressionContext {
		let _localctx: Constant_mintypmax_expressionContext = new Constant_mintypmax_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, SystemVerilogParser.RULE_constant_mintypmax_expression);
		try {
			this.state = 3613;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 424, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3606;
				this.constant_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3607;
				this.constant_expression(0);
				this.state = 3608;
				this.match(SystemVerilogParser.COLON);
				this.state = 3609;
				this.constant_expression(0);
				this.state = 3610;
				this.match(SystemVerilogParser.COLON);
				this.state = 3611;
				this.constant_expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_param_expression(): Constant_param_expressionContext {
		let _localctx: Constant_param_expressionContext = new Constant_param_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, SystemVerilogParser.RULE_constant_param_expression);
		try {
			this.state = 3618;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 425, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3615;
				this.constant_mintypmax_expression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3616;
				this.data_type();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3617;
				this.match(SystemVerilogParser.DOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public param_expression(): Param_expressionContext {
		let _localctx: Param_expressionContext = new Param_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, SystemVerilogParser.RULE_param_expression);
		try {
			this.state = 3623;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3620;
				this.mintypmax_expression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3621;
				this.data_type();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3622;
				this.match(SystemVerilogParser.DOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_range_expression(): Constant_range_expressionContext {
		let _localctx: Constant_range_expressionContext = new Constant_range_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, SystemVerilogParser.RULE_constant_range_expression);
		try {
			this.state = 3627;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 427, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3625;
				this.constant_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3626;
				this.constant_part_select_range();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_part_select_range(): Constant_part_select_rangeContext {
		let _localctx: Constant_part_select_rangeContext = new Constant_part_select_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, SystemVerilogParser.RULE_constant_part_select_range);
		try {
			this.state = 3631;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 428, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3629;
				this.constant_range();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3630;
				this.constant_indexed_range();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_range(): Constant_rangeContext {
		let _localctx: Constant_rangeContext = new Constant_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, SystemVerilogParser.RULE_constant_range);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3633;
			this.constant_expression(0);
			this.state = 3634;
			this.match(SystemVerilogParser.COLON);
			this.state = 3635;
			this.constant_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_indexed_range(): Constant_indexed_rangeContext {
		let _localctx: Constant_indexed_rangeContext = new Constant_indexed_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, SystemVerilogParser.RULE_constant_indexed_range);
		try {
			this.state = 3645;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 429, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3637;
				this.constant_expression(0);
				this.state = 3638;
				this.match(SystemVerilogParser.PLUSCOLON);
				this.state = 3639;
				this.constant_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3641;
				this.constant_expression(0);
				this.state = 3642;
				this.match(SystemVerilogParser.MINUSCOLON);
				this.state = 3643;
				this.constant_expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 536;
		this.enterRecursionRule(_localctx, 536, SystemVerilogParser.RULE_expression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3658;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 430, this._ctx) ) {
			case 1:
				{
				this.state = 3648;
				this.primary();
				}
				break;

			case 2:
				{
				this.state = 3649;
				this.unary_operator();
				this.state = 3650;
				this.primary();
				}
				break;

			case 3:
				{
				this.state = 3652;
				this.inc_or_dec_expression();
				}
				break;

			case 4:
				{
				this.state = 3653;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3654;
				this.operator_assignment();
				this.state = 3655;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 5:
				{
				this.state = 3657;
				this.tagged_union_expression();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 3678;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 3676;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 431, this._ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, SystemVerilogParser.RULE_expression);
						this.state = 3660;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 3661;
						this.binary_operator();
						this.state = 3662;
						this.expression(5);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, SystemVerilogParser.RULE_expression);
						this.state = 3664;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 3665;
						this.match(SystemVerilogParser.QUES);
						this.state = 3666;
						this.expression(0);
						this.state = 3667;
						this.match(SystemVerilogParser.COLON);
						this.state = 3668;
						this.expression(3);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, SystemVerilogParser.RULE_expression);
						this.state = 3670;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 3671;
						this.match(SystemVerilogParser.INSIDE);
						this.state = 3672;
						this.match(SystemVerilogParser.OP_BRC);
						this.state = 3673;
						this.open_range_list();
						this.state = 3674;
						this.match(SystemVerilogParser.CL_BRC);
						}
						break;
					}
					}
				}
				this.state = 3680;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 432, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tagged_union_expression(): Tagged_union_expressionContext {
		let _localctx: Tagged_union_expressionContext = new Tagged_union_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, SystemVerilogParser.RULE_tagged_union_expression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3681;
			this.match(SystemVerilogParser.TAGGED);
			this.state = 3682;
			this.ident();
			this.state = 3684;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
			case 1:
				{
				this.state = 3683;
				this.expression(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public value_range(): Value_rangeContext {
		let _localctx: Value_rangeContext = new Value_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, SystemVerilogParser.RULE_value_range);
		try {
			this.state = 3693;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.SCOPE_LOCAL:
			case SystemVerilogParser.SCOPE_STD:
			case SystemVerilogParser.CONST:
			case SystemVerilogParser.SIGNING:
			case SystemVerilogParser.STRING:
			case SystemVerilogParser.INTEGER_ATOM_TYPE:
			case SystemVerilogParser.INTEGER_VECTOR_TYPE:
			case SystemVerilogParser.NON_INTEGER_TYPE:
			case SystemVerilogParser.RANDOMIZE:
			case SystemVerilogParser.NULL:
			case SystemVerilogParser.TAGGED:
			case SystemVerilogParser.OP_PRN:
			case SystemVerilogParser.OP_BRC:
			case SystemVerilogParser.XOR:
			case SystemVerilogParser.OR:
			case SystemVerilogParser.AND:
			case SystemVerilogParser.INV:
			case SystemVerilogParser.NOT:
			case SystemVerilogParser.MINUS:
			case SystemVerilogParser.PLUS:
			case SystemVerilogParser.DOL:
			case SystemVerilogParser.INVXOR:
			case SystemVerilogParser.INVAND:
			case SystemVerilogParser.INVOR:
			case SystemVerilogParser.PLUSPLUS:
			case SystemVerilogParser.MINUSMINUS:
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
			case SystemVerilogParser.UNSIGNED_NUMBER:
			case SystemVerilogParser.UNBASED_UNSIZED_LITERAL:
			case SystemVerilogParser.STRING_LITERAL:
			case SystemVerilogParser.SYSTEM_TF_IDENT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3686;
				this.expression(0);
				}
				break;
			case SystemVerilogParser.OP_BRK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3687;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 3688;
				this.expression(0);
				this.state = 3689;
				this.match(SystemVerilogParser.COLON);
				this.state = 3690;
				this.expression(0);
				this.state = 3691;
				this.match(SystemVerilogParser.CL_BRK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mintypmax_expression(): Mintypmax_expressionContext {
		let _localctx: Mintypmax_expressionContext = new Mintypmax_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, SystemVerilogParser.RULE_mintypmax_expression);
		try {
			this.state = 3702;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 435, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3695;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3696;
				this.expression(0);
				this.state = 3697;
				this.match(SystemVerilogParser.COLON);
				this.state = 3698;
				this.expression(0);
				this.state = 3699;
				this.match(SystemVerilogParser.COLON);
				this.state = 3700;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public part_select_range(): Part_select_rangeContext {
		let _localctx: Part_select_rangeContext = new Part_select_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, SystemVerilogParser.RULE_part_select_range);
		try {
			this.state = 3706;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 436, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3704;
				this.constant_range();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3705;
				this.indexed_range();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexed_range(): Indexed_rangeContext {
		let _localctx: Indexed_rangeContext = new Indexed_rangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, SystemVerilogParser.RULE_indexed_range);
		try {
			this.state = 3716;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 437, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3708;
				this.expression(0);
				this.state = 3709;
				this.match(SystemVerilogParser.PLUSCOLON);
				this.state = 3710;
				this.constant_expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3712;
				this.expression(0);
				this.state = 3713;
				this.match(SystemVerilogParser.MINUSCOLON);
				this.state = 3714;
				this.constant_expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public genvar_expression(): Genvar_expressionContext {
		let _localctx: Genvar_expressionContext = new Genvar_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, SystemVerilogParser.RULE_genvar_expression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3718;
			this.constant_expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_primary(): Constant_primaryContext {
		let _localctx: Constant_primaryContext = new Constant_primaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, SystemVerilogParser.RULE_constant_primary);
		try {
			this.state = 3751;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 441, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3720;
				this.primary_literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3721;
				this.ps_ident();
				this.state = 3722;
				this.constant_select();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3724;
				this.ident();
				this.state = 3729;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 438, this._ctx) ) {
				case 1:
					{
					this.state = 3725;
					this.match(SystemVerilogParser.OP_BRK);
					this.state = 3726;
					this.constant_range_expression();
					this.state = 3727;
					this.match(SystemVerilogParser.CL_BRK);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3733;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 439, this._ctx) ) {
				case 1:
					{
					this.state = 3731;
					this.package_scope();
					}
					break;

				case 2:
					{
					this.state = 3732;
					this.class_scope();
					}
					break;
				}
				this.state = 3735;
				this.ident();
				this.state = 3736;
				this.constant_select();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3738;
				this.constant_concatenation();
				this.state = 3743;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
				case 1:
					{
					this.state = 3739;
					this.match(SystemVerilogParser.OP_BRK);
					this.state = 3740;
					this.constant_range_expression();
					this.state = 3741;
					this.match(SystemVerilogParser.CL_BRK);
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3745;
				this.constant_function_call();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3746;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3747;
				this.constant_mintypmax_expression();
				this.state = 3748;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3750;
				this.constant_cast();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public primary(): PrimaryContext {
		let _localctx: PrimaryContext = new PrimaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, SystemVerilogParser.RULE_primary);
		try {
			this.state = 3785;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 445, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3753;
				this.primary_literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3756;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
				case 1:
					{
					this.state = 3754;
					this.class_qualifier();
					}
					break;

				case 2:
					{
					this.state = 3755;
					this.package_scope();
					}
					break;
				}
				this.state = 3758;
				this.hier_ident();
				this.state = 3759;
				this.select();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3761;
				this.empty_queue();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3762;
				this.concatenation();
				this.state = 3767;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
				case 1:
					{
					this.state = 3763;
					this.match(SystemVerilogParser.OP_BRK);
					this.state = 3764;
					this.range_expression();
					this.state = 3765;
					this.match(SystemVerilogParser.CL_BRK);
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3769;
				this.multiple_concatenation();
				this.state = 3774;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 444, this._ctx) ) {
				case 1:
					{
					this.state = 3770;
					this.match(SystemVerilogParser.OP_BRK);
					this.state = 3771;
					this.range_expression();
					this.state = 3772;
					this.match(SystemVerilogParser.CL_BRK);
					}
					break;
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3776;
				this.function_subroutine_call();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3777;
				this.match(SystemVerilogParser.OP_PRN);
				this.state = 3778;
				this.mintypmax_expression();
				this.state = 3779;
				this.match(SystemVerilogParser.CL_PRN);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3781;
				this.cast();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3782;
				this.match(SystemVerilogParser.THIS);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3783;
				this.match(SystemVerilogParser.DOL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3784;
				this.match(SystemVerilogParser.NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public class_qualifier(): Class_qualifierContext {
		let _localctx: Class_qualifierContext = new Class_qualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, SystemVerilogParser.RULE_class_qualifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.SCOPE_LOCAL) {
				{
				this.state = 3787;
				this.match(SystemVerilogParser.SCOPE_LOCAL);
				}
			}

			this.state = 3794;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 447, this._ctx) ) {
			case 1:
				{
				this.state = 3790;
				this.implicit_class_handle();
				this.state = 3791;
				this.match(SystemVerilogParser.DOT);
				}
				break;

			case 2:
				{
				this.state = 3793;
				this.class_scope();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public range_expression(): Range_expressionContext {
		let _localctx: Range_expressionContext = new Range_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, SystemVerilogParser.RULE_range_expression);
		try {
			this.state = 3798;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 448, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3796;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3797;
				this.part_select_range();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public primary_literal(): Primary_literalContext {
		let _localctx: Primary_literalContext = new Primary_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, SystemVerilogParser.RULE_primary_literal);
		try {
			this.state = 3804;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 449, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3800;
				this.number();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3801;
				this.time_literal();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3802;
				this.match(SystemVerilogParser.UNBASED_UNSIZED_LITERAL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3803;
				this.match(SystemVerilogParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public time_literal(): Time_literalContext {
		let _localctx: Time_literalContext = new Time_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, SystemVerilogParser.RULE_time_literal);
		try {
			this.state = 3810;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.UNSIGNED_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3806;
				this.match(SystemVerilogParser.UNSIGNED_NUMBER);
				this.state = 3807;
				this.match(SystemVerilogParser.TIME_UNIT);
				}
				break;
			case SystemVerilogParser.FIXED_POINT_NUMBER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3808;
				this.match(SystemVerilogParser.FIXED_POINT_NUMBER);
				this.state = 3809;
				this.match(SystemVerilogParser.TIME_UNIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public implicit_class_handle(): Implicit_class_handleContext {
		let _localctx: Implicit_class_handleContext = new Implicit_class_handleContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, SystemVerilogParser.RULE_implicit_class_handle);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3812;
			_la = this._input.LA(1);
			if (!(((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (SystemVerilogParser.THIS - 75)) | (1 << (SystemVerilogParser.SUPER - 75)) | (1 << (SystemVerilogParser.THISSUPER - 75)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit_select(): Bit_selectContext {
		let _localctx: Bit_selectContext = new Bit_selectContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, SystemVerilogParser.RULE_bit_select);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3820;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3814;
					this.match(SystemVerilogParser.OP_BRK);
					this.state = 3815;
					this.expression(0);
					this.state = 3816;
					this.match(SystemVerilogParser.CL_BRK);
					}
					}
				}
				this.state = 3822;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 451, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select(): SelectContext {
		let _localctx: SelectContext = new SelectContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, SystemVerilogParser.RULE_select);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3834;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 453, this._ctx) ) {
			case 1:
				{
				this.state = 3829;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3823;
						this.match(SystemVerilogParser.DOT);
						this.state = 3824;
						this.ident();
						this.state = 3825;
						this.bit_select();
						}
						}
					}
					this.state = 3831;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 452, this._ctx);
				}
				this.state = 3832;
				this.match(SystemVerilogParser.DOT);
				this.state = 3833;
				this.ident();
				}
				break;
			}
			this.state = 3836;
			this.bit_select();
			this.state = 3841;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 454, this._ctx) ) {
			case 1:
				{
				this.state = 3837;
				this.match(SystemVerilogParser.OP_BRK);
				this.state = 3838;
				this.part_select_range();
				this.state = 3839;
				this.match(SystemVerilogParser.CL_BRK);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonrange_select(): Nonrange_selectContext {
		let _localctx: Nonrange_selectContext = new Nonrange_selectContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, SystemVerilogParser.RULE_nonrange_select);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3854;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 456, this._ctx) ) {
			case 1:
				{
				this.state = 3849;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3843;
						this.match(SystemVerilogParser.DOT);
						this.state = 3844;
						this.ident();
						this.state = 3845;
						this.bit_select();
						}
						}
					}
					this.state = 3851;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 455, this._ctx);
				}
				this.state = 3852;
				this.match(SystemVerilogParser.DOT);
				this.state = 3853;
				this.ident();
				}
				break;
			}
			this.state = 3856;
			this.bit_select();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_bit_select(): Constant_bit_selectContext {
		let _localctx: Constant_bit_selectContext = new Constant_bit_selectContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, SystemVerilogParser.RULE_constant_bit_select);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3864;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3858;
					this.match(SystemVerilogParser.OP_BRK);
					this.state = 3859;
					this.constant_expression(0);
					this.state = 3860;
					this.match(SystemVerilogParser.CL_BRK);
					}
					}
				}
				this.state = 3866;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 457, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_select(): Constant_selectContext {
		let _localctx: Constant_selectContext = new Constant_selectContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, SystemVerilogParser.RULE_constant_select);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3878;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 459, this._ctx) ) {
			case 1:
				{
				this.state = 3873;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3867;
						this.match(SystemVerilogParser.DOT);
						this.state = 3868;
						this.ident();
						this.state = 3869;
						this.constant_bit_select();
						}
						}
					}
					this.state = 3875;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 458, this._ctx);
				}
				this.state = 3876;
				this.match(SystemVerilogParser.DOT);
				this.state = 3877;
				this.ident();
				}
				break;
			}
			this.state = 3880;
			this.constant_bit_select();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant_cast(): Constant_castContext {
		let _localctx: Constant_castContext = new Constant_castContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, SystemVerilogParser.RULE_constant_cast);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3882;
			this.match(SystemVerilogParser.OP_PRN);
			this.state = 3883;
			this.casting_type();
			this.state = 3884;
			this.match(SystemVerilogParser.CL_PRN);
			this.state = 3885;
			this.match(SystemVerilogParser.OP_CAST);
			this.state = 3886;
			this.constant_expression(0);
			this.state = 3887;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cast(): CastContext {
		let _localctx: CastContext = new CastContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, SystemVerilogParser.RULE_cast);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3889;
			this.casting_type();
			this.state = 3890;
			this.match(SystemVerilogParser.OP_CAST);
			this.state = 3891;
			this.expression(0);
			this.state = 3892;
			this.match(SystemVerilogParser.CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public net_lvalue(): Net_lvalueContext {
		let _localctx: Net_lvalueContext = new Net_lvalueContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, SystemVerilogParser.RULE_net_lvalue);
		try {
			this.state = 3904;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3894;
				this.ps_or_hier_ident();
				this.state = 3895;
				this.constant_select();
				}
				break;
			case SystemVerilogParser.OP_BRC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3897;
				this.match(SystemVerilogParser.OP_BRC);
				this.state = 3898;
				this.net_lvalue();
				{
				this.state = 3899;
				this.match(SystemVerilogParser.COM);
				this.state = 3900;
				this.net_lvalue();
				}
				this.state = 3902;
				this.match(SystemVerilogParser.CL_BRC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable_lvalue(): Variable_lvalueContext {
		let _localctx: Variable_lvalueContext = new Variable_lvalueContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, SystemVerilogParser.RULE_variable_lvalue);
		let _la: number;
		try {
			this.state = 3926;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.THIS:
			case SystemVerilogParser.SUPER:
			case SystemVerilogParser.THISSUPER:
			case SystemVerilogParser.CLASS_ROOT:
			case SystemVerilogParser.SCOPE_UNIT:
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3910;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 461, this._ctx) ) {
				case 1:
					{
					this.state = 3906;
					this.implicit_class_handle();
					this.state = 3907;
					this.match(SystemVerilogParser.DOT);
					}
					break;

				case 2:
					{
					this.state = 3909;
					this.package_scope();
					}
					break;
				}
				this.state = 3912;
				this.hier_ident();
				this.state = 3913;
				this.select();
				}
				break;
			case SystemVerilogParser.OP_BRC:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3915;
				this.match(SystemVerilogParser.OP_BRC);
				this.state = 3916;
				this.variable_lvalue();
				this.state = 3921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === SystemVerilogParser.COM) {
					{
					{
					this.state = 3917;
					this.match(SystemVerilogParser.COM);
					this.state = 3918;
					this.variable_lvalue();
					}
					}
					this.state = 3923;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3924;
				this.match(SystemVerilogParser.CL_BRC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public non_range_variable_lvalue(): Non_range_variable_lvalueContext {
		let _localctx: Non_range_variable_lvalueContext = new Non_range_variable_lvalueContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, SystemVerilogParser.RULE_non_range_variable_lvalue);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3932;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 464, this._ctx) ) {
			case 1:
				{
				this.state = 3928;
				this.implicit_class_handle();
				this.state = 3929;
				this.match(SystemVerilogParser.DOT);
				}
				break;

			case 2:
				{
				this.state = 3931;
				this.package_scope();
				}
				break;
			}
			this.state = 3934;
			this.hier_ident();
			this.state = 3935;
			this.nonrange_select();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number(): NumberContext {
		let _localctx: NumberContext = new NumberContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, SystemVerilogParser.RULE_number);
		try {
			this.state = 3939;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.BINARY_NUMBER:
			case SystemVerilogParser.OCTAL_NUMBER:
			case SystemVerilogParser.HEX_NUMBER:
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.UNSIGNED_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3937;
				this.integral_number();
				}
				break;
			case SystemVerilogParser.FIXED_POINT_NUMBER:
			case SystemVerilogParser.SCIENCE_NUMBER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3938;
				this.real_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public integral_number(): Integral_numberContext {
		let _localctx: Integral_numberContext = new Integral_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, SystemVerilogParser.RULE_integral_number);
		try {
			this.state = 3945;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.BINARY_NUMBER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3941;
				this.match(SystemVerilogParser.BINARY_NUMBER);
				}
				break;
			case SystemVerilogParser.OCTAL_NUMBER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3942;
				this.match(SystemVerilogParser.OCTAL_NUMBER);
				}
				break;
			case SystemVerilogParser.HEX_NUMBER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3943;
				this.match(SystemVerilogParser.HEX_NUMBER);
				}
				break;
			case SystemVerilogParser.SIZED_UNSIGNED:
			case SystemVerilogParser.UNSIGNED_NUMBER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3944;
				this.decimal_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimal_number(): Decimal_numberContext {
		let _localctx: Decimal_numberContext = new Decimal_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, SystemVerilogParser.RULE_decimal_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3947;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.SIZED_UNSIGNED || _la === SystemVerilogParser.UNSIGNED_NUMBER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public real_number(): Real_numberContext {
		let _localctx: Real_numberContext = new Real_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, SystemVerilogParser.RULE_real_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3949;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.FIXED_POINT_NUMBER || _la === SystemVerilogParser.SCIENCE_NUMBER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_operator(): Unary_operatorContext {
		let _localctx: Unary_operatorContext = new Unary_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, SystemVerilogParser.RULE_unary_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3951;
			_la = this._input.LA(1);
			if (!(((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (SystemVerilogParser.XOR - 142)) | (1 << (SystemVerilogParser.OR - 142)) | (1 << (SystemVerilogParser.AND - 142)) | (1 << (SystemVerilogParser.INV - 142)) | (1 << (SystemVerilogParser.NOT - 142)) | (1 << (SystemVerilogParser.MINUS - 142)) | (1 << (SystemVerilogParser.PLUS - 142)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary_operator(): Binary_operatorContext {
		let _localctx: Binary_operatorContext = new Binary_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, SystemVerilogParser.RULE_binary_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3953;
			_la = this._input.LA(1);
			if (!(((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (SystemVerilogParser.XOR - 142)) | (1 << (SystemVerilogParser.OR - 142)) | (1 << (SystemVerilogParser.AND - 142)) | (1 << (SystemVerilogParser.MINUS - 142)) | (1 << (SystemVerilogParser.PLUS - 142)) | (1 << (SystemVerilogParser.MULT - 142)) | (1 << (SystemVerilogParser.DIV - 142)) | (1 << (SystemVerilogParser.MOD - 142)) | (1 << (SystemVerilogParser.GT - 142)) | (1 << (SystemVerilogParser.LT - 142)) | (1 << (SystemVerilogParser.MINUSGT - 142)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.EQEQQUES - 182)) | (1 << (SystemVerilogParser.NOTEQQUES - 182)) | (1 << (SystemVerilogParser.EQEQEQ - 182)) | (1 << (SystemVerilogParser.NOTEQEQ - 182)) | (1 << (SystemVerilogParser.GTGTGT - 182)) | (1 << (SystemVerilogParser.LTLTLT - 182)) | (1 << (SystemVerilogParser.LTMINUSGT - 182)) | (1 << (SystemVerilogParser.EQEQ - 182)) | (1 << (SystemVerilogParser.NOTEQ - 182)) | (1 << (SystemVerilogParser.ANDAND - 182)) | (1 << (SystemVerilogParser.OROR - 182)) | (1 << (SystemVerilogParser.MULTMULT - 182)) | (1 << (SystemVerilogParser.LTEQ - 182)) | (1 << (SystemVerilogParser.GTEQ - 182)) | (1 << (SystemVerilogParser.XORINV - 182)) | (1 << (SystemVerilogParser.GTGT - 182)) | (1 << (SystemVerilogParser.LTLT - 182)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public inc_or_dec_operator(): Inc_or_dec_operatorContext {
		let _localctx: Inc_or_dec_operatorContext = new Inc_or_dec_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, SystemVerilogParser.RULE_inc_or_dec_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3955;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.PLUSPLUS || _la === SystemVerilogParser.MINUSMINUS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unary_module_path_operator(): Unary_module_path_operatorContext {
		let _localctx: Unary_module_path_operatorContext = new Unary_module_path_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, SystemVerilogParser.RULE_unary_module_path_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3957;
			_la = this._input.LA(1);
			if (!(((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (SystemVerilogParser.XOR - 142)) | (1 << (SystemVerilogParser.OR - 142)) | (1 << (SystemVerilogParser.AND - 142)) | (1 << (SystemVerilogParser.INV - 142)) | (1 << (SystemVerilogParser.NOT - 142)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.INVAND - 182)) | (1 << (SystemVerilogParser.INVOR - 182)) | (1 << (SystemVerilogParser.XORINV - 182)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binary_module_path_operator(): Binary_module_path_operatorContext {
		let _localctx: Binary_module_path_operatorContext = new Binary_module_path_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, SystemVerilogParser.RULE_binary_module_path_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3959;
			_la = this._input.LA(1);
			if (!(((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (SystemVerilogParser.XOR - 142)) | (1 << (SystemVerilogParser.OR - 142)) | (1 << (SystemVerilogParser.AND - 142)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (SystemVerilogParser.INVXOR - 182)) | (1 << (SystemVerilogParser.EQEQ - 182)) | (1 << (SystemVerilogParser.NOTEQ - 182)) | (1 << (SystemVerilogParser.ANDAND - 182)) | (1 << (SystemVerilogParser.OROR - 182)) | (1 << (SystemVerilogParser.XORINV - 182)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_scope(): Package_scopeContext {
		let _localctx: Package_scopeContext = new Package_scopeContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, SystemVerilogParser.RULE_package_scope);
		try {
			this.state = 3965;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case SystemVerilogParser.IDENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3961;
				this.ident();
				this.state = 3962;
				this.match(SystemVerilogParser.SCOPE);
				}
				break;
			case SystemVerilogParser.SCOPE_UNIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3964;
				this.match(SystemVerilogParser.SCOPE_UNIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident(): IdentContext {
		let _localctx: IdentContext = new IdentContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, SystemVerilogParser.RULE_ident);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3967;
			this.match(SystemVerilogParser.IDENT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ps_ident(): Ps_identContext {
		let _localctx: Ps_identContext = new Ps_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, SystemVerilogParser.RULE_ps_ident);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3970;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				{
				this.state = 3969;
				this.package_scope();
				}
				break;
			}
			this.state = 3972;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hier_ident(): Hier_identContext {
		let _localctx: Hier_identContext = new Hier_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, SystemVerilogParser.RULE_hier_ident);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.CLASS_ROOT) {
				{
				this.state = 3974;
				this.match(SystemVerilogParser.CLASS_ROOT);
				}
			}

			this.state = 3983;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3977;
					this.ident();
					this.state = 3978;
					this.constant_bit_select();
					this.state = 3979;
					this.match(SystemVerilogParser.DOT);
					}
					}
				}
				this.state = 3985;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 470, this._ctx);
			}
			this.state = 3986;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ps_or_hier_ident(): Ps_or_hier_identContext {
		let _localctx: Ps_or_hier_identContext = new Ps_or_hier_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, SystemVerilogParser.RULE_ps_or_hier_ident);
		try {
			this.state = 3990;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 471, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3988;
				this.ps_ident();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3989;
				this.hier_ident();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_text(): Pp_textContext {
		let _localctx: Pp_textContext = new Pp_textContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, SystemVerilogParser.RULE_pp_text);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (SystemVerilogParser.PP_DEFINE - 220)) | (1 << (SystemVerilogParser.PP_UNDEF - 220)) | (1 << (SystemVerilogParser.PP_INCLUDE - 220)) | (1 << (SystemVerilogParser.PP_TIMESCALE - 220)) | (1 << (SystemVerilogParser.PP_DEFAULT_NETTYPE - 220)) | (1 << (SystemVerilogParser.PP_IFDEF - 220)) | (1 << (SystemVerilogParser.PP_IFNDEF - 220)) | (1 << (SystemVerilogParser.PP_CALL_NOARG - 220)) | (1 << (SystemVerilogParser.PP_CALL_ARG - 220)))) !== 0)) {
				{
				{
				this.state = 3992;
				this.pp_directive();
				}
				}
				this.state = 3997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_directive(): Pp_directiveContext {
		let _localctx: Pp_directiveContext = new Pp_directiveContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, SystemVerilogParser.RULE_pp_directive);
		try {
			this.state = 4008;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 473, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3998;
				this.pp_default_nettype();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3999;
				this.pp_timescale();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4000;
				this.pp_include();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4001;
				this.pp_define_only();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4002;
				this.pp_define_noarg();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4003;
				this.pp_define_arg();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4004;
				this.pp_undef();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4005;
				this.pp_call_noarg();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4006;
				this.pp_call_arg();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4007;
				this.pp_ifdef();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_default_nettype(): Pp_default_nettypeContext {
		let _localctx: Pp_default_nettypeContext = new Pp_default_nettypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, SystemVerilogParser.RULE_pp_default_nettype);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4010;
			this.match(SystemVerilogParser.PP_DEFAULT_NETTYPE);
			this.state = 4011;
			this.match(SystemVerilogParser.PP_DEFAULT_NETTYPE_VALUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_timescale(): Pp_timescaleContext {
		let _localctx: Pp_timescaleContext = new Pp_timescaleContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, SystemVerilogParser.RULE_pp_timescale);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4013;
			this.match(SystemVerilogParser.PP_TIMESCALE);
			this.state = 4014;
			this.match(SystemVerilogParser.PP_UNSIGNED_NUMBER);
			this.state = 4015;
			this.match(SystemVerilogParser.PP_TIME_UNIT);
			this.state = 4016;
			this.match(SystemVerilogParser.PP_DIV);
			this.state = 4017;
			this.match(SystemVerilogParser.PP_UNSIGNED_NUMBER);
			this.state = 4018;
			this.match(SystemVerilogParser.PP_TIME_UNIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_include(): Pp_includeContext {
		let _localctx: Pp_includeContext = new Pp_includeContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, SystemVerilogParser.RULE_pp_include);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4020;
			this.match(SystemVerilogParser.PP_INCLUDE);
			this.state = 4021;
			this.match(SystemVerilogParser.PP_STRING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_define_only(): Pp_define_onlyContext {
		let _localctx: Pp_define_onlyContext = new Pp_define_onlyContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, SystemVerilogParser.RULE_pp_define_only);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4023;
			this.match(SystemVerilogParser.PP_DEFINE);
			this.state = 4024;
			this.match(SystemVerilogParser.DF_IDENT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_define_noarg(): Pp_define_noargContext {
		let _localctx: Pp_define_noargContext = new Pp_define_noargContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, SystemVerilogParser.RULE_pp_define_noarg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4026;
			this.match(SystemVerilogParser.PP_DEFINE);
			this.state = 4027;
			this.match(SystemVerilogParser.DF_MACRO_NAME_NOARG);
			this.state = 4028;
			this.match(SystemVerilogParser.DFTX_MACRO_TEXT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_define_arg(): Pp_define_argContext {
		let _localctx: Pp_define_argContext = new Pp_define_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, SystemVerilogParser.RULE_pp_define_arg);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4030;
			this.match(SystemVerilogParser.PP_DEFINE);
			this.state = 4031;
			this.match(SystemVerilogParser.DF_MACRO_NAME_ARG);
			this.state = 4032;
			this.match(SystemVerilogParser.DFAG_IDENT);
			this.state = 4037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.DFAG_COM) {
				{
				{
				this.state = 4033;
				this.match(SystemVerilogParser.DFAG_COM);
				this.state = 4034;
				this.match(SystemVerilogParser.DFAG_IDENT);
				}
				}
				this.state = 4039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4040;
			this.match(SystemVerilogParser.DFAG_CL_PRN);
			this.state = 4041;
			this.match(SystemVerilogParser.DFTX_MACRO_TEXT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_undef(): Pp_undefContext {
		let _localctx: Pp_undefContext = new Pp_undefContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, SystemVerilogParser.RULE_pp_undef);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4043;
			this.match(SystemVerilogParser.PP_UNDEF);
			this.state = 4044;
			this.match(SystemVerilogParser.PP_IDENT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_call_noarg(): Pp_call_noargContext {
		let _localctx: Pp_call_noargContext = new Pp_call_noargContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, SystemVerilogParser.RULE_pp_call_noarg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4046;
			this.match(SystemVerilogParser.PP_CALL_NOARG);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_call_arg(): Pp_call_argContext {
		let _localctx: Pp_call_argContext = new Pp_call_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, SystemVerilogParser.RULE_pp_call_arg);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4048;
			this.match(SystemVerilogParser.PP_CALL_ARG);
			this.state = 4049;
			this.match(SystemVerilogParser.PPCL_IDENT);
			this.state = 4054;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.PPCL_COM) {
				{
				{
				this.state = 4050;
				this.match(SystemVerilogParser.PPCL_COM);
				this.state = 4051;
				this.match(SystemVerilogParser.PPCL_IDENT);
				}
				}
				this.state = 4056;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4057;
			this.match(SystemVerilogParser.PPCL_CL_PRN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pp_ifdef(): Pp_ifdefContext {
		let _localctx: Pp_ifdefContext = new Pp_ifdefContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, SystemVerilogParser.RULE_pp_ifdef);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4059;
			_la = this._input.LA(1);
			if (!(_la === SystemVerilogParser.PP_IFDEF || _la === SystemVerilogParser.PP_IFNDEF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4060;
			this.match(SystemVerilogParser.PP_IDENT);
			this.state = 4062;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.PP_IFDEF || _la === SystemVerilogParser.PP_IFNDEF) {
				{
				this.state = 4061;
				this.pp_ifdef();
				}
			}

			this.state = 4071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SystemVerilogParser.PP_ELIF) {
				{
				{
				this.state = 4064;
				this.match(SystemVerilogParser.PP_ELIF);
				this.state = 4065;
				this.match(SystemVerilogParser.PP_IDENT);
				this.state = 4067;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.PP_IFDEF || _la === SystemVerilogParser.PP_IFNDEF) {
					{
					this.state = 4066;
					this.pp_ifdef();
					}
				}

				}
				}
				this.state = 4073;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SystemVerilogParser.PP_ELSE) {
				{
				this.state = 4074;
				this.match(SystemVerilogParser.PP_ELSE);
				this.state = 4076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SystemVerilogParser.PP_IFDEF || _la === SystemVerilogParser.PP_IFNDEF) {
					{
					this.state = 4075;
					this.pp_ifdef();
					}
				}

				}
			}

			this.state = 4080;
			this.match(SystemVerilogParser.PP_ENDIF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 199:
			return this.event_expression_sempred(_localctx as Event_expressionContext, predIndex);

		case 260:
			return this.constant_expression_sempred(_localctx as Constant_expressionContext, predIndex);

		case 268:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);
		}
		return true;
	}
	private event_expression_sempred(_localctx: Event_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);

		case 1:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private constant_expression_sempred(_localctx: Constant_expressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);

		case 3:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.precpred(this._ctx, 4);

		case 5:
			return this.precpred(this._ctx, 2);

		case 6:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 8;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0104\u0FF5\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x03\x02\x05\x02\u0280\n\x02\x03\x02\x07\x02\u0283\n\x02" +
		"\f\x02\x0E\x02\u0286\v\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x05\x03\u028E\n\x03\x03\x04\x03\x04\x05\x04\u0292\n\x04\x03\x04\x03" +
		"\x04\x07\x04\u0296\n\x04\f\x04\x0E\x04\u0299\v\x04\x03\x04\x05\x04\u029C" +
		"\n\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x05\x05\u02A3\n\x05\x03" +
		"\x05\x03\x05\x07\x05\u02A7\n\x05\f\x05\x0E\x05\u02AA\v\x05\x03\x05\x05" +
		"\x05\u02AD\n\x05\x03\x05\x05\x05\u02B0\n\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x05\x06\u02B6\n\x06\x03\x06\x07\x06\u02B9\n\x06\f\x06\x0E\x06\u02BC" +
		"\v\x06\x03\x06\x03\x06\x03\x06\x05\x06\u02C1\n\x06\x03\x06\x03\x06\x05" +
		"\x06\u02C5\n\x06\x03\x06\x07\x06\u02C8\n\x06\f\x06\x0E\x06\u02CB\v\x06" +
		"\x03\x06\x03\x06\x03\x06\x05\x06\u02D0\n\x06\x03\x06\x03\x06\x05\x06\u02D4" +
		"\n\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\u02DC\n" +
		"\x06\x03\x06\x07\x06\u02DF\n\x06\f\x06\x0E\x06\u02E2\v\x06\x03\x06\x03" +
		"\x06\x03\x06\x05\x06\u02E7\n\x06\x05\x06\u02E9\n\x06\x03\x07\x03\x07\x05" +
		"\x07\u02ED\n\x07\x03\x07\x07\x07\u02F0\n\x07\f\x07\x0E\x07\u02F3\v\x07" +
		"\x03\x07\x03\x07\x03\x07\x05\x07\u02F8\n\x07\x03\x07\x03\x07\x05\x07\u02FC" +
		"\n\x07\x03\x07\x07\x07\u02FF\n\x07\f\x07\x0E\x07\u0302\v\x07\x03\x07\x03" +
		"\x07\x03\x07\x05\x07\u0307\n\x07\x03\b\x03\b\x05\b\u030B\n\b\x03\b\x03" +
		"\b\x07\b\u030F\n\b\f\b\x0E\b\u0312\v\b\x03\b\x05\b\u0315\n\b\x03\b\x03" +
		"\b\x03\b\x03\t\x03\t\x05\t\u031C\n\t\x03\t\x03\t\x07\t\u0320\n\t\f\t\x0E" +
		"\t\u0323\v\t\x03\t\x05\t\u0326\n\t\x03\t\x05\t\u0329\n\t\x03\t\x03\t\x03" +
		"\n\x05\n\u032E\n\n\x03\n\x03\n\x05\n\u0332\n\n\x03\n\x03\n\x05\n\u0336" +
		"\n\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x05\n\u033E\n\n\x05\n\u0340\n" +
		"\n\x03\n\x03\n\x03\n\x03\n\x07\n\u0346\n\n\f\n\x0E\n\u0349\v\n\x05\n\u034B" +
		"\n\n\x03\n\x03\n\x07\n\u034F\n\n\f\n\x0E\n\u0352\v\n\x03\n\x03\n\x03\n" +
		"\x05\n\u0357\n\n\x03\v\x03\v\x05\v\u035B\n\v\x03\f\x03\f\x03\f\x03\f\x05" +
		"\f\u0361\n\f\x03\f\x03\f\x03\f\x03\f\x07\f\u0367\n\f\f\f\x0E\f\u036A\v" +
		"\f\x05\f\u036C\n\f\x03\f\x03\f\x07\f\u0370\n\f\f\f\x0E\f\u0373\v\f\x03" +
		"\f\x03\f\x03\f\x05\f\u0378\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x05\r\u0383\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x05\x0F\u038C\n\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u0391" +
		"\n\x0F\x03\x0F\x07\x0F\u0394\n\x0F\f\x0F\x0E\x0F\u0397\v\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x05\x0F\u039C\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10" +
		"\u03A2\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x05\x10\u03B8\n\x10\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x07\x11\u03BF\n\x11\f\x11\x0E\x11\u03C2\v\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11\u03CB\n\x11\f" +
		"\x11\x0E\x11\u03CE\v\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11" +
		"\u03D5\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u03DB\n\x12\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x07\x13\u03E1\n\x13\f\x13\x0E\x13\u03E4\v\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\u03EC\n\x14\f" +
		"\x14\x0E\x14\u03EF\v\x14\x05\x14\u03F1\n\x14\x03\x14\x03\x14\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x05\x15\u03FA\n\x15\x03\x16\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u0403\n\x16\x03\x17\x03\x17\x03" +
		"\x17\x03\x17\x07\x17\u0409\n\x17\f\x17\x0E\x17\u040C\v\x17\x07\x17\u040E" +
		"\n\x17\f\x17\x0E\x17\u0411\v\x17\x05\x17\u0413\n\x17\x03\x18\x03\x18\x03" +
		"\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x05" +
		"\x1B\u0420\n\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0425\n\x1B\x05\x1B\u0427" +
		"\n\x1B\x03\x1C\x03\x1C\x05\x1C\u042B\n\x1C\x03\x1C\x03\x1C\x07\x1C\u042F" +
		"\n\x1C\f\x1C\x0E\x1C\u0432\v\x1C\x03\x1C\x03\x1C\x05\x1C\u0436\n\x1C\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u043D\n\x1D\x03\x1D\x03\x1D" +
		"\x05\x1D\u0441\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05" +
		"\x1D\u0449\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D" +
		"\u0451\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u0459" +
		"\n\x1D\x03\x1D\x05\x1D\u045C\n\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u0469\n\x1F" +
		"\x03 \x03 \x03 \x03 \x05 \u046F\n \x03!\x03!\x03!\x05!\u0474\n!\x03\"" +
		"\x03\"\x05\"\u0478\n\"\x03#\x03#\x03#\x03#\x05#\u047E\n#\x03$\x03$\x03" +
		"$\x03$\x03%\x03%\x03%\x05%\u0487\n%\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x05&\u0492\n&\x03\'\x03\'\x03\'\x03\'\x05\'\u0498\n\'\x03" +
		"(\x03(\x03(\x03(\x05(\u049E\n(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05" +
		")\u04A7\n)\x03*\x07*\u04AA\n*\f*\x0E*\u04AD\v*\x03*\x03*\x03*\x07*\u04B2" +
		"\n*\f*\x0E*\u04B5\v*\x03*\x03*\x03*\x03*\x05*\u04BB\n*\x03*\x03*\x05*" +
		"\u04BF\n*\x03+\x07+\u04C2\n+\f+\x0E+\u04C5\v+\x03+\x03+\x07+\u04C9\n+" +
		"\f+\x0E+\u04CC\v+\x03+\x03+\x03+\x03+\x07+\u04D2\n+\f+\x0E+\u04D5\v+\x03" +
		"+\x03+\x03+\x03+\x03+\x07+\u04DC\n+\f+\x0E+\u04DF\v+\x03+\x03+\x03+\x03" +
		"+\x07+\u04E5\n+\f+\x0E+\u04E8\v+\x03+\x03+\x03+\x07+\u04ED\n+\f+\x0E+" +
		"\u04F0\v+\x03+\x05+\u04F3\n+\x03,\x03,\x03,\x03,\x05,\u04F9\n,\x03,\x05" +
		",\u04FC\n,\x03,\x03,\x03-\x03-\x05-\u0502\n-\x03.\x03.\x03/\x03/\x05/" +
		"\u0508\n/\x030\x050\u050B\n0\x030\x030\x050\u050F\n0\x031\x031\x051\u0513" +
		"\n1\x032\x032\x052\u0517\n2\x032\x032\x032\x052\u051C\n2\x032\x052\u051F" +
		"\n2\x032\x032\x072\u0523\n2\f2\x0E2\u0526\v2\x032\x032\x032\x032\x032" +
		"\x032\x032\x052\u052F\n2\x032\x052\u0532\n2\x032\x072\u0535\n2\f2\x0E" +
		"2\u0538\v2\x032\x032\x032\x052\u053D\n2\x033\x053\u0540\n3\x033\x033\x03" +
		"3\x033\x034\x034\x074\u0548\n4\f4\x0E4\u054B\v4\x034\x034\x035\x035\x03" +
		"5\x035\x035\x035\x035\x055\u0556\n5\x036\x036\x036\x076\u055B\n6\f6\x0E" +
		"6\u055E\v6\x037\x037\x037\x037\x057\u0564\n7\x037\x037\x037\x038\x058" +
		"\u056A\n8\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038" +
		"\x038\x038\x038\x038\x038\x058\u057D\n8\x038\x038\x038\x038\x038\x058" +
		"\u0584\n8\x039\x039\x039\x039\x039\x03:\x03:\x03:\x07:\u058E\n:\f:\x0E" +
		":\u0591\v:\x03:\x05:\u0594\n:\x03;\x03;\x03;\x07;\u0599\n;\f;\x0E;\u059C" +
		"\v;\x03<\x03<\x05<\u05A0\n<\x03=\x03=\x03=\x03=\x05=\u05A6\n=\x03>\x05" +
		">\u05A9\n>\x03>\x05>\u05AC\n>\x03>\x03>\x03>\x03>\x03?\x03?\x03@\x03@" +
		"\x03@\x03@\x05@\u05B8\n@\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A" +
		"\x03A\x03A\x03A\x03A\x05A\u05C7\nA\x03B\x03B\x03B\x03B\x03B\x05B\u05CE" +
		"\nB\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u05D7\nC\x03D\x03D\x03D\x03" +
		"D\x03D\x03D\x03D\x05D\u05E0\nD\x03E\x03E\x03E\x03E\x03F\x03F\x03F\x03" +
		"F\x03F\x03F\x03F\x03F\x05F\u05EE\nF\x03G\x03G\x03G\x03G\x03G\x03G\x03" +
		"G\x03G\x05G\u05F8\nG\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03I\x03I\x03" +
		"I\x03I\x03J\x05J\u0606\nJ\x03J\x05J\u0609\nJ\x03J\x05J\u060C\nJ\x03J\x03" +
		"J\x03J\x03J\x03J\x03J\x03J\x05J\u0615\nJ\x03K\x03K\x03K\x03K\x07K\u061B" +
		"\nK\fK\x0EK\u061E\vK\x03K\x03K\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03" +
		"L\x05L\u062A\nL\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x05" +
		"M\u0636\nM\x03N\x03N\x03N\x03N\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03" +
		"O\x03O\x03O\x03O\x03O\x03O\x05O\u0649\nO\x03O\x03O\x03O\x03O\x03O\x03" +
		"O\x05O\u0651\nO\x03O\x03O\x05O\u0655\nO\x03P\x03P\x03P\x03P\x07P\u065B" +
		"\nP\fP\x0EP\u065E\vP\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03" +
		"P\x03P\x03P\x05P\u066C\nP\x03P\x03P\x03P\x05P\u0671\nP\x03Q\x03Q\x03Q" +
		"\x03Q\x03Q\x03Q\x05Q\u0679\nQ\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u0681" +
		"\nR\x03R\x03R\x05R\u0685\nR\x03R\x03R\x03R\x03R\x03R\x05R\u068C\nR\x03" +
		"R\x03R\x03R\x03R\x05R\u0692\nR\x03S\x03S\x03T\x03T\x03T\x03T\x03T\x03" +
		"T\x05T\u069C\nT\x03U\x03U\x05U\u06A0\nU\x03U\x07U\u06A3\nU\fU\x0EU\u06A6" +
		"\vU\x03U\x03U\x05U\u06AA\nU\x03U\x03U\x03U\x03U\x05U\u06B0\nU\x05U\u06B2" +
		"\nU\x03U\x03U\x06U\u06B6\nU\rU\x0EU\u06B7\x03U\x03U\x07U\u06BC\nU\fU\x0E" +
		"U\u06BF\vU\x03U\x03U\x03U\x03U\x03U\x03U\x07U\u06C7\nU\fU\x0EU\u06CA\v" +
		"U\x03U\x03U\x07U\u06CE\nU\fU\x0EU\u06D1\vU\x03U\x03U\x03U\x03U\x05U\u06D7" +
		"\nU\x03U\x03U\x07U\u06DB\nU\fU\x0EU\u06DE\vU\x03U\x03U\x05U\u06E2\nU\x03" +
		"U\x03U\x05U\u06E6\nU\x03U\x03U\x07U\u06EA\nU\fU\x0EU\u06ED\vU\x03U\x03" +
		"U\x03U\x03U\x05U\u06F3\nU\x03V\x03V\x05V\u06F7\nV\x03W\x05W\u06FA\nW\x03" +
		"W\x07W\u06FD\nW\fW\x0EW\u0700\vW\x03X\x03X\x05X\u0704\nX\x03X\x03X\x05" +
		"X\u0708\nX\x03X\x05X\u070B\nX\x03X\x03X\x05X\u070F\nX\x05X\u0711\nX\x03" +
		"Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0718\nY\x03Y\x03Y\x05Y\u071C\nY\x03Y\x03Y" +
		"\x05Y\u0720\nY\x03Z\x03Z\x03Z\x03[\x03[\x05[\u0727\n[\x03[\x03[\x03[\x05" +
		"[\u072C\n[\x07[\u072E\n[\f[\x0E[\u0731\v[\x03\\\x03\\\x03]\x03]\x05]\u0737" +
		"\n]\x03]\x03]\x03]\x05]\u073C\n]\x03^\x03^\x03_\x03_\x03_\x05_\u0743\n" +
		"_\x03`\x03`\x03`\x05`\u0748\n`\x03a\x03a\x03a\x05a\u074D\na\x05a\u074F" +
		"\na\x03b\x03b\x05b\u0753\nb\x03c\x05c\u0756\nc\x03c\x03c\x03c\x03c\x03" +
		"d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x05d\u0766\nd\x03e\x03" +
		"e\x03e\x03e\x03e\x05e\u076D\ne\x03f\x03f\x03f\x07f\u0772\nf\ff\x0Ef\u0775" +
		"\vf\x03g\x03g\x03g\x07g\u077A\ng\fg\x0Eg\u077D\vg\x03h\x03h\x07h\u0781" +
		"\nh\fh\x0Eh\u0784\vh\x03h\x03h\x03h\x07h\u0789\nh\fh\x0Eh\u078C\vh\x07" +
		"h\u078E\nh\fh\x0Eh\u0791\vh\x03i\x03i\x03i\x07i\u0796\ni\fi\x0Ei\u0799" +
		"\vi\x03j\x03j\x03j\x07j\u079E\nj\fj\x0Ej\u07A1\vj\x03k\x03k\x07k\u07A5" +
		"\nk\fk\x0Ek\u07A8\vk\x03k\x03k\x07k\u07AC\nk\fk\x0Ek\u07AF\vk\x07k\u07B1" +
		"\nk\fk\x0Ek\u07B4\vk\x03l\x03l\x07l\u07B8\nl\fl\x0El\u07BB\vl\x03l\x03" +
		"l\x05l\u07BF\nl\x03l\x03l\x07l\u07C3\nl\fl\x0El\u07C6\vl\x03l\x03l\x05" +
		"l\u07CA\nl\x07l\u07CC\nl\fl\x0El\u07CF\vl\x03m\x03m\x03m\x07m\u07D4\n" +
		"m\fm\x0Em\u07D7\vm\x03n\x03n\x03n\x07n\u07DC\nn\fn\x0En\u07DF\vn\x03o" +
		"\x03o\x07o\u07E3\no\fo\x0Eo\u07E6\vo\x03o\x03o\x03o\x07o\u07EB\no\fo\x0E" +
		"o\u07EE\vo\x07o\u07F0\no\fo\x0Eo\u07F3\vo\x03p\x03p\x07p\u07F7\np\fp\x0E" +
		"p\u07FA\vp\x03p\x03p\x05p\u07FE\np\x03p\x03p\x07p\u0802\np\fp\x0Ep\u0805" +
		"\vp\x03p\x03p\x05p\u0809\np\x07p\u080B\np\fp\x0Ep\u080E\vp\x03q\x03q\x03" +
		"q\x03q\x03r\x03r\x07r\u0816\nr\fr\x0Er\u0819\vr\x03r\x03r\x05r\u081D\n" +
		"r\x03s\x03s\x07s\u0821\ns\fs\x0Es\u0824\vs\x03s\x03s\x05s\u0828\ns\x03" +
		"t\x03t\x03t\x03t\x03u\x03u\x07u\u0830\nu\fu\x0Eu\u0833\vu\x03u\x03u\x05" +
		"u\u0837\nu\x03u\x03u\x03u\x07u\u083C\nu\fu\x0Eu\u083F\vu\x03u\x03u\x05" +
		"u\u0843\nu\x03u\x03u\x03u\x05u\u0848\nu\x05u\u084A\nu\x03v\x05v\u084D" +
		"\nv\x03v\x03v\x03v\x03v\x03v\x05v\u0854\nv\x03v\x03v\x05v\u0858\nv\x03" +
		"w\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x05w\u0862\nw\x03x\x03x\x03x\x03" +
		"x\x03x\x03x\x03x\x03x\x05x\u086C\nx\x03y\x03y\x03y\x03y\x03y\x05y\u0873" +
		"\ny\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x05z\u087C\nz\x03{\x03{\x03{\x03" +
		"{\x05{\u0882\n{\x03|\x03|\x03|\x03|\x05|\u0888\n|\x03|\x03|\x03}\x03}" +
		"\x03}\x03~\x03~\x05~\u0891\n~\x03\x7F\x03\x7F\x05\x7F\u0895\n\x7F\x03" +
		"\x7F\x03\x7F\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05\x80\u089E\n\x80" +
		"\x03\x80\x03\x80\x03\x80\x07\x80\u08A3\n\x80\f\x80\x0E\x80\u08A6\v\x80" +
		"\x03\x80\x07\x80\u08A9\n\x80\f\x80\x0E\x80\u08AC\v\x80\x03\x80\x03\x80" +
		"\x03\x80\x05\x80\u08B1\n\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05" +
		"\x80\u08B8\n\x80\x03\x80\x03\x80\x03\x80\x05\x80\u08BD\n\x80\x03\x80\x03" +
		"\x80\x03\x80\x07\x80\u08C2\n\x80\f\x80\x0E\x80\u08C5\v\x80\x03\x80\x07" +
		"\x80\u08C8\n\x80\f\x80\x0E\x80\u08CB\v\x80\x03\x80\x03\x80\x03\x80\x05" +
		"\x80\u08D0\n\x80\x05\x80\u08D2\n\x80\x03\x81\x03\x81\x03\x81\x03\x81\x03" +
		"\x81\x05\x81\u08D9\n\x81\x03\x81\x05\x81\u08DC\n\x81\x03\x82\x03\x82\x05" +
		"\x82\u08E0\n\x82\x03\x82\x03\x82\x03\x83\x03\x83\x03\x83\x03\x83\x05\x83" +
		"\u08E8\n\x83\x03\x83\x03\x83\x03\x83\x07\x83\u08ED\n\x83\f\x83\x0E\x83" +
		"\u08F0\v\x83\x03\x83\x07\x83\u08F3\n\x83\f\x83\x0E\x83\u08F6\v\x83\x03" +
		"\x83\x03\x83\x03\x83\x05\x83\u08FB\n\x83\x03\x83\x03\x83\x03\x83\x03\x83" +
		"\x05\x83\u0901\n\x83\x03\x83\x03\x83\x03\x83\x05\x83\u0906\n\x83\x03\x83" +
		"\x03\x83\x03\x83\x07\x83\u090B\n\x83\f\x83\x0E\x83\u090E\v\x83\x03\x83" +
		"\x07\x83\u0911\n\x83\f\x83\x0E\x83\u0914\v";
	private static readonly _serializedATNSegment1: string =
		"\x83\x03\x83\x03\x83\x03\x83\x05\x83\u0919\n\x83\x05\x83\u091B\n\x83\x03" +
		"\x84\x03\x84\x05\x84\u091F\n\x84\x03\x85\x03\x85\x03\x85\x07\x85\u0924" +
		"\n\x85\f\x85\x0E\x85\u0927\v\x85\x03\x86\x05\x86\u092A\n\x86\x03\x86\x05" +
		"\x86\u092D\n\x86\x03\x86\x03\x86\x03\x86\x07\x86\u0932\n\x86\f\x86\x0E" +
		"\x86\u0935\v\x86\x03\x86\x03\x86\x05\x86\u0939\n\x86\x03\x87\x03\x87\x03" +
		"\x87\x05\x87\u093E\n\x87\x03\x88\x03\x88\x05\x88\u0942\n\x88\x03\x88\x03" +
		"\x88\x03\x88\x03\x88\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x05" +
		"\x89\u094E\n\x89\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A" +
		"\x05\x8A\u0957\n\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x07\x8B\u095D\n\x8B" +
		"\f\x8B\x0E\x8B\u0960\v\x8B\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8C\x03" +
		"\x8C\x03\x8C\x07\x8C\u0969\n\x8C\f\x8C\x0E\x8C\u096C\v\x8C\x03\x8C\x03" +
		"\x8C\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u0973\n\x8D\x03\x8E\x03\x8E\x03\x8E" +
		"\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x07\x8F\u097C\n\x8F\f\x8F\x0E\x8F\u097F" +
		"\v\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90\x05\x90\u0986\n\x90\x03" +
		"\x90\x03\x90\x05\x90\u098A\n\x90\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91" +
		"\x03\x92\x03\x92\x05\x92\u0993\n\x92\x03\x93\x03\x93\x03\x94\x03\x94\x03" +
		"\x94\x05\x94\u099A\n\x94\x03\x94\x03\x94\x05\x94\u099E\n\x94\x03\x95\x03" +
		"\x95\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96\u09A8\n\x96" +
		"\x03\x97\x03\x97\x05\x97\u09AC\n\x97\x03\x97\x03\x97\x03\x97\x07\x97\u09B1" +
		"\n\x97\f\x97\x0E\x97\u09B4\v\x97\x03\x97\x03\x97\x03\x98\x03\x98\x03\x98" +
		"\x05\x98\u09BB\n\x98\x03\x98\x03\x98\x03\x99\x03\x99\x03\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x07\x9A\u09C5\n\x9A\f\x9A\x0E\x9A\u09C8\v\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A\x03\x9A\x07\x9A\u09CE\n\x9A\f\x9A\x0E\x9A\u09D1\v\x9A\x05" +
		"\x9A\u09D3\n\x9A\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C" +
		"\u09DB\n\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u09E0\n\x9C\x03\x9D\x03\x9D" +
		"\x03\x9D\x05\x9D\u09E5\n\x9D\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x07\x9E\u09EB" +
		"\n\x9E\f\x9E\x0E\x9E\u09EE\v\x9E\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0" +
		"\x03\xA0\x07\xA0\u09F6\n\xA0\f\xA0\x0E\xA0\u09F9\v\xA0\x03\xA0\x03\xA0" +
		"\x03\xA0\x03\xA0\x07\xA0\u09FF\n\xA0\f\xA0\x0E\xA0\u0A02\v\xA0\x05\xA0" +
		"\u0A04\n\xA0\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0A0C" +
		"\n\xA2\x03\xA2\x05\xA2\u0A0F\n\xA2\x03\xA2\x05\xA2\u0A12\n\xA2\x03\xA3" +
		"\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x03\xA5\x03\xA5" +
		"\x07\xA5\u0A1E\n\xA5\f\xA5\x0E\xA5\u0A21\v\xA5\x03\xA5\x03\xA5\x03\xA6" +
		"\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6" +
		"\x03\xA7\x05\xA7\u0A30\n\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03" +
		"\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x05" +
		"\xA8\u0A40\n\xA8\x03\xA9\x03\xA9\x05\xA9\u0A44\n\xA9\x03\xAA\x03\xAA\x03" +
		"\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x05\xAA\u0A4D\n\xAA\x03\xAB\x03\xAB" +
		"\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x07\xAB\u0A55\n\xAB\f\xAB\x0E\xAB\u0A58" +
		"\v\xAB\x03\xAB\x03\xAB\x03\xAC\x03\xAC\x03\xAC\x07\xAC\u0A5F\n\xAC\f\xAC" +
		"\x0E\xAC\u0A62\v\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0A69" +
		"\n\xAC\x03\xAC\x05\xAC\u0A6C\n\xAC\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05" +
		"\xAD\u0A72\n\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0A77\n\xAD\x03\xAD\x07" +
		"\xAD\u0A7A\n\xAD\f\xAD\x0E\xAD\u0A7D\v\xAD\x03\xAD\x03\xAD\x03\xAD\x05" +
		"\xAD\u0A82\n\xAD\x05\xAD\u0A84\n\xAD\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x03" +
		"\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u0A8E\n\xAF\x03\xAF\x03\xAF\x03\xAF" +
		"\x05\xAF\u0A93\n\xAF\x03\xB0\x03\xB0\x03\xB0\x07\xB0\u0A98\n\xB0\f\xB0" +
		"\x0E\xB0\u0A9B\v\xB0\x03\xB1\x03\xB1\x03\xB1\x07\xB1\u0AA0\n\xB1\f\xB1" +
		"\x0E\xB1\u0AA3\v\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x07" +
		"\xB2\u0AAB\n\xB2\f\xB2\x0E\xB2\u0AAE\v\xB2\x03\xB2\x03\xB2\x03\xB3\x03" +
		"\xB3\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x03\xB5\x03" +
		"\xB6\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03" +
		"\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u0ACD" +
		"\n\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u0AD5\n" +
		"\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x03\xBA\x03\xBA\x03" +
		"\xBA\x05\xBA\u0AE0\n\xBA\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03\xBB\x03\xBB" +
		"\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB" +
		"\u0AF0\n\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x05\xBD\u0AF8" +
		"\n\xBD\x03\xBD\x03\xBD\x05\xBD\u0AFC\n\xBD\x03\xBE\x03\xBE\x03\xBE\x05" +
		"\xBE\u0B01\n\xBE\x03\xBE\x07\xBE\u0B04\n\xBE\f\xBE\x0E\xBE\u0B07\v\xBE" +
		"\x03\xBE\x07\xBE\u0B0A\n\xBE\f\xBE\x0E\xBE\u0B0D\v\xBE\x03\xBE\x03\xBE" +
		"\x03\xBE\x05\xBE\u0B12\n\xBE\x03\xBF\x03\xBF\x05\xBF\u0B16\n\xBF\x03\xC0" +
		"\x03\xC0\x03\xC0\x05\xC0\u0B1B\n\xC0\x03\xC0\x03\xC0\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x05\xC1\u0B36\n\xC1\x03\xC2\x03\xC2\x03\xC3\x03\xC3" +
		"\x05\xC3\u0B3C\n\xC3\x03\xC4\x03\xC4\x03\xC4\x07\xC4\u0B41\n\xC4\f\xC4" +
		"\x0E\xC4\u0B44\v\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x03\xC6\x03" +
		"\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x05\xC6\u0B51\n\xC6\x03\xC7\x03\xC7" +
		"\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x05\xC7\u0B5A\n\xC7\x03\xC8\x03" +
		"\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x05\xC8\u0B6B\n\xC8\x03\xC9\x03\xC9" +
		"\x05\xC9\u0B6F\n\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u0B74\n\xC9\x03\xC9" +
		"\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u0B7A\n\xC9\x03\xC9\x03\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x03\xC9\x07\xC9\u0B82\n\xC9\f\xC9\x0E\xC9\u0B85\v\xC9\x03" +
		"\xCA\x03\xCA\x03\xCA\x05\xCA\u0B8A\n\xCA\x03\xCB\x03\xCB\x05\xCB\u0B8E" +
		"\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B95\n\xCB\x03" +
		"\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x03" +
		"\xCC\x03\xCC\x03\xCC\x03\xCC\x03\xCC\x07\xCC\u0BA5\n\xCC\f\xCC\x0E\xCC" +
		"\u0BA8\v\xCC\x03\xCC\x03\xCC\x03\xCC\x05\xCC\u0BAD\n\xCC\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u0BB5\n\xCD\x03\xCD\x03\xCD\x03" +
		"\xCD\x05\xCD\u0BBA\n\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE" +
		"\x03\xCE\x05\xCE\u0BC3\n\xCE\x03\xCF\x05\xCF\u0BC6\n\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x07\xCF\u0BD4\n\xCF\f\xCF\x0E\xCF\u0BD7\v\xCF\x03\xCF\x03\xCF" +
		"\x05\xCF\u0BDB\n\xCF\x03\xD0\x03\xD0\x03\xD1\x03\xD1\x03\xD1\x07\xD1\u0BE2" +
		"\n\xD1\f\xD1\x0E\xD1\u0BE5\v\xD1\x03\xD2\x03\xD2\x05\xD2\u0BE9\n\xD2\x03" +
		"\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD4\x05\xD4\u0BF0\n\xD4\x03\xD4\x03\xD4" +
		"\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x07\xD4\u0BF8\n\xD4\f\xD4\x0E\xD4\u0BFB" +
		"\v\xD4\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u0C00\n\xD4\x03\xD4\x03\xD4\x03" +
		"\xD4\x03\xD4\x03\xD4\x03\xD4\x03\xD4\x07\xD4\u0C09\n\xD4\f\xD4\x0E\xD4" +
		"\u0C0C\v\xD4\x03\xD4\x03\xD4\x05\xD4\u0C10\n\xD4\x03\xD5\x03\xD5\x03\xD6" +
		"\x03\xD6\x03\xD6\x07\xD6\u0C17\n\xD6\f\xD6\x0E\xD6\u0C1A\v\xD6\x03\xD6" +
		"\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x05\xD6\u0C21\n\xD6\x03\xD6\x05\xD6\u0C24" +
		"\n\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0C2C\n" +
		"\xD7\x03\xD7\x05\xD7\u0C2F\n\xD7\x03\xD8\x03\xD8\x03\xD9\x03\xD9\x03\xD9" +
		"\x07\xD9\u0C36\n\xD9\f\xD9\x0E\xD9\u0C39\v\xD9\x03\xDA\x03\xDA\x03\xDB" +
		"\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u0C44\n\xDB\x03" +
		"\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03" +
		"\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x07\xDB\u0C56\n\xDB" +
		"\f\xDB\x0E\xDB\u0C59\v\xDB\x03\xDB\x03\xDB\x05\xDB\u0C5D\n\xDB\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0C70" +
		"\n\xDC\x03\xDC\x03\xDC\x05\xDC\u0C74\n\xDC\x03\xDC\x03\xDC\x05\xDC\u0C78" +
		"\n\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x05\xDC\u0C8D\n\xDC\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x07" +
		"\xDD\u0C93\n\xDD\f\xDD\x0E\xDD\u0C96\v\xDD\x05\xDD\u0C98\n\xDD\x03\xDE" +
		"\x05\xDE\u0C9B\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x03\xDE\x03\xDE\x07\xDE\u0CA6\n\xDE\f\xDE\x0E\xDE\u0CA9\v\xDE\x03" +
		"\xDF\x03\xDF\x03\xDF\x07\xDF\u0CAE\n\xDF\f\xDF\x0E\xDF\u0CB1\v\xDF\x03" +
		"\xE0\x03\xE0\x03\xE0\x05\xE0\u0CB6\n\xE0\x03\xE1\x05\xE1\u0CB9\n\xE1\x03" +
		"\xE1\x03\xE1\x07\xE1\u0CBD\n\xE1\f\xE1\x0E\xE1\u0CC0\v\xE1\x03\xE2\x03" +
		"\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x05\xE2\u0CCA\n\xE2" +
		"\x03\xE3\x03\xE3\x05\xE3\u0CCE\n\xE3\x03\xE4\x03\xE4\x03\xE4\x05\xE4\u0CD3" +
		"\n\xE4\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x05\xE6\u0CDB\n" +
		"\xE6\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u0CE0\n\xE7\x03\xE8\x03\xE8\x03\xE8" +
		"\x03\xE8\x03\xE8\x03\xE8\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEB\x03\xEB\x03\xEB" +
		"\x05\xEB\u0CF7\n\xEB\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03" +
		"\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x05\xEC\u0D07" +
		"\n\xEC\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED" +
		"\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x05\xED\u0D17\n\xED\x03" +
		"\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03" +
		"\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x05\xEE\u0D27\n\xEE\x03\xEF\x03\xEF" +
		"\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x05\xEF\u0D32" +
		"\n\xEF\x03\xF0\x03\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x07\xF1\u0D3A\n" +
		"\xF1\f\xF1\x0E\xF1\u0D3D\v\xF1\x03\xF1\x03\xF1\x03\xF2\x03\xF2\x03\xF2" +
		"\x03\xF2\x07\xF2\u0D45\n\xF2\f\xF2\x0E\xF2\u0D48\v\xF2\x03\xF2\x03\xF2" +
		"\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4" +
		"\x03\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5" +
		"\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5\u0D63\n\xF5\x03\xF6\x03" +
		"\xF6\x03\xF6\x03\xF7\x03\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05" +
		"\xF8\u0D6F\n\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x05\xF9\u0D76" +
		"\n\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x05\xF9\u0D7D\n\xF9\x03" +
		"\xF9\x03\xF9\x05\xF9\u0D81\n\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA" +
		"\u0D87\n\xFA\x03\xFA\x05\xFA\u0D8A\n\xFA\x03\xFB\x03\xFB\x03\xFC\x03\xFC" +
		"\x03\xFD\x05\xFD\u0D91\n\xFD\x03\xFD\x03\xFD\x05\xFD\u0D95\n\xFD\x07\xFD" +
		"\u0D97\n\xFD\f\xFD\x0E\xFD\u0D9A\v\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD" +
		"\x03\xFD\x05\xFD\u0DA1\n\xFD\x03\xFD\x03\xFD\x07\xFD\u0DA5\n\xFD\f\xFD" +
		"\x0E\xFD\u0DA8\v\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u0DAE\n\xFD" +
		"\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u0DB6\n\xFD\x03" +
		"\xFD\x03\xFD\x07\xFD\u0DBA\n\xFD\f\xFD\x0E\xFD\u0DBD\v\xFD\x05\xFD\u0DBF" +
		"\n\xFD\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFF\x03\xFF\x05\xFF\u0DC7\n" +
		"\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x05\xFF\u0DCD\n\xFF\x03\u0100\x03" +
		"\u0100\x03\u0100\x03\u0100\x03\u0100\x05\u0100\u0DD4\n\u0100\x03\u0100" +
		"\x05\u0100\u0DD7\n\u0100\x03\u0101\x03\u0101\x05\u0101\u0DDB\n\u0101\x03" +
		"\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u0DE2\n\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u0DE9\n\u0102" +
		"\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u0DEF\n\u0103\x03\u0103" +
		"\x05\u0103\u0DF2\n\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x05\u0104\u0DF9\n\u0104\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x05\u0105\u0E01\n\u0105\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x03\u0106\x05\u0106\u0E08\n\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106" +
		"\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x07\u0106" +
		"\u0E14\n\u0106\f\u0106\x0E\u0106\u0E17\v\u0106\x03\u0107\x03\u0107\x03" +
		"\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x05\u0107\u0E20\n\u0107" +
		"\x03\u0108\x03\u0108\x03\u0108\x05\u0108\u0E25\n\u0108\x03\u0109\x03\u0109" +
		"\x03\u0109\x05\u0109\u0E2A\n\u0109\x03\u010A\x03\u010A\x05\u010A\u0E2E" +
		"\n\u010A\x03\u010B\x03\u010B\x05\u010B\u0E32\n\u010B\x03\u010C\x03\u010C" +
		"\x03\u010C\x03\u010C\x03\u010D\x03\u010D\x03\u010D\x03\u010D\x03\u010D" +
		"\x03\u010D\x03\u010D\x03\u010D\x05\u010D\u0E40\n\u010D\x03\u010E\x03\u010E" +
		"\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E" +
		"\x03\u010E\x03\u010E\x05\u010E\u0E4D\n\u010E\x03\u010E\x03\u010E\x03\u010E" +
		"\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E" +
		"\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x03\u010E\x07\u010E" +
		"\u0E5F\n\u010E\f\u010E\x0E\u010E\u0E62\v\u010E\x03\u010F\x03\u010F\x03" +
		"\u010F\x05\u010F\u0E67\n\u010F\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u0E70\n\u0110\x03\u0111\x03\u0111" +
		"\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x03\u0111\x05\u0111\u0E79\n\u0111" +
		"\x03\u0112\x03\u0112\x05\u0112\u0E7D\n\u0112\x03\u0113\x03\u0113\x03\u0113" +
		"\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x03\u0113\x05\u0113\u0E87\n\u0113" +
		"\x03\u0114\x03\u0114\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u0E94\n\u0115\x03\u0115" +
		"\x03\u0115\x05\u0115\u0E98\n\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u0EA2\n\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u0EAA\n\u0115" +
		"\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u0EAF\n\u0116\x03\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116" +
		"\x05\u0116\u0EBA\n\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116" +
		"\x05\u0116\u0EC1\n\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u0ECC\n\u0116\x03\u0117" +
		"\x05\u0117\u0ECF\n\u0117\x03\u0117\x03\u0117\x03\u0117\x03\u0117\x05\u0117" +
		"\u0ED5\n\u0117\x03\u0118\x03\u0118\x05\u0118\u0ED9\n\u0118\x03\u0119\x03" +
		"\u0119\x03\u0119\x03\u0119\x05\u0119\u0EDF\n\u0119\x03\u011A\x03\u011A" +
		"\x03\u011A\x03\u011A\x05\u011A\u0EE5\n\u011A\x03\u011B\x03\u011B\x03\u011C" +
		"\x03\u011C\x03\u011C\x03\u011C\x07\u011C\u0EED\n\u011C\f\u011C\x0E\u011C" +
		"\u0EF0\v\u011C\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x07\u011D\u0EF6" +
		"\n\u011D\f\u011D\x0E\u011D\u0EF9\v\u011D\x03\u011D\x03\u011D\x05\u011D" +
		"\u0EFD\n\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x05\u011D" +
		"\u0F04\n\u011D\x03\u011E\x03\u011E\x03\u011E\x03\u011E\x07\u011E\u0F0A" +
		"\n\u011E\f\u011E\x0E\u011E\u0F0D\v\u011E\x03\u011E\x03\u011E\x05\u011E" +
		"\u0F11\n\u011E\x03\u011E\x03\u011E\x03\u011F\x03\u011F\x03\u011F\x03\u011F" +
		"\x07\u011F\u0F19\n\u011F\f\u011F\x0E\u011F\u0F1C\v\u011F\x03\u0120\x03" +
		"\u0120\x03\u0120\x03\u0120\x07\u0120\u0F22\n\u0120\f\u0120\x0E\u0120\u0F25" +
		"\v\u0120\x03\u0120\x03\u0120\x05\u0120\u0F29\n\u0120\x03\u0120\x03\u0120" +
		"\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121\x03\u0121" +
		"\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0122\x03\u0123\x03\u0123" +
		"\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123\x03\u0123" +
		"\x03\u0123\x05\u0123\u0F43\n\u0123\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x05\u0124\u0F49\n\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x07\u0124\u0F52\n\u0124\f\u0124\x0E\u0124\u0F55\v" +
		"\u0124\x03\u0124\x03\u0124\x05\u0124\u0F59\n\u0124\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x05\u0125\u0F5F\n\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0126\x03\u0126\x05\u0126\u0F66\n\u0126\x03\u0127\x03\u0127\x03\u0127" +
		"\x03\u0127\x05\u0127\u0F6C\n\u0127\x03\u0128\x03\u0128\x03\u0129\x03\u0129" +
		"\x03\u012A\x03\u012A\x03\u012B\x03\u012B\x03\u012C\x03\u012C\x03\u012D" +
		"\x03\u012D\x03\u012E\x03\u012E\x03\u012F\x03\u012F\x03\u012F\x03\u012F" +
		"\x05\u012F\u0F80\n\u012F\x03\u0130\x03\u0130\x03\u0131\x05\u0131\u0F85" +
		"\n\u0131\x03\u0131\x03\u0131\x03\u0132\x05\u0132\u0F8A\n\u0132\x03\u0132" +
		"\x03\u0132\x03\u0132\x03\u0132\x07\u0132\u0F90\n\u0132\f\u0132\x0E\u0132" +
		"\u0F93\v\u0132\x03\u0132\x03\u0132\x03\u0133\x03\u0133\x05\u0133\u0F99" +
		"\n\u0133\x03\u0134\x07\u0134\u0F9C\n\u0134\f\u0134\x0E\u0134\u0F9F\v\u0134" +
		"\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x03\u0135\x03\u0135\x03\u0135\x05\u0135\u0FAB\n\u0135\x03\u0136\x03\u0136" +
		"\x03\u0136\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x03\u0137" +
		"\x03\u0137\x03\u0138\x03\u0138\x03\u0138\x03\u0139\x03\u0139\x03\u0139" +
		"\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x03\u013B\x03\u013B\x03\u013B" +
		"\x03\u013B\x03\u013B\x07\u013B\u0FC6\n\u013B\f\u013B\x0E\u013B\u0FC9\v" +
		"\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013C\x03\u013C\x03\u013C\x03" +
		"\u013D\x03\u013D\x03\u013E\x03\u013E\x03\u013E\x03\u013E\x07\u013E\u0FD7" +
		"\n\u013E\f\u013E\x0E\u013E\u0FDA\v\u013E\x03\u013E\x03\u013E\x03\u013F" +
		"\x03\u013F\x03\u013F\x05\u013F\u0FE1\n\u013F\x03\u013F\x03\u013F\x03\u013F" +
		"\x05\u013F\u0FE6\n\u013F\x07\u013F\u0FE8\n\u013F\f\u013F\x0E\u013F\u0FEB" +
		"\v\u013F\x03\u013F\x03\u013F\x05\u013F\u0FEF\n\u013F\x05\u013F\u0FF1\n" +
		"\u013F\x03\u013F\x03\u013F\x03\u013F\x02\x02\x05\u0190\u020A\u021A\u0140" +
		"\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14" +
		"\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02" +
		"*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02" +
		"F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02" +
		"b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02" +
		"~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02" +
		"\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02" +
		"\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02" +
		"\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02" +
		"\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02" +
		"\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02" +
		"\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02" +
		"\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A" +
		"\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118" +
		"\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126" +
		"\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134" +
		"\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142" +
		"\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150" +
		"\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E" +
		"\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C" +
		"\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A" +
		"\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188" +
		"\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196" +
		"\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4" +
		"\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2" +
		"\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0" +
		"\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE" +
		"\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC" +
		"\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA" +
		"\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8" +
		"\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206" +
		"\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\u0214" +
		"\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02\u0222" +
		"\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02\u0230" +
		"\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02\u023E" +
		"\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02\u024C" +
		"\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02\u025A" +
		"\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02\u0268" +
		"\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02\u0276" +
		"\x02\u0278\x02\u027A\x02\u027C\x02\x02\x14\x03\x02_b\x04\x02EEGH\x04\x02" +
		"==CC\x03\x02EF\x03\x02ij\x03\x02KL\x04\x02\x8E\x8E\xAC\xB7\x03\x0202\x03" +
		"\x02\\^\x03\x02MO\x04\x02\xD1\xD1\xD4\xD4\x03\x02\xD2\xD3\x04\x02\x90" +
		"\x96\xB8\xBA\x07\x02\x90\x92\x95\x9B\xA1\xA1\xB8\xB8\xBB\xCB\x03\x02\xCC" +
		"\xCD\x05\x02\x90\x94\xB8\xBA\xC9\xC9\x06\x02\x90\x92\xB8\xB8\xC2\xC5\xC9" +
		"\xC9\x03\x02\xE3\xE4\x02\u1149\x02\u027F\x03\x02\x02\x02\x04\u028D\x03" +
		"\x02\x02\x02\x06\u028F\x03\x02\x02\x02\b\u02A0\x03\x02\x02\x02\n\u02E8" +
		"\x03\x02\x02\x02\f\u02EA\x03\x02\x02\x02\x0E\u0308\x03\x02\x02\x02\x10" +
		"\u0319\x03\x02\x02\x02\x12\u032D\x03\x02\x02\x02\x14\u0358\x03\x02\x02" +
		"\x02\x16\u035C\x03\x02\x02\x02\x18\u0382\x03\x02\x02\x02\x1A\u0384\x03" +
		"\x02\x02\x02\x1C\u0389\x03\x02\x02\x02\x1E\u03B7\x03\x02\x02\x02 \u03D4" +
		"\x03\x02\x02\x02\"\u03DA\x03\x02\x02\x02$\u03DC\x03\x02\x02\x02&\u03E7" +
		"\x03\x02\x02\x02(\u03F9\x03\x02\x02\x02*\u0402\x03\x02\x02\x02,\u0412" +
		"\x03\x02\x02\x02.\u0414\x03\x02\x02\x020\u0417\x03\x02\x02\x022\u0419" +
		"\x03\x02\x02\x024\u0426\x03\x02\x02\x026\u042A\x03\x02\x02\x028\u045B" +
		"\x03\x02\x02\x02:\u045D\x03\x02\x02\x02<\u0468\x03\x02\x02\x02>\u046E" +
		"\x03\x02\x02\x02@\u0473\x03\x02\x02\x02B\u0477\x03\x02\x02\x02D\u047D" +
		"\x03\x02\x02\x02F\u047F\x03\x02\x02\x02H\u0486\x03\x02\x02\x02J\u0491" +
		"\x03\x02\x02\x02L\u0497\x03\x02\x02\x02N\u049D\x03\x02\x02\x02P\u04A6" +
		"\x03\x02\x02\x02R\u04BE\x03\x02\x02\x02T\u04F2\x03\x02\x02\x02V\u04F4" +
		"\x03\x02\x02\x02X\u0501\x03\x02\x02\x02Z\u0503\x03\x02\x02\x02\\\u0507" +
		"\x03\x02\x02\x02^\u050E\x03\x02\x02\x02`\u0512\x03\x02\x02\x02b\u0514" +
		"\x03\x02\x02\x02d\u053F\x03\x02\x02\x02f\u0545\x03\x02\x02\x02h\u0555" +
		"\x03\x02\x02\x02j\u0557\x03\x02\x02\x02l\u0563\x03\x02\x02\x02n\u0583" +
		"\x03\x02\x02\x02p\u0585\x03\x02\x02\x02r\u0593\x03\x02\x02\x02t\u0595" +
		"\x03\x02\x02\x02v\u059D\x03\x02\x02\x02x\u05A5\x03\x02\x02\x02z\u05A8" +
		"\x03\x02\x02\x02|\u05B1\x03\x02\x02\x02~\u05B7\x03\x02\x02\x02\x80\u05C6" +
		"\x03\x02\x02\x02\x82\u05CD\x03\x02\x02\x02\x84\u05D6\x03\x02\x02\x02\x86" +
		"\u05DF\x03\x02\x02\x02\x88\u05E1\x03\x02\x02\x02\x8A\u05ED\x03\x02\x02" +
		"\x02\x8C\u05F7\x03\x02\x02\x02\x8E\u05F9\x03\x02\x02\x02\x90\u0600\x03" +
		"\x02\x02\x02\x92\u0614\x03\x02\x02\x02\x94\u0616\x03\x02\x02\x02\x96\u0629" +
		"\x03\x02\x02\x02\x98\u0635\x03\x02\x02\x02\x9A\u0637\x03\x02\x02\x02\x9C" +
		"\u0654\x03";
	private static readonly _serializedATNSegment2: string =
		"\x02\x02\x02\x9E\u0670\x03\x02\x02\x02\xA0\u0678\x03\x02\x02\x02\xA2\u0691" +
		"\x03\x02\x02\x02\xA4\u0693\x03\x02\x02\x02\xA6\u069B\x03\x02\x02\x02\xA8" +
		"\u06F2\x03\x02\x02\x02\xAA\u06F6\x03\x02\x02\x02\xAC\u06F9\x03\x02\x02" +
		"\x02\xAE\u0710\x03\x02\x02\x02\xB0\u0712\x03\x02\x02\x02\xB2\u0721\x03" +
		"\x02\x02\x02\xB4\u0724\x03\x02\x02\x02\xB6\u0732\x03\x02\x02\x02\xB8\u073B" +
		"\x03\x02\x02\x02\xBA\u073D\x03\x02\x02\x02\xBC\u0742\x03\x02\x02\x02\xBE" +
		"\u0747\x03\x02\x02\x02\xC0\u074E\x03\x02\x02\x02\xC2\u0752\x03\x02\x02" +
		"\x02\xC4\u0755\x03\x02\x02\x02\xC6\u0765\x03\x02\x02\x02\xC8\u076C\x03" +
		"\x02\x02\x02\xCA\u076E\x03\x02\x02\x02\xCC\u0776\x03\x02\x02\x02\xCE\u077E" +
		"\x03\x02\x02\x02\xD0\u0792\x03\x02\x02\x02\xD2\u079A\x03\x02\x02\x02\xD4" +
		"\u07A2\x03\x02\x02\x02\xD6\u07B5\x03\x02\x02\x02\xD8\u07D0\x03\x02\x02" +
		"\x02\xDA\u07D8\x03\x02\x02\x02\xDC\u07E0\x03\x02\x02\x02\xDE\u07F4\x03" +
		"\x02\x02\x02\xE0\u080F\x03\x02\x02\x02\xE2\u0813\x03\x02\x02\x02\xE4\u081E" +
		"\x03\x02\x02\x02\xE6\u0829\x03\x02\x02\x02\xE8\u0849\x03\x02\x02\x02\xEA" +
		"\u0857\x03\x02\x02\x02\xEC\u0859\x03\x02\x02\x02\xEE\u086B\x03\x02\x02" +
		"\x02\xF0\u0872\x03\x02\x02\x02\xF2\u087B\x03\x02\x02\x02\xF4\u0881\x03" +
		"\x02\x02\x02\xF6\u0883\x03\x02\x02\x02\xF8\u088B\x03\x02\x02\x02\xFA\u0890" +
		"\x03\x02\x02\x02\xFC\u0892\x03\x02\x02\x02\xFE\u08D1\x03\x02\x02\x02\u0100" +
		"\u08D3\x03\x02\x02\x02\u0102\u08DD\x03\x02\x02\x02\u0104\u091A\x03\x02" +
		"\x02\x02\u0106\u091E\x03\x02\x02\x02\u0108\u0920\x03\x02\x02\x02\u010A" +
		"\u0929\x03\x02\x02\x02\u010C\u093D\x03\x02\x02\x02\u010E\u093F\x03\x02" +
		"\x02\x02\u0110\u0947\x03\x02\x02\x02\u0112\u0956\x03\x02\x02\x02\u0114" +
		"\u0958\x03\x02\x02\x02\u0116\u0963\x03\x02\x02\x02\u0118\u0972\x03\x02" +
		"\x02\x02\u011A\u0974\x03\x02\x02\x02\u011C\u0977\x03\x02\x02\x02\u011E" +
		"\u0989\x03\x02\x02\x02\u0120\u098B\x03\x02\x02\x02\u0122\u0992\x03\x02" +
		"\x02\x02\u0124\u0994\x03\x02\x02\x02\u0126\u099D\x03\x02\x02\x02\u0128" +
		"\u099F\x03\x02\x02\x02\u012A\u09A1\x03\x02\x02\x02\u012C\u09A9\x03\x02" +
		"\x02\x02\u012E\u09B7\x03\x02\x02\x02\u0130\u09BE\x03\x02\x02\x02\u0132" +
		"\u09D2\x03\x02\x02\x02\u0134\u09D4\x03\x02\x02\x02\u0136\u09DF\x03\x02" +
		"\x02\x02\u0138\u09E1\x03\x02\x02\x02\u013A\u09E8\x03\x02\x02\x02\u013C" +
		"\u09EF\x03\x02\x02\x02\u013E\u0A03\x03\x02\x02\x02\u0140\u0A05\x03\x02" +
		"\x02\x02\u0142\u0A11\x03\x02\x02\x02\u0144\u0A13\x03\x02\x02\x02\u0146" +
		"\u0A19\x03\x02\x02\x02\u0148\u0A1B\x03\x02\x02\x02\u014A\u0A24\x03\x02" +
		"\x02\x02\u014C\u0A2F\x03\x02\x02\x02\u014E\u0A3F\x03\x02\x02\x02\u0150" +
		"\u0A43\x03\x02\x02\x02\u0152\u0A45\x03\x02\x02\x02\u0154\u0A4E\x03\x02" +
		"\x02\x02\u0156\u0A6B\x03\x02\x02\x02\u0158\u0A83\x03\x02\x02\x02\u015A" +
		"\u0A85\x03\x02\x02\x02\u015C\u0A92\x03\x02\x02\x02\u015E\u0A94\x03\x02" +
		"\x02\x02\u0160\u0A9C\x03\x02\x02\x02\u0162\u0AA4\x03\x02\x02\x02\u0164" +
		"\u0AB1\x03\x02\x02\x02\u0166\u0AB5\x03\x02\x02\x02\u0168\u0AB8\x03\x02" +
		"\x02\x02\u016A\u0ABB\x03\x02\x02\x02\u016C\u0AD4\x03\x02\x02\x02\u016E" +
		"\u0AD6\x03\x02\x02\x02\u0170\u0ADA\x03\x02\x02\x02\u0172\u0ADC\x03\x02" +
		"\x02\x02\u0174\u0AEF\x03\x02\x02\x02\u0176\u0AF1\x03\x02\x02\x02\u0178" +
		"\u0AFB\x03\x02\x02\x02\u017A\u0AFD\x03\x02\x02\x02\u017C\u0B15\x03\x02" +
		"\x02\x02\u017E\u0B1A\x03\x02\x02\x02\u0180\u0B35\x03\x02\x02\x02\u0182" +
		"\u0B37\x03\x02\x02\x02\u0184\u0B3B\x03\x02\x02\x02\u0186\u0B3D\x03\x02" +
		"\x02\x02\u0188\u0B45\x03\x02\x02\x02\u018A\u0B50\x03\x02\x02\x02\u018C" +
		"\u0B59\x03\x02\x02\x02\u018E\u0B6A\x03\x02\x02\x02\u0190\u0B79\x03\x02" +
		"\x02\x02\u0192\u0B89\x03\x02\x02\x02\u0194\u0B94\x03\x02\x02\x02\u0196" +
		"\u0BAC\x03\x02\x02\x02\u0198\u0BB9\x03\x02\x02\x02\u019A\u0BC2\x03\x02" +
		"\x02\x02\u019C\u0BC5\x03\x02\x02\x02\u019E\u0BDC\x03\x02\x02\x02\u01A0" +
		"\u0BDE\x03\x02\x02\x02\u01A2\u0BE8\x03\x02\x02\x02\u01A4\u0BEA\x03\x02" +
		"\x02\x02\u01A6\u0C0F\x03\x02\x02\x02\u01A8\u0C11\x03\x02\x02\x02\u01AA" +
		"\u0C23\x03\x02\x02\x02\u01AC\u0C2E\x03\x02\x02\x02\u01AE\u0C30\x03\x02" +
		"\x02\x02\u01B0\u0C32\x03\x02\x02\x02\u01B2\u0C3A\x03\x02\x02\x02\u01B4" +
		"\u0C5C\x03\x02\x02\x02\u01B6\u0C8C\x03\x02\x02\x02\u01B8\u0C97\x03\x02" +
		"\x02\x02\u01BA\u0C9A\x03\x02\x02\x02\u01BC\u0CAA\x03\x02\x02\x02\u01BE" +
		"\u0CB5\x03\x02\x02\x02\u01C0\u0CB8\x03\x02\x02\x02\u01C2\u0CC9\x03\x02" +
		"\x02\x02\u01C4\u0CCD\x03\x02\x02\x02\u01C6\u0CD2\x03\x02\x02\x02\u01C8" +
		"\u0CD6\x03\x02\x02\x02\u01CA\u0CDA\x03\x02\x02\x02\u01CC\u0CDF\x03\x02" +
		"\x02\x02\u01CE\u0CE1\x03\x02\x02\x02\u01D0\u0CE7\x03\x02\x02\x02\u01D2" +
		"\u0CED\x03\x02\x02\x02\u01D4\u0CF6\x03\x02\x02\x02\u01D6\u0D06\x03\x02" +
		"\x02\x02\u01D8\u0D16\x03\x02\x02\x02\u01DA\u0D26\x03\x02\x02\x02\u01DC" +
		"\u0D31\x03\x02\x02\x02\u01DE\u0D33\x03\x02\x02\x02\u01E0\u0D35\x03\x02" +
		"\x02\x02\u01E2\u0D40\x03\x02\x02\x02\u01E4\u0D4B\x03\x02\x02\x02\u01E6" +
		"\u0D50\x03\x02\x02\x02\u01E8\u0D62\x03\x02\x02\x02\u01EA\u0D64\x03\x02" +
		"\x02\x02\u01EC\u0D67\x03\x02\x02\x02\u01EE\u0D69\x03\x02\x02\x02\u01F0" +
		"\u0D80\x03\x02\x02\x02\u01F2\u0D89\x03\x02\x02\x02\u01F4\u0D8B\x03\x02" +
		"\x02\x02\u01F6\u0D8D\x03\x02\x02\x02\u01F8\u0DBE\x03\x02\x02\x02\u01FA" +
		"\u0DC0\x03\x02\x02\x02\u01FC\u0DCC\x03\x02\x02\x02\u01FE\u0DD6\x03\x02" +
		"\x02\x02\u0200\u0DDA\x03\x02\x02\x02\u0202\u0DDC\x03\x02\x02\x02\u0204" +
		"\u0DEA\x03\x02\x02\x02\u0206\u0DF8\x03\x02\x02\x02\u0208\u0E00\x03\x02" +
		"\x02\x02\u020A\u0E07\x03\x02\x02\x02\u020C\u0E1F\x03\x02\x02\x02\u020E" +
		"\u0E24\x03\x02\x02\x02\u0210\u0E29\x03\x02\x02\x02\u0212\u0E2D\x03\x02" +
		"\x02\x02\u0214\u0E31\x03\x02\x02\x02\u0216\u0E33\x03\x02\x02\x02\u0218" +
		"\u0E3F\x03\x02\x02\x02\u021A\u0E4C\x03\x02\x02\x02\u021C\u0E63\x03\x02" +
		"\x02\x02\u021E\u0E6F\x03\x02\x02\x02\u0220\u0E78\x03\x02\x02\x02\u0222" +
		"\u0E7C\x03\x02\x02\x02\u0224\u0E86\x03\x02\x02\x02\u0226\u0E88\x03\x02" +
		"\x02\x02\u0228\u0EA9\x03\x02\x02\x02\u022A\u0ECB\x03\x02\x02\x02\u022C" +
		"\u0ECE\x03\x02\x02\x02\u022E\u0ED8\x03\x02\x02\x02\u0230\u0EDE\x03\x02" +
		"\x02\x02\u0232\u0EE4\x03\x02\x02\x02\u0234\u0EE6\x03\x02\x02\x02\u0236" +
		"\u0EEE\x03\x02\x02\x02\u0238\u0EFC\x03\x02\x02\x02\u023A\u0F10\x03\x02" +
		"\x02\x02\u023C\u0F1A\x03\x02\x02\x02\u023E\u0F28\x03\x02\x02\x02\u0240" +
		"\u0F2C\x03\x02\x02\x02\u0242\u0F33\x03\x02\x02\x02\u0244\u0F42\x03\x02" +
		"\x02\x02\u0246\u0F58\x03\x02\x02\x02\u0248\u0F5E\x03\x02\x02\x02\u024A" +
		"\u0F65\x03\x02\x02\x02\u024C\u0F6B\x03\x02\x02\x02\u024E\u0F6D\x03\x02" +
		"\x02\x02\u0250\u0F6F\x03\x02\x02\x02\u0252\u0F71\x03\x02\x02\x02\u0254" +
		"\u0F73\x03\x02\x02\x02\u0256\u0F75\x03\x02\x02\x02\u0258\u0F77\x03\x02" +
		"\x02\x02\u025A\u0F79\x03\x02\x02\x02\u025C\u0F7F\x03\x02\x02\x02\u025E" +
		"\u0F81\x03\x02\x02\x02\u0260\u0F84\x03\x02\x02\x02\u0262\u0F89\x03\x02" +
		"\x02\x02\u0264\u0F98\x03\x02\x02\x02\u0266\u0F9D\x03\x02\x02\x02\u0268" +
		"\u0FAA\x03\x02\x02\x02\u026A\u0FAC\x03\x02\x02\x02\u026C\u0FAF\x03\x02" +
		"\x02\x02\u026E\u0FB6\x03\x02\x02\x02\u0270\u0FB9\x03\x02\x02\x02\u0272" +
		"\u0FBC\x03\x02\x02\x02\u0274\u0FC0\x03\x02\x02\x02\u0276\u0FCD\x03\x02" +
		"\x02\x02\u0278\u0FD0\x03\x02\x02\x02\u027A\u0FD2\x03\x02\x02\x02\u027C" +
		"\u0FDD\x03\x02\x02\x02\u027E\u0280\x05\x1E\x10\x02\u027F\u027E\x03\x02" +
		"\x02\x02\u027F\u0280\x03\x02\x02\x02\u0280\u0284\x03\x02\x02\x02\u0281" +
		"\u0283\x05\x04\x03\x02\u0282\u0281\x03\x02\x02\x02\u0283\u0286\x03\x02" +
		"\x02\x02\u0284\u0282\x03\x02\x02\x02\u0284\u0285\x03\x02\x02\x02\u0285" +
		"\u0287\x03\x02\x02\x02\u0286\u0284\x03\x02\x02\x02\u0287\u0288\x07\x02" +
		"\x02\x03\u0288\x03\x03\x02\x02\x02\u0289\u028E\x05\n\x06\x02\u028A\u028E" +
		"\x05\f\x07\x02\u028B\u028E\x05\x1C\x0F\x02\u028C\u028E\x05~@\x02\u028D" +
		"\u0289\x03\x02\x02\x02\u028D\u028A\x03\x02\x02\x02\u028D\u028B\x03\x02" +
		"\x02\x02\u028D\u028C\x03\x02\x02\x02\u028E\x05\x03\x02\x02\x02\u028F\u0291" +
		"\x07\x03\x02\x02\u0290\u0292\x05\xA4S\x02\u0291\u0290\x03\x02\x02\x02" +
		"\u0291\u0292\x03\x02\x02\x02\u0292\u0293\x03\x02\x02\x02\u0293\u0297\x05" +
		"\u025E\u0130\x02\u0294\u0296\x05\x94K\x02\u0295\u0294\x03\x02\x02\x02" +
		"\u0296\u0299\x03\x02\x02\x02\u0297\u0295\x03\x02\x02\x02\u0297\u0298\x03" +
		"\x02\x02\x02\u0298\u029B\x03\x02\x02\x02\u0299\u0297\x03\x02\x02\x02\u029A" +
		"\u029C\x05 \x11\x02\u029B\u029A\x03\x02\x02\x02\u029B\u029C\x03\x02\x02" +
		"\x02\u029C\u029D\x03\x02\x02\x02\u029D\u029E\x05$\x13\x02\u029E\u029F" +
		"\x07\x8A\x02\x02\u029F\x07\x03\x02\x02\x02\u02A0\u02A2\x07\x03\x02\x02" +
		"\u02A1\u02A3\x05\xA4S\x02\u02A2\u02A1\x03\x02\x02\x02\u02A2\u02A3\x03" +
		"\x02\x02\x02\u02A3\u02A4\x03\x02\x02\x02\u02A4\u02A8\x05\u025E\u0130\x02" +
		"\u02A5\u02A7\x05\x94K\x02\u02A6\u02A5\x03\x02\x02\x02\u02A7\u02AA\x03" +
		"\x02\x02\x02\u02A8\u02A6\x03\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9" +
		"\u02AC\x03\x02\x02\x02\u02AA\u02A8\x03\x02\x02\x02\u02AB\u02AD\x05 \x11" +
		"\x02\u02AC\u02AB\x03\x02\x02\x02\u02AC\u02AD\x03\x02\x02\x02\u02AD\u02AF" +
		"\x03\x02\x02\x02\u02AE\u02B0\x05&\x14\x02\u02AF\u02AE\x03\x02\x02\x02" +
		"\u02AF\u02B0\x03\x02\x02\x02\u02B0\u02B1\x03\x02\x02\x02\u02B1\u02B2\x07" +
		"\x8A\x02\x02\u02B2\t\x03\x02\x02\x02\u02B3\u02B5\x05\b\x05\x02\u02B4\u02B6" +
		"\x05\x1E\x10\x02\u02B5\u02B4\x03\x02\x02\x02\u02B5\u02B6\x03\x02\x02\x02" +
		"\u02B6\u02BA\x03\x02\x02\x02\u02B7\u02B9\x05D#\x02\u02B8\u02B7\x03\x02" +
		"\x02\x02\u02B9\u02BC\x03\x02\x02\x02\u02BA\u02B8\x03\x02\x02\x02\u02BA" +
		"\u02BB\x03\x02\x02\x02\u02BB\u02BD\x03\x02\x02\x02\u02BC\u02BA\x03\x02" +
		"\x02\x02\u02BD\u02C0\x07\x04\x02\x02\u02BE\u02BF\x07\x89\x02\x02\u02BF" +
		"\u02C1\x05\u025E\u0130\x02\u02C0\u02BE\x03\x02\x02\x02\u02C0\u02C1\x03" +
		"\x02\x02\x02\u02C1\u02E9\x03\x02\x02\x02\u02C2\u02C4\x05\x06\x04\x02\u02C3" +
		"\u02C5\x05\x1E\x10\x02\u02C4\u02C3\x03\x02\x02\x02\u02C4\u02C5\x03\x02" +
		"\x02\x02\u02C5\u02C9\x03\x02\x02\x02\u02C6\u02C8\x05> \x02\u02C7\u02C6" +
		"\x03\x02\x02\x02\u02C8\u02CB\x03\x02\x02\x02\u02C9\u02C7\x03\x02\x02\x02" +
		"\u02C9\u02CA\x03\x02\x02\x02\u02CA\u02CC\x03\x02\x02\x02\u02CB\u02C9\x03" +
		"\x02\x02\x02\u02CC\u02CF\x07\x04\x02\x02\u02CD\u02CE\x07\x89\x02\x02\u02CE" +
		"\u02D0\x05\u025E\u0130\x02\u02CF\u02CD\x03\x02\x02\x02\u02CF\u02D0\x03" +
		"\x02\x02\x02\u02D0\u02E9\x03\x02\x02\x02\u02D1\u02D3\x07\x03\x02\x02\u02D2" +
		"\u02D4\x05\xA4S\x02\u02D3\u02D2\x03\x02\x02\x02\u02D3\u02D4\x03\x02\x02" +
		"\x02\u02D4\u02D5\x03\x02\x02\x02\u02D5\u02D6\x05\u025E\u0130\x02\u02D6" +
		"\u02D7\x07\x80\x02\x02\u02D7\u02D8\x07\xA9\x02\x02\u02D8\u02D9\x07\x81" +
		"\x02\x02\u02D9\u02DB\x07\x8A\x02\x02\u02DA\u02DC\x05\x1E\x10\x02\u02DB" +
		"\u02DA\x03\x02\x02\x02\u02DB\u02DC\x03\x02\x02\x02\u02DC\u02E0\x03\x02" +
		"\x02\x02\u02DD\u02DF\x05> \x02\u02DE\u02DD\x03\x02\x02\x02\u02DF\u02E2" +
		"\x03\x02\x02\x02\u02E0\u02DE\x03\x02\x02\x02\u02E0\u02E1\x03\x02\x02\x02" +
		"\u02E1\u02E3\x03\x02\x02\x02\u02E2\u02E0\x03\x02\x02\x02\u02E3\u02E6\x07" +
		"\x04\x02\x02\u02E4\u02E5\x07\x89\x02\x02\u02E5\u02E7\x05\u025E\u0130\x02" +
		"\u02E6\u02E4\x03\x02\x02\x02\u02E6\u02E7\x03\x02\x02\x02\u02E7\u02E9\x03" +
		"\x02\x02\x02\u02E8\u02B3\x03\x02\x02\x02\u02E8\u02C2\x03\x02\x02\x02\u02E8" +
		"\u02D1\x03\x02\x02\x02\u02E9\v\x03\x02\x02\x02\u02EA\u02EC\x05\x0E\b\x02" +
		"\u02EB\u02ED\x05\x1E\x10\x02\u02EC\u02EB\x03\x02\x02\x02\u02EC\u02ED\x03" +
		"\x02\x02\x02\u02ED\u02F1\x03\x02\x02\x02\u02EE\u02F0\x05L\'\x02\u02EF" +
		"\u02EE\x03\x02\x02\x02\u02F0\u02F3\x03\x02\x02\x02\u02F1\u02EF\x03\x02" +
		"\x02\x02\u02F1\u02F2\x03\x02\x02\x02\u02F2\u02F4\x03\x02\x02\x02\u02F3" +
		"\u02F1\x03\x02\x02\x02\u02F4\u02F7\x07\x06\x02\x02\u02F5\u02F6\x07\x89" +
		"\x02\x02\u02F6\u02F8\x05\u025E\u0130\x02\u02F7\u02F5\x03\x02\x02\x02\u02F7" +
		"\u02F8\x03\x02\x02\x02\u02F8\u02F9\x03\x02\x02\x02\u02F9\u02FB\x05\x10" +
		"\t\x02\u02FA\u02FC\x05\x1E\x10\x02\u02FB\u02FA\x03\x02\x02\x02\u02FB\u02FC" +
		"\x03\x02\x02\x02\u02FC\u0300\x03\x02\x02\x02\u02FD\u02FF\x05N(\x02\u02FE" +
		"\u02FD\x03\x02\x02\x02\u02FF\u0302\x03\x02\x02\x02\u0300\u02FE\x03\x02" +
		"\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301\u0303\x03\x02\x02\x02\u0302" +
		"\u0300\x03\x02\x02\x02\u0303\u0306\x07\x06\x02\x02\u0304\u0305\x07\x89" +
		"\x02\x02\u0305\u0307\x05\u025E\u0130\x02\u0306\u0304\x03\x02\x02\x02\u0306" +
		"\u0307\x03\x02\x02\x02\u0307\r\x03\x02\x02\x02\u0308\u030A\x07\x05\x02" +
		"\x02\u0309\u030B\x05\xA4S\x02\u030A\u0309\x03\x02\x02\x02\u030A\u030B" +
		"\x03\x02\x02\x02\u030B\u030C\x03\x02\x02\x02\u030C\u0310\x05\u025E\u0130" +
		"\x02\u030D\u030F\x05\x94K\x02\u030E\u030D\x03\x02\x02\x02\u030F\u0312" +
		"\x03\x02\x02\x02\u0310\u030E\x03\x02\x02\x02\u0310\u0311\x03\x02\x02\x02" +
		"\u0311\u0314\x03\x02\x02\x02\u0312\u0310\x03\x02\x02\x02\u0313\u0315\x05" +
		" \x11\x02\u0314\u0313\x03\x02\x02\x02\u0314\u0315\x03\x02\x02\x02\u0315" +
		"\u0316\x03\x02\x02\x02\u0316\u0317\x05$\x13\x02\u0317\u0318\x07\x8A\x02" +
		"\x02\u0318\x0F\x03\x02\x02\x02\u0319\u031B\x07\x05\x02\x02\u031A\u031C" +
		"\x05\xA4S\x02\u031B\u031A\x03\x02\x02\x02\u031B\u031C\x03\x02\x02\x02" +
		"\u031C\u031D\x03\x02\x02\x02\u031D\u0321\x05\u025E\u0130\x02\u031E\u0320" +
		"\x05\x94K\x02\u031F\u031E\x03\x02\x02\x02\u0320\u0323\x03\x02\x02\x02" +
		"\u0321\u031F\x03\x02\x02\x02\u0321\u0322\x03\x02\x02\x02\u0322\u0325\x03" +
		"\x02\x02\x02\u0323\u0321\x03\x02\x02\x02\u0324\u0326\x05 \x11\x02\u0325" +
		"\u0324\x03\x02\x02\x02\u0325\u0326\x03\x02\x02\x02\u0326\u0328\x03\x02" +
		"\x02\x02\u0327\u0329\x05&\x14\x02\u0328\u0327\x03\x02\x02\x02\u0328\u0329" +
		"\x03\x02\x02\x02\u0329\u032A\x03\x02\x02\x02\u032A\u032B\x07\x8A\x02\x02" +
		"\u032B\x11\x03\x02\x02\x02\u032C\u032E\x07B\x02\x02\u032D\u032C\x03\x02" +
		"\x02\x02\u032D\u032E\x03\x02\x02\x02\u032E\u032F\x03\x02\x02\x02\u032F" +
		"\u0331\x07\x07\x02\x02\u0330\u0332\x05\xA4S\x02\u0331\u0330\x03\x02\x02" +
		"\x02\u0331\u0332\x03\x02\x02\x02\u0332\u0333\x03\x02\x02\x02\u0333\u0335" +
		"\x05\u025E\u0130\x02\u0334\u0336\x05 \x11\x02\u0335\u0334\x03\x02\x02" +
		"\x02\u0335\u0336\x03\x02\x02\x02\u0336\u033F\x03\x02\x02\x02\u0337\u0338" +
		"\x07D\x02\x02\u0338\u033D\x05\xB4[\x02\u0339\u033A\x07\x80\x02\x02\u033A" +
		"\u033B\x05\u01F8\xFD\x02\u033B\u033C\x07\x81\x02\x02\u033C\u033E\x03\x02" +
		"\x02\x02\u033D\u0339\x03\x02\x02\x02\u033D\u033E\x03\x02\x02\x02\u033E" +
		"\u0340\x03\x02\x02\x02\u033F\u0337\x03\x02\x02\x02\u033F\u0340\x03\x02" +
		"\x02\x02\u0340\u034A\x03\x02\x02\x02\u0341\u0342\x07\x17\x02\x02\u0342" +
		"\u0347\x05\x14\v\x02\u0343\u0344\x07\x8C\x02\x02\u0344\u0346\x05\x14\v" +
		"\x02\u0345\u0343\x03\x02\x02\x02\u0346\u0349\x03\x02\x02\x02\u0347\u0345" +
		"\x03\x02\x02\x02\u0347\u0348\x03\x02\x02\x02\u0348\u034B\x03\x02\x02\x02" +
		"\u0349\u0347\x03\x02\x02\x02\u034A\u0341\x03\x02\x02\x02\u034A\u034B\x03" +
		"\x02\x02\x02\u034B\u034C\x03\x02\x02\x02\u034C\u0350\x07\x8A\x02\x02\u034D" +
		"\u034F\x05P)\x02\u034E\u034D\x03\x02\x02\x02\u034F\u0352\x03\x02\x02\x02" +
		"\u0350\u034E\x03\x02\x02\x02\u0350\u0351\x03\x02\x02\x02\u0351\u0353\x03" +
		"\x02\x02\x02\u0352\u0350\x03\x02\x02\x02\u0353\u0356\x07\b\x02\x02\u0354" +
		"\u0355\x07\x89\x02\x02\u0355\u0357\x05\u025E\u0130\x02\u0356\u0354\x03" +
		"\x02\x02\x02\u0356\u0357\x03\x02\x02\x02\u0357\x13\x03\x02\x02\x02\u0358" +
		"\u035A\x05\u0260\u0131\x02\u0359\u035B\x05\u012E\x98\x02\u035A\u0359\x03" +
		"\x02\x02\x02\u035A\u035B\x03\x02\x02\x02\u035B\x15\x03\x02\x02\x02\u035C" +
		"\u035D\x07\x05\x02\x02\u035D\u035E\x07\x07\x02\x02\u035E\u0360\x05\u025E" +
		"\u0130\x02\u035F\u0361\x05 \x11\x02\u0360\u035F\x03\x02\x02\x02\u0360" +
		"\u0361\x03\x02\x02\x02\u0361\u036B\x03\x02\x02\x02\u0362\u0363\x07D\x02" +
		"\x02\u0363\u0368\x05\x14\v\x02\u0364\u0365\x07\x8C\x02\x02\u0365\u0367" +
		"\x05\x14\v\x02\u0366\u0364\x03\x02\x02\x02\u0367\u036A\x03\x02\x02\x02" +
		"\u0368\u0366\x03\x02\x02\x02\u0368\u0369\x03\x02\x02\x02\u0369\u036C\x03" +
		"\x02\x02\x02\u036A\u0368\x03\x02\x02\x02\u036B\u0362\x03\x02\x02\x02\u036B" +
		"\u036C\x03\x02\x02\x02\u036C\u036D\x03\x02\x02\x02\u036D\u0371\x07\x8A" +
		"\x02\x02\u036E\u0370\x05\x18\r\x02\u036F\u036E\x03\x02\x02\x02\u0370\u0373" +
		"\x03\x02\x02\x02\u0371\u036F\x03\x02\x02\x02\u0371\u0372\x03\x02\x02\x02" +
		"\u0372\u0374\x03\x02\x02\x02\u0373\u0371\x03\x02\x02\x02\u0374\u0377\x07" +
		"\b\x02\x02\u0375\u0376\x07\x89\x02\x02\u0376\u0378\x05\u025E\u0130\x02" +
		"\u0377\u0375\x03\x02\x02\x02\u0377\u0378\x03\x02\x02\x02\u0378\x17\x03" +
		"\x02\x02\x02\u0379\u0383\x05\x9EP\x02\u037A\u0383\x05\x1A\x0E\x02\u037B" +
		"\u037C\x05\x84C\x02\u037C\u037D\x07\x8A\x02\x02\u037D\u0383\x03\x02\x02" +
		"\x02\u037E\u037F\x05\x86D\x02\u037F\u0380\x07\x8A\x02\x02\u0380\u0383" +
		"\x03\x02\x02\x02\u0381\u0383\x07\x8A\x02\x02\u0382\u0379\x03\x02\x02\x02" +
		"\u0382\u037A\x03\x02\x02\x02\u0382\u037B\x03\x02\x02\x02\u0382\u037E\x03" +
		"\x02\x02\x02\u0382\u0381\x03\x02\x02\x02\u0383\x19\x03\x02\x02\x02\u0384" +
		"\u0385\x07C\x02\x02\u0385\u0386\x07B\x02\x02\u0386\u0387\x05`1\x02\u0387" +
		"\u0388\x07\x8A\x02\x02\u0388\x1B\x03\x02\x02\x02\u0389\u038B\x07\t\x02" +
		"\x02\u038A\u038C\x05\xA4S\x02\u038B\u038A\x03\x02\x02\x02\u038B\u038C" +
		"\x03\x02\x02\x02\u038C\u038D\x03\x02\x02\x02\u038D\u038E\x05\u025E\u0130" +
		"\x02\u038E\u0390\x07\x8A\x02\x02\u038F\u0391\x05\x1E\x10\x02\u0390\u038F" +
		"\x03\x02\x02\x02\u0390\u0391\x03\x02\x02\x02\u0391\u0395\x03\x02\x02\x02" +
		"\u0392\u0394\x05~@\x02\u0393\u0392\x03\x02\x02\x02\u0394\u0397\x03\x02" +
		"\x02\x02\u0395\u0393\x03\x02\x02\x02\u0395\u0396\x03\x02\x02\x02\u0396" +
		"\u0398\x03\x02\x02\x02\u0397\u0395\x03\x02\x02\x02\u0398\u039B\x07\n\x02" +
		"\x02\u0399\u039A\x07\x89\x02\x02\u039A\u039C\x05\u025E\u0130\x02\u039B" +
		"\u0399\x03\x02\x02\x02\u039B\u039C\x03\x02\x02\x02\u039C\x1D\x03\x02\x02" +
		"\x02\u039D\u039E\x07\x15\x02\x02\u039E\u03A1\x05\u0232\u011A\x02\u039F" +
		"\u03A0\x07\x98\x02\x02\u03A0\u03A2\x05\u0232\u011A\x02\u03A1\u039F\x03" +
		"\x02\x02\x02\u03A1\u03A2\x03\x02\x02\x02\u03A2\u03A3\x03\x02\x02\x02\u03A3" +
		"\u03A4\x07\x8A\x02\x02\u03A4\u03B8\x03\x02\x02\x02\u03A5\u03A6\x07\x16" +
		"\x02\x02\u03A6\u03A7\x05\u0232\u011A\x02\u03A7\u03A8\x07\x8A\x02\x02\u03A8" +
		"\u03B8\x03\x02\x02\x02\u03A9\u03AA\x07\x15\x02\x02\u03AA\u03AB\x05\u0232" +
		"\u011A\x02\u03AB\u03AC\x07\x8A\x02\x02\u03AC\u03AD\x07\x16\x02\x02\u03AD" +
		"\u03AE\x05\u0232\u011A\x02\u03AE\u03AF\x07\x8A\x02\x02\u03AF\u03B8\x03" +
		"\x02\x02\x02\u03B0\u03B1\x07\x16\x02\x02\u03B1\u03B2\x05\u0232\u011A\x02" +
		"\u03B2\u03B3\x07\x8A\x02\x02\u03B3\u03B4\x07\x15\x02\x02\u03B4\u03B5\x05" +
		"\u0232\u011A\x02\u03B5\u03B6\x07\x8A\x02\x02\u03B6\u03B8\x03\x02\x02\x02" +
		"\u03B7\u039D\x03\x02\x02\x02\u03B7\u03A5\x03\x02\x02\x02\u03B7\u03A9\x03" +
		"\x02\x02\x02\u03B7\u03B0\x03\x02\x02\x02\u03B8\x1F\x03\x02\x02\x02\u03B9" +
		"\u03BA\x07\x9D\x02\x02\u03BA\u03BB\x07\x80\x02\x02\u03BB\u03C0\x05\xD2" +
		"j\x02\u03BC\u03BD\x07\x8C\x02\x02\u03BD\u03BF\x05\"\x12\x02\u03BE\u03BC" +
		"\x03\x02\x02\x02\u03BF\u03C2\x03\x02\x02\x02\u03C0\u03BE\x03\x02\x02\x02" +
		"\u03C0\u03C1\x03\x02\x02\x02\u03C1\u03C3\x03\x02\x02\x02\u03C2\u03C0\x03" +
		"\x02\x02\x02\u03C3\u03C4\x07\x81\x02\x02\u03C4\u03D5\x03\x02\x02\x02\u03C5" +
		"\u03C6\x07\x9D\x02\x02\u03C6\u03C7\x07\x80\x02\x02\u03C7\u03CC\x05\"\x12" +
		"\x02\u03C8\u03C9\x07\x8C\x02\x02\u03C9\u03CB\x05\"\x12\x02\u03CA\u03C8" +
		"\x03\x02\x02\x02\u03CB\u03CE\x03\x02\x02\x02\u03CC\u03CA\x03\x02\x02\x02" +
		"\u03CC\u03CD\x03\x02\x02\x02\u03CD\u03CF\x03\x02\x02\x02\u03CE\u03CC\x03" +
		"\x02\x02\x02\u03CF\u03D0\x07\x81\x02\x02\u03D0\u03D5\x03\x02\x02\x02\u03D1" +
		"\u03D2\x07\x9D\x02\x02\u03D2\u03D3\x07\x80\x02\x02\u03D3\u03D5\x07\x81" +
		"\x02\x02\u03D4\u03B9\x03\x02\x02\x02\u03D4\u03C5\x03\x02\x02\x02\u03D4" +
		"\u03D1\x03\x02\x02\x02\u03D5!\x03\x02\x02\x02\u03D6\u03DB\x05\x86D\x02" +
		"\u03D7\u03DB\x05\x84C\x02\u03D8\u03D9\x07u\x02\x02\u03D9\u03DB\x05\xD8" +
		"m\x02\u03DA\u03D6\x03\x02\x02\x02\u03DA\u03D7\x03\x02\x02\x02\u03DA\u03D8" +
		"\x03\x02\x02\x02\u03DB#\x03\x02\x02\x02\u03DC\u03DD\x07\x80\x02\x02\u03DD" +
		"\u03E2\x05*\x16\x02\u03DE\u03DF\x07\x8C\x02\x02\u03DF\u03E1\x05*\x16\x02" +
		"\u03E0\u03DE\x03\x02\x02\x02\u03E1\u03E4\x03\x02\x02\x02\u03E2\u03E0\x03" +
		"\x02\x02\x02\u03E2\u03E3\x03\x02\x02\x02\u03E3\u03E5\x03\x02\x02\x02\u03E4" +
		"\u03E2\x03\x02\x02\x02\u03E5\u03E6\x07\x81\x02\x02\u03E6%\x03\x02\x02" +
		"\x02\u03E7\u03F0\x07\x80\x02\x02\u03E8\u03ED\x056\x1C\x02\u03E9\u03EA" +
		"\x07\x8C\x02\x02\u03EA\u03EC\x056\x1C\x02\u03EB\u03E9\x03\x02\x02\x02" +
		"\u03EC\u03EF\x03\x02\x02\x02\u03ED\u03EB\x03\x02\x02\x02\u03ED\u03EE\x03" +
		"\x02\x02\x02\u03EE\u03F1\x03\x02\x02\x02\u03EF\u03ED\x03\x02\x02\x02\u03F0" +
		"\u03E8\x03\x02\x02\x02\u03F0\u03F1\x03\x02\x02\x02\u03F1\u03F2\x03\x02" +
		"\x02\x02\u03F2\u03F3\x07\x81\x02\x02\u03F3\'\x03\x02\x02\x02\u03F4\u03FA" +
		"\x05\x88E\x02\u03F5\u03FA\x05\x8AF\x02\u03F6\u03FA\x05\x8CG\x02\u03F7" +
		"\u03FA\x05\x90I\x02\u03F8\u03FA\x05\x8EH\x02\u03F9\u03F4\x03\x02\x02\x02" +
		"\u03F9\u03F5\x03\x02\x02\x02\u03F9\u03F6\x03\x02\x02\x02\u03F9\u03F7\x03" +
		"\x02\x02\x02\u03F9\u03F8\x03\x02\x02\x02\u03FA)\x03\x02\x02\x02\u03FB" +
		"\u0403\x05,\x17\x02\u03FC\u03FD\x07\x8B\x02\x02\u03FD\u03FE\x05\u025E" +
		"\u0130\x02\u03FE\u03FF\x07\x80\x02\x02\u03FF\u0400\x05,\x17\x02\u0400" +
		"\u0401\x07\x81\x02\x02\u0401\u0403\x03\x02\x02\x02\u0402\u03FB\x03\x02" +
		"\x02\x02\u0402\u03FC\x03\x02\x02\x02\u0403+\x03\x02\x02\x02\u0404\u0413" +
		"\x05.\x18\x02\u0405\u040A\x05.\x18\x02\u0406\u0407\x07\x8C\x02\x02\u0407" +
		"\u0409\x05.\x18\x02\u0408\u0406\x03\x02\x02\x02\u0409\u040C\x03\x02\x02" +
		"\x02\u040A\u0408\x03\x02\x02\x02\u040A\u040B\x03\x02\x02\x02\u040B\u040E" +
		"\x03\x02\x02\x02\u040C\u040A\x03\x02\x02\x02\u040D\u0405\x03\x02\x02\x02" +
		"\u040E\u0411\x03\x02\x02\x02\u040F\u040D\x03\x02\x02\x02\u040F\u0410\x03" +
		"\x02\x02\x02\u0410\u0413\x03\x02\x02\x02\u0411\u040F\x03\x02\x02\x02\u0412" +
		"\u0404\x03\x02\x02\x02\u0412\u040F\x03\x02\x02\x02\u0413-\x03\x02\x02" +
		"\x02\u0414\u0415\x05\u025E\u0130\x02\u0415\u0416\x05\u023E\u0120\x02\u0416" +
		"/\x03\x02\x02\x02\u0417\u0418\t\x02\x02\x02\u04181\x03\x02\x02\x02\u0419" +
		"\u041A\x050\x19\x02\u041A\u041B\x05\xB8]\x02\u041B3\x03\x02\x02\x02\u041C" +
		"\u041F\x05\u025E\u0130\x02\u041D\u041E\x07\x8B\x02\x02\u041E\u0420\x05" +
		"\u025E\u0130\x02\u041F\u041D\x03\x02\x02\x02\u041F\u0420\x03\x02\x02\x02" +
		"\u0420\u0427\x03\x02\x02\x02\u0421\u0424\x07\x05\x02\x02\u0422\u0423\x07" +
		"\x8B\x02\x02\u0423\u0425\x05\u025E\u0130\x02\u0424\u0422\x03\x02\x02\x02" +
		"\u0424\u0425\x03\x02\x02\x02\u0425\u0427\x03\x02\x02\x02\u0426\u041C\x03" +
		"\x02\x02\x02\u0426\u0421\x03\x02\x02\x02\u04275\x03\x02\x02\x02\u0428" +
		"\u042B\x052\x1A\x02\u0429\u042B\x054\x1B\x02\u042A\u0428\x03\x02\x02\x02" +
		"\u042A\u0429\x03\x02\x02\x02\u042A\u042B\x03\x02\x02\x02\u042B\u042C\x03" +
		"\x02\x02\x02\u042C\u0430\x05\u025E\u0130\x02\u042D\u042F\x05\xEEx\x02" +
		"\u042E\u042D\x03\x02\x02\x02\u042F\u0432\x03\x02\x02\x02\u0430\u042E\x03" +
		"\x02\x02\x02\u0430\u0431\x03\x02\x02\x02\u0431\u0435\x03\x02\x02\x02\u0432" +
		"\u0430\x03\x02\x02\x02\u0433\u0434\x07\x8E\x02\x02\u0434\u0436\x05\u020A" +
		"\u0106\x02\u0435\u0433\x03\x02\x02\x02\u0435\u0436\x03\x02\x02\x02\u0436" +
		"7\x03\x02\x02\x02\u0437\u0440\x07X\x02\x02\u0438\u0439\x07\x80\x02\x02" +
		"\u0439\u043C\x05:\x1E\x02\u043A\u043B\x07\x8C\x02\x02\u043B\u043D\x05" +
		"\u01F8\xFD\x02\u043C\u043A\x03\x02\x02\x02\u043C\u043D\x03\x02\x02\x02" +
		"\u043D\u043E\x03\x02\x02\x02\u043E\u043F\x07\x81\x02\x02\u043F\u0441\x03" +
		"\x02\x02\x02\u0440\u0438\x03\x02\x02\x02\u0440\u0441\x03\x02\x02\x02\u0441" +
		"\u0442\x03\x02\x02\x02\u0442\u045C\x07\x8A\x02\x02\u0443\u0448\x07Y\x02" +
		"\x02\u0444\u0445\x07\x80\x02\x02\u0445\u0446\x05\u01F8\xFD\x02\u0446\u0447" +
		"\x07\x81\x02\x02\u0447\u0449\x03\x02\x02\x02\u0448\u0444\x03\x02\x02\x02" +
		"\u0448\u0449\x03\x02\x02\x02\u0449\u044A\x03\x02\x02\x02\u044A\u045C\x07" +
		"\x8A\x02\x02\u044B\u0450\x07Z\x02\x02\u044C\u044D\x07\x80\x02\x02\u044D" +
		"\u044E\x05\u01F8\xFD\x02\u044E\u044F\x07\x81\x02\x02\u044F\u0451\x03\x02" +
		"\x02\x02\u0450\u044C\x03\x02\x02\x02\u0450\u0451\x03\x02\x02\x02\u0451" +
		"\u0452\x03\x02\x02\x02\u0452\u045C\x07\x8A\x02\x02\u0453\u0458\x07[\x02" +
		"\x02\u0454\u0455\x07\x80\x02\x02\u0455\u0456\x05\u01F8\xFD\x02\u0456\u0457" +
		"\x07\x81\x02\x02\u0457\u0459\x03\x02\x02\x02\u0458\u0454\x03\x02\x02\x02" +
		"\u0458\u0459\x03\x02\x02\x02\u0459\u045A\x03\x02\x02\x02\u045A\u045C\x07" +
		"\x8A\x02\x02\u045B\u0437\x03\x02\x02\x02\u045B\u0443\x03\x02\x02\x02\u045B" +
		"\u044B\x03\x02\x02\x02\u045B\u0453\x03\x02\x02\x02\u045C9\x03\x02\x02" +
		"\x02\u045D\u045E\x07\xD4\x02\x02\u045E;\x03\x02\x02\x02\u045F\u0469\x05" +
		"B\"\x02\u0460\u0469\x05\u0168\xB5\x02\u0461\u0469\x05\u015C\xAF\x02\u0462" +
		"\u0469\x05\u0166\xB4\x02\u0463\u0469\x05\u016A\xB6\x02\u0464\u0469\x05" +
		"\u014A\xA6\x02\u0465\u0469\x05\u0150\xA9\x02\u0466\u0469\x05\u0162\xB2" +
		"\x02\u0467\u0469\x058\x1D\x02\u0468\u045F\x03\x02\x02\x02\u0468\u0460" +
		"\x03\x02\x02\x02\u0468\u0461\x03\x02\x02\x02\u0468\u0462\x03\x02\x02\x02" +
		"\u0468\u0463\x03\x02\x02\x02\u0468\u0464\x03\x02\x02\x02\u0468\u0465\x03" +
		"\x02\x02";
	private static readonly _serializedATNSegment3: string =
		"\x02\u0468\u0466\x03\x02\x02\x02\u0468\u0467\x03\x02\x02\x02\u0469=\x03" +
		"\x02\x02\x02\u046A\u046B\x05(\x15\x02\u046B\u046C\x07\x8A\x02\x02\u046C" +
		"\u046F\x03\x02\x02\x02\u046D\u046F\x05D#\x02\u046E\u046A\x03\x02\x02\x02" +
		"\u046E\u046D\x03\x02\x02\x02\u046F?\x03\x02\x02\x02\u0470\u0474\x05<\x1F" +
		"\x02\u0471\u0474\x05\u012C\x97\x02\u0472\u0474\x05F$\x02\u0473\u0470\x03" +
		"\x02\x02\x02\u0473\u0471\x03\x02\x02\x02\u0473\u0472\x03\x02\x02\x02\u0474" +
		"A\x03\x02\x02\x02\u0475\u0478\x05\x80A\x02\u0476\u0478\x05\x9AN\x02\u0477" +
		"\u0475\x03\x02\x02\x02\u0477\u0476\x03\x02\x02\x02\u0478C\x03\x02\x02" +
		"\x02\u0479\u047E\x05@!\x02\u047A\u047E\x05\u0148\xA5\x02\u047B\u047E\x05" +
		"\n\x06\x02\u047C\u047E\x05\x1E\x10\x02\u047D\u0479\x03\x02\x02\x02\u047D" +
		"\u047A\x03\x02\x02\x02\u047D\u047B\x03\x02\x02\x02\u047D\u047C\x03\x02" +
		"\x02\x02\u047EE\x03\x02\x02\x02\u047F\u0480\x07\x1D\x02\x02\u0480\u0481" +
		"\x05\xCAf\x02\u0481\u0482\x07\x8A\x02\x02\u0482G\x03\x02\x02\x02\u0483" +
		"\u0487\x05<\x1F\x02\u0484\u0487\x05\u0114\x8B\x02\u0485\u0487\x05J&\x02" +
		"\u0486\u0483\x03\x02\x02\x02\u0486\u0484\x03\x02\x02\x02\u0486\u0485\x03" +
		"\x02\x02\x02\u0487I\x03\x02\x02\x02\u0488\u0489\x07=\x02\x02\u0489\u048A" +
		"\x05`1\x02\u048A\u048B\x07\x8A\x02\x02\u048B\u0492\x03\x02\x02\x02\u048C" +
		"\u048D\x07=\x02\x02\u048D\u048E\x07;\x02\x02\u048E\u048F\x05\u0110\x89" +
		"\x02\u048F\u0490\x07\x8A\x02\x02\u0490\u0492\x03\x02\x02\x02\u0491\u0488" +
		"\x03\x02\x02\x02\u0491\u048C\x03\x02\x02\x02\u0492K\x03\x02\x02\x02\u0493" +
		"\u0494\x05(\x15\x02\u0494\u0495\x07\x8A\x02\x02\u0495\u0498\x03\x02\x02" +
		"\x02\u0496\u0498\x05N(\x02\u0497\u0493\x03\x02\x02\x02\u0497\u0496\x03" +
		"\x02\x02\x02\u0498M\x03\x02\x02\x02\u0499\u049E\x05\u0148\xA5\x02\u049A" +
		"\u049E\x05H%\x02\u049B\u049E\x05\f\x07\x02\u049C\u049E\x05\x1E\x10\x02" +
		"\u049D\u0499\x03\x02\x02\x02\u049D\u049A\x03\x02\x02\x02\u049D\u049B\x03" +
		"\x02\x02\x02\u049D\u049C\x03\x02\x02\x02\u049EO\x03\x02\x02\x02\u049F" +
		"\u04A7\x05R*\x02\u04A0\u04A7\x05T+\x02\u04A1\u04A7\x05X-\x02\u04A2\u04A7" +
		"\x05\x12\n\x02\u04A3\u04A7\x05\x84C\x02\u04A4\u04A7\x05\x86D\x02\u04A5" +
		"\u04A7\x07\x8A\x02\x02\u04A6\u049F\x03\x02\x02\x02\u04A6\u04A0\x03\x02" +
		"\x02\x02\u04A6\u04A1\x03\x02\x02\x02\u04A6\u04A2\x03\x02\x02\x02\u04A6" +
		"\u04A3\x03\x02\x02\x02\u04A6\u04A4\x03\x02\x02\x02\u04A6\u04A5\x03\x02" +
		"\x02\x02\u04A7Q\x03\x02\x02\x02\u04A8\u04AA\x05\\/\x02\u04A9\u04A8\x03" +
		"\x02\x02\x02\u04AA\u04AD\x03\x02\x02\x02\u04AB\u04A9\x03\x02\x02\x02\u04AB" +
		"\u04AC\x03\x02\x02\x02\u04AC\u04AE\x03\x02\x02\x02\u04AD\u04AB\x03\x02" +
		"\x02\x02\u04AE\u04BF\x05\x92J\x02\u04AF\u04B3\x07d\x02\x02\u04B0\u04B2" +
		"\x05Z.\x02\u04B1\u04B0\x03\x02\x02\x02\u04B2\u04B5\x03\x02\x02\x02\u04B3" +
		"\u04B1\x03\x02\x02\x02\u04B3\u04B4\x03\x02\x02\x02\u04B4\u04B6\x03\x02" +
		"\x02\x02\u04B5\u04B3\x03\x02\x02\x02\u04B6\u04B7\x05\xA8U\x02\u04B7\u04BA" +
		"\x05\u025E\u0130\x02\u04B8\u04B9\x07\x8E\x02\x02\u04B9\u04BB\x05\u020A" +
		"\u0106\x02\u04BA\u04B8\x03\x02\x02\x02\u04BA\u04BB\x03\x02\x02\x02\u04BB" +
		"\u04BC\x03\x02\x02\x02\u04BC\u04BD\x07\x8A\x02\x02\u04BD\u04BF\x03\x02" +
		"\x02\x02\u04BE\u04AB\x03\x02\x02\x02\u04BE\u04AF\x03\x02\x02\x02\u04BF" +
		"S\x03\x02\x02\x02\u04C0\u04C2\x05^0\x02\u04C1\u04C0\x03\x02\x02\x02\u04C2" +
		"\u04C5\x03\x02\x02\x02\u04C3\u04C1\x03\x02\x02\x02\u04C3\u04C4\x03\x02" +
		"\x02\x02\u04C4\u04C6\x03\x02\x02\x02\u04C5\u04C3\x03\x02\x02\x02\u04C6" +
		"\u04F3\x05\u0102\x82\x02\u04C7\u04C9\x05^0\x02\u04C8\u04C7\x03\x02\x02" +
		"\x02\u04C9\u04CC\x03\x02\x02\x02\u04CA\u04C8\x03\x02\x02\x02\u04CA\u04CB" +
		"\x03\x02\x02\x02\u04CB\u04CD\x03\x02\x02\x02\u04CC\u04CA\x03\x02\x02\x02" +
		"\u04CD\u04F3\x05\xFC\x7F\x02\u04CE\u04CF\x07C\x02\x02\u04CF\u04D3\x07" +
		"B\x02\x02\u04D0\u04D2\x05Z.\x02\u04D1\u04D0\x03\x02\x02\x02\u04D2\u04D5" +
		"\x03\x02\x02\x02\u04D3\u04D1\x03\x02\x02\x02\u04D3\u04D4\x03\x02\x02\x02" +
		"\u04D4\u04D6\x03\x02\x02\x02\u04D5\u04D3\x03\x02\x02\x02\u04D6\u04D7\x05" +
		"`1\x02\u04D7\u04D8\x07\x8A\x02\x02\u04D8\u04F3\x03\x02\x02\x02\u04D9\u04DD" +
		"\x07=\x02\x02\u04DA\u04DC\x05^0\x02\u04DB\u04DA\x03\x02\x02\x02\u04DC" +
		"\u04DF\x03\x02\x02\x02\u04DD\u04DB\x03\x02\x02\x02\u04DD\u04DE\x03\x02" +
		"\x02\x02\u04DE\u04E0\x03\x02\x02\x02\u04DF\u04DD\x03\x02\x02\x02\u04E0" +
		"\u04E1\x05`1\x02\u04E1\u04E2\x07\x8A\x02\x02\u04E2\u04F3\x03\x02\x02\x02" +
		"\u04E3\u04E5\x05^0\x02\u04E4\u04E3\x03\x02\x02\x02\u04E5\u04E8\x03\x02" +
		"\x02\x02\u04E6\u04E4\x03\x02\x02\x02\u04E6\u04E7\x03\x02\x02\x02\u04E7" +
		"\u04E9\x03\x02\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E9\u04F3\x05b2\x02" +
		"\u04EA\u04EE\x07=\x02\x02\u04EB\u04ED\x05^0\x02\u04EC\u04EB\x03\x02\x02" +
		"\x02\u04ED\u04F0\x03\x02\x02\x02\u04EE\u04EC\x03\x02\x02\x02\u04EE\u04EF" +
		"\x03\x02\x02\x02\u04EF\u04F1\x03\x02\x02\x02\u04F0\u04EE\x03\x02\x02\x02" +
		"\u04F1\u04F3\x05V,\x02\u04F2\u04C3\x03\x02\x02\x02\u04F2\u04CA\x03\x02" +
		"\x02\x02\u04F2\u04CE\x03\x02\x02\x02\u04F2\u04D9\x03\x02\x02\x02\u04F2" +
		"\u04E6\x03\x02\x02\x02\u04F2\u04EA\x03\x02\x02\x02\u04F3U\x03\x02\x02" +
		"\x02\u04F4\u04F5\x07\x11\x02\x02\u04F5\u04FB\x07A\x02\x02\u04F6\u04F8" +
		"\x07\x80\x02\x02\u04F7\u04F9\x05\u0108\x85\x02\u04F8\u04F7\x03\x02\x02" +
		"\x02\u04F8\u04F9\x03\x02\x02\x02\u04F9\u04FA\x03\x02\x02\x02\u04FA\u04FC" +
		"\x07\x81\x02\x02\u04FB\u04F6\x03\x02\x02\x02\u04FB\u04FC\x03\x02\x02\x02" +
		"\u04FC\u04FD\x03\x02\x02\x02\u04FD\u04FE\x07\x8A\x02\x02\u04FEW\x03\x02" +
		"\x02\x02\u04FF\u0502\x05z>\x02\u0500\u0502\x05d3\x02\u0501\u04FF\x03\x02" +
		"\x02\x02\u0501\u0500\x03\x02\x02\x02\u0502Y\x03\x02\x02\x02\u0503\u0504" +
		"\t\x03\x02\x02\u0504[\x03\x02\x02\x02\u0505\u0508\x07r\x02\x02\u0506\u0508" +
		"\x05Z.\x02\u0507\u0505\x03\x02\x02\x02\u0507\u0506\x03\x02\x02\x02\u0508" +
		"]\x03\x02\x02\x02\u0509\u050B\x07C\x02\x02\u050A\u0509\x03\x02\x02\x02" +
		"\u050A\u050B\x03\x02\x02\x02\u050B\u050C\x03\x02\x02\x02\u050C\u050F\x07" +
		"B\x02\x02\u050D\u050F\x05Z.\x02\u050E\u050A\x03\x02\x02\x02\u050E\u050D" +
		"\x03\x02\x02\x02\u050F_\x03\x02\x02\x02\u0510\u0513\x05\u0110\x89\x02" +
		"\u0511\u0513\x05\u0100\x81\x02\u0512\u0510\x03\x02\x02\x02\u0512\u0511" +
		"\x03\x02\x02\x02\u0513a\x03\x02\x02\x02\u0514\u0516\x07\x11\x02\x02\u0515" +
		"\u0517\x05\xB2Z\x02\u0516\u0515\x03\x02\x02\x02\u0516\u0517\x03\x02\x02" +
		"\x02\u0517\u0518\x03\x02\x02\x02\u0518\u051E\x07A\x02\x02\u0519\u051B" +
		"\x07\x80\x02\x02\u051A\u051C\x05\u0108\x85\x02\u051B\u051A\x03\x02\x02" +
		"\x02\u051B\u051C\x03\x02\x02\x02\u051C\u051D\x03\x02\x02\x02\u051D\u051F" +
		"\x07\x81\x02\x02\u051E\u0519\x03\x02\x02\x02\u051E\u051F\x03\x02\x02\x02" +
		"\u051F\u0520\x03\x02\x02\x02\u0520\u0524\x07\x8A\x02\x02\u0521\u0523\x05" +
		"\u0112\x8A\x02\u0522\u0521\x03\x02\x02\x02\u0523\u0526\x03\x02\x02\x02" +
		"\u0524\u0522\x03\x02\x02\x02\u0524\u0525\x03\x02\x02\x02\u0525\u0531\x03" +
		"\x02\x02\x02\u0526\u0524\x03\x02\x02\x02\u0527\u0528\x07N\x02\x02\u0528" +
		"\u0529\x07\x8B\x02\x02\u0529\u052E\x07A\x02\x02\u052A\u052B\x07\x80\x02" +
		"\x02\u052B\u052C\x05\u01F8\xFD\x02\u052C\u052D\x07\x81\x02\x02\u052D\u052F" +
		"\x03\x02\x02\x02\u052E\u052A\x03\x02\x02\x02\u052E\u052F\x03\x02\x02\x02" +
		"\u052F\u0530\x03\x02\x02\x02\u0530\u0532\x07\x8A\x02\x02\u0531\u0527\x03" +
		"\x02\x02\x02\u0531\u0532\x03\x02\x02\x02\u0532\u0536\x03\x02\x02\x02\u0533" +
		"\u0535\x05\u0184\xC3\x02\u0534\u0533\x03\x02\x02\x02\u0535\u0538\x03\x02" +
		"\x02\x02\u0536\u0534\x03\x02\x02\x02\u0536\u0537\x03\x02\x02\x02\u0537" +
		"\u0539\x03\x02\x02\x02\u0538\u0536\x03\x02\x02\x02\u0539\u053C\x07\x12" +
		"\x02\x02\u053A\u053B\x07\x89\x02\x02\u053B\u053D\x07A\x02\x02\u053C\u053A" +
		"\x03\x02\x02\x02\u053C\u053D\x03\x02\x02\x02\u053Dc\x03\x02\x02\x02\u053E" +
		"\u0540\x07E\x02\x02\u053F\u053E\x03\x02\x02\x02\u053F\u0540\x03\x02\x02" +
		"\x02\u0540\u0541\x03\x02\x02\x02\u0541\u0542\x07c\x02\x02\u0542\u0543" +
		"\x05\u025E\u0130\x02\u0543\u0544\x05f4\x02\u0544e\x03\x02\x02\x02\u0545" +
		"\u0549\x07\x82\x02\x02\u0546\u0548\x05h5\x02\u0547\u0546\x03\x02\x02\x02" +
		"\u0548\u054B\x03\x02\x02\x02\u0549\u0547\x03\x02\x02\x02\u0549\u054A\x03" +
		"\x02\x02\x02\u054A\u054C\x03\x02\x02\x02\u054B\u0549\x03\x02\x02\x02\u054C" +
		"\u054D\x07\x83\x02\x02\u054Dg\x03\x02\x02\x02\u054E\u054F\x07|\x02\x02" +
		"\u054F\u0550\x05j6\x02\u0550\u0551\x07~\x02\x02\u0551\u0552\x05j6\x02" +
		"\u0552\u0553\x07\x8A\x02\x02\u0553\u0556\x03\x02\x02\x02\u0554\u0556\x05" +
		"n8\x02\u0555\u054E\x03\x02\x02\x02\u0555\u0554\x03\x02\x02\x02\u0556i" +
		"\x03\x02\x02\x02\u0557\u055C\x05l7\x02\u0558\u0559\x07\x8C\x02\x02\u0559" +
		"\u055B\x05l7\x02\u055A\u0558\x03\x02\x02\x02\u055B\u055E\x03\x02\x02\x02" +
		"\u055C\u055A\x03\x02\x02\x02\u055C\u055D\x03\x02\x02\x02\u055Dk\x03\x02" +
		"\x02\x02\u055E\u055C\x03\x02\x02\x02\u055F\u0560\x05\u0234\u011B\x02\u0560" +
		"\u0561\x07\x8B\x02\x02\u0561\u0564\x03\x02\x02\x02\u0562\u0564\x05\xB2" +
		"Z\x02\u0563\u055F\x03\x02\x02\x02\u0563\u0562\x03\x02\x02\x02\u0563\u0564" +
		"\x03\x02\x02\x02\u0564\u0565\x03\x02\x02\x02\u0565\u0566\x05\u0262\u0132" +
		"\x02\u0566\u0567\x05\u0238\u011D\x02\u0567m\x03\x02\x02\x02\u0568\u056A" +
		"\x07}\x02\x02\u0569\u0568\x03\x02\x02\x02\u0569\u056A\x03\x02\x02\x02" +
		"\u056A\u056B\x03\x02\x02\x02\u056B\u056C\x05\u012A\x96\x02\u056C\u056D" +
		"\x07\x8A\x02\x02\u056D\u0584\x03\x02\x02\x02\u056E\u056F\x05p9\x02\u056F" +
		"\u0570\x07\x8A\x02\x02\u0570\u0584\x03\x02\x02\x02\u0571\u0572\x05\u021A" +
		"\u010E\x02\u0572\u0573\x07Q\x02\x02\u0573\u0574\x05r:\x02\u0574\u0584" +
		"\x03\x02\x02\x02\u0575\u0576\x07\"\x02\x02\u0576\u0577\x07\x80\x02\x02" +
		"\u0577\u0578\x05\u021A\u010E\x02\u0578\u0579\x07\x81\x02\x02\u0579\u057C" +
		"\x05r:\x02\u057A\u057B\x07#\x02\x02\u057B\u057D\x05r:\x02\u057C\u057A" +
		"\x03\x02\x02\x02\u057C\u057D\x03\x02\x02\x02\u057D\u0584\x03\x02\x02\x02" +
		"\u057E\u057F\x07<\x02\x02\u057F\u0580\x07}\x02\x02\u0580\u0581\x05l7\x02" +
		"\u0581\u0582\x07\x8A\x02\x02\u0582\u0584\x03\x02\x02\x02\u0583\u0569\x03" +
		"\x02\x02\x02\u0583\u056E\x03\x02\x02\x02\u0583\u0571\x03\x02\x02\x02\u0583" +
		"\u0575\x03\x02\x02\x02\u0583\u057E\x03\x02\x02\x02\u0584o\x03\x02\x02" +
		"\x02\u0585\u0586\x071\x02\x02\u0586\u0587\x07\x82\x02\x02\u0587\u0588" +
		"\x05\u01B0\xD9\x02\u0588\u0589\x07\x83\x02\x02\u0589q\x03\x02\x02\x02" +
		"\u058A\u0594\x05n8\x02\u058B\u058F\x07\x82\x02\x02\u058C\u058E\x05n8\x02" +
		"\u058D\u058C\x03\x02\x02\x02\u058E\u0591\x03\x02\x02\x02\u058F\u058D\x03" +
		"\x02\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590\u0592\x03\x02\x02\x02\u0591" +
		"\u058F\x03\x02\x02\x02\u0592\u0594\x07\x83\x02\x02\u0593\u058A\x03\x02" +
		"\x02\x02\u0593\u058B\x03\x02\x02\x02\u0594s\x03\x02\x02\x02\u0595\u059A" +
		"\x05v<\x02\u0596\u0597\x07\x8C\x02\x02\u0597\u0599\x05v<\x02\u0598\u0596" +
		"\x03\x02\x02\x02\u0599\u059C\x03\x02\x02\x02\u059A\u0598\x03\x02\x02\x02" +
		"\u059A\u059B\x03\x02\x02\x02\u059Bu\x03\x02\x02\x02\u059C\u059A\x03\x02" +
		"\x02\x02\u059D\u059F\x05\u021E\u0110\x02\u059E\u05A0\x05x=\x02\u059F\u059E" +
		"\x03\x02\x02\x02\u059F\u05A0\x03\x02\x02\x02\u05A0w\x03\x02\x02\x02\u05A1" +
		"\u05A2\x07\xA3\x02\x02\u05A2\u05A6\x05\u021A\u010E\x02\u05A3\u05A4\x07" +
		"\xA4\x02\x02\u05A4\u05A6\x05\u021A\u010E\x02\u05A5\u05A1\x03\x02\x02\x02" +
		"\u05A5\u05A3\x03\x02\x02\x02\u05A6y\x03\x02\x02\x02\u05A7\u05A9\x05|?" +
		"\x02\u05A8\u05A7\x03\x02\x02\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9\u05AB" +
		"\x03\x02\x02\x02\u05AA\u05AC\x07E\x02\x02\u05AB\u05AA\x03\x02\x02\x02" +
		"\u05AB\u05AC\x03\x02\x02\x02\u05AC\u05AD\x03\x02\x02\x02\u05AD\u05AE\x07" +
		"c\x02\x02\u05AE\u05AF\x05\u025E\u0130\x02\u05AF\u05B0\x07\x8A\x02\x02" +
		"\u05B0{\x03\x02\x02\x02\u05B1\u05B2\t\x04\x02\x02\u05B2}\x03\x02\x02\x02" +
		"\u05B3\u05B8\x05\x80A\x02\u05B4\u05B8\x05\x82B\x02\u05B5\u05B8\x05\x98" +
		"M\x02\u05B6\u05B8\x05\x1E\x10\x02\u05B7\u05B3\x03\x02\x02\x02\u05B7\u05B4" +
		"\x03\x02\x02\x02\u05B7\u05B5\x03\x02\x02\x02\u05B7\u05B6\x03\x02\x02\x02" +
		"\u05B8\x7F\x03\x02\x02\x02\u05B9\u05C7\x05\x9CO\x02\u05BA\u05C7\x05\x92" +
		"J\x02\u05BB\u05C7\x05\u0102\x82\x02\u05BC\u05C7\x05\xFC\x7F\x02\u05BD" +
		"\u05C7\x05\x12\n\x02\u05BE\u05C7\x05b2\x02\u05BF\u05C0\x05\x84C\x02\u05C0" +
		"\u05C1\x07\x8A\x02\x02\u05C1\u05C7\x03\x02\x02\x02\u05C2\u05C3\x05\x86" +
		"D\x02\u05C3\u05C4\x07\x8A\x02\x02\u05C4\u05C7\x03\x02\x02\x02\u05C5\u05C7" +
		"\x07\x8A\x02\x02\u05C6\u05B9\x03\x02\x02\x02\u05C6\u05BA\x03\x02\x02\x02" +
		"\u05C6\u05BB\x03\x02\x02\x02\u05C6\u05BC\x03\x02\x02\x02\u05C6\u05BD\x03" +
		"\x02\x02\x02\u05C6\u05BE\x03\x02\x02\x02\u05C6\u05BF\x03\x02\x02\x02\u05C6" +
		"\u05C2\x03\x02\x02\x02\u05C6\u05C5\x03\x02\x02\x02\u05C7\x81\x03\x02\x02" +
		"\x02\u05C8\u05CE\x05\u0102\x82\x02\u05C9\u05CE\x05\xFC\x7F\x02\u05CA\u05CE" +
		"\x05\x12\n\x02\u05CB\u05CE\x05b2\x02\u05CC\u05CE\x07\x8A\x02\x02\u05CD" +
		"\u05C8\x03\x02\x02\x02\u05CD\u05C9\x03\x02\x02\x02\u05CD\u05CA\x03\x02" +
		"\x02\x02\u05CD\u05CB\x03\x02\x02\x02\u05CD\u05CC\x03\x02\x02\x02\u05CE" +
		"\x83\x03\x02\x02\x02\u05CF\u05D0\x07f\x02\x02\u05D0\u05D1\x05\xAAV\x02" +
		"\u05D1\u05D2\x05\xD2j\x02\u05D2\u05D7\x03\x02\x02\x02\u05D3\u05D4\x07" +
		"f\x02\x02\u05D4\u05D5\x07u\x02\x02\u05D5\u05D7\x05\xD8m\x02\u05D6\u05CF" +
		"\x03\x02\x02\x02\u05D6\u05D3\x03\x02\x02\x02\u05D7\x85\x03\x02\x02\x02" +
		"\u05D8\u05D9\x07e\x02\x02\u05D9\u05DA\x05\xAAV\x02\u05DA\u05DB\x05\xD2" +
		"j\x02\u05DB\u05E0\x03\x02\x02\x02\u05DC\u05DD\x07e\x02\x02\u05DD\u05DE" +
		"\x07u\x02\x02\u05DE\u05E0\x05\xD8m\x02\u05DF\u05D8\x03\x02\x02\x02\u05DF" +
		"\u05DC\x03\x02\x02\x02\u05E0\x87\x03\x02\x02\x02\u05E1\u05E2\x07b\x02" +
		"\x02\u05E2\u05E3\x05\xB8]\x02\u05E3\u05E4\x05\xD4k\x02\u05E4\x89\x03\x02" +
		"\x02\x02\u05E5\u05E6\x07`\x02\x02\u05E6\u05E7\x05\xB8]\x02\u05E7\u05E8" +
		"\x05\xD4k\x02\u05E8\u05EE\x03\x02\x02\x02\u05E9\u05EA\x07`\x02\x02\u05EA" +
		"\u05EB\x05\xBA^\x02\u05EB\u05EC\x05\xDEp\x02\u05EC\u05EE\x03\x02\x02\x02" +
		"\u05ED\u05E5\x03\x02\x02\x02\u05ED\u05E9\x03\x02\x02\x02\u05EE\x8B\x03" +
		"\x02\x02\x02\u05EF\u05F0\x07a\x02\x02\u05F0\u05F1\x05\xB8]\x02\u05F1\u05F2" +
		"\x05\xD4k\x02\u05F2\u05F8\x03\x02\x02\x02\u05F3\u05F4\x07a\x02\x02\u05F4" +
		"\u05F5\x05\xBA^\x02\u05F5\u05F6\x05\xDEp\x02\u05F6\u05F8\x03\x02\x02\x02" +
		"\u05F7\u05EF\x03\x02\x02\x02\u05F7\u05F3\x03\x02\x02\x02\u05F8\x8D\x03" +
		"\x02\x02\x02\u05F9\u05FA\x05\u025E\u0130\x02\u05FA\u05FB\x05\xCEh\x02" +
		"\u05FB\u05FC\x05\u025E\u0130\x02\u05FC\u05FD\x07\x8B\x02\x02\u05FD\u05FE" +
		"\x05\u025E\u0130\x02\u05FE\u05FF\x05\xCEh\x02\u05FF\x8F\x03\x02\x02\x02" +
		"\u0600\u0601\x07_\x02\x02\u0601\u0602\x05\xBA^\x02\u0602\u0603\x05\xDC" +
		"o\x02\u0603\x91\x03\x02\x02\x02\u0604\u0606\x07d\x02\x02\u0605\u0604\x03" +
		"\x02\x02\x02\u0605\u0606\x03\x02\x02\x02\u0606\u0608\x03\x02\x02\x02\u0607" +
		"\u0609\x07n\x02\x02\u0608\u0607\x03\x02\x02\x02\u0608\u0609\x03\x02\x02" +
		"\x02\u0609\u060B\x03\x02\x02\x02\u060A\u060C\x05\xA4S\x02\u060B\u060A" +
		"\x03\x02\x02\x02\u060B\u060C\x03\x02\x02\x02\u060C\u060D\x03\x02\x02\x02" +
		"\u060D\u060E\x05\xA8U\x02\u060E\u060F\x05\xDAn\x02\u060F\u0610\x07\x8A" +
		"\x02\x02\u0610\u0615\x03\x02\x02\x02\u0611\u0615\x05\x9EP\x02\u0612\u0615" +
		"\x05\x94K\x02\u0613\u0615\x05\xA2R\x02\u0614\u0605\x03\x02\x02\x02\u0614" +
		"\u0611\x03\x02\x02\x02\u0614\u0612\x03\x02\x02\x02\u0614\u0613\x03\x02" +
		"\x02\x02\u0615\x93\x03\x02\x02\x02\u0616\u0617\x07K\x02\x02\u0617\u061C" +
		"\x05\x96L\x02\u0618\u0619\x07\x8C\x02\x02\u0619\u061B\x05\x96L\x02\u061A" +
		"\u0618\x03\x02\x02\x02\u061B\u061E\x03\x02\x02\x02\u061C\u061A\x03\x02" +
		"\x02\x02\u061C\u061D\x03\x02\x02\x02\u061D\u061F\x03\x02\x02\x02\u061E" +
		"\u061C\x03\x02\x02\x02\u061F\u0620\x07\x8A\x02\x02\u0620\x95\x03\x02\x02" +
		"\x02\u0621\u0622\x05\u025E\u0130\x02\u0622\u0623\x07\xA8\x02\x02\u0623" +
		"\u0624\x05\u025E\u0130\x02\u0624\u062A\x03\x02\x02\x02\u0625\u0626\x05" +
		"\u025E\u0130\x02\u0626\u0627\x07\xA8\x02\x02\u0627\u0628\x07\x97\x02\x02" +
		"\u0628\u062A\x03\x02\x02\x02\u0629\u0621\x03\x02\x02\x02\u0629\u0625\x03" +
		"\x02\x02\x02\u062A\x97\x03\x02\x02\x02\u062B\u062C\x07L\x02\x02\u062C" +
		"\u062D\x07W\x02\x02\u062D\u0636\x07\x8A\x02\x02\u062E\u062F\x07L\x02\x02" +
		"\u062F\u0630\x05\x96L\x02\u0630\u0631\x07\x8C\x02\x02\u0631\u0632\x05" +
		"\x96L\x02\u0632\u0633\x03\x02\x02\x02\u0633\u0634\x07\x8A\x02\x02\u0634" +
		"\u0636\x03\x02\x02\x02\u0635\u062B\x03\x02\x02\x02\u0635\u062E\x03\x02" +
		"\x02\x02\u0636\x99\x03\x02\x02\x02\u0637\u0638\x07o\x02\x02\u0638\u0639" +
		"\x05\xCCg\x02\u0639\u063A\x07\x8A\x02\x02\u063A\x9B\x03\x02\x02\x02\u063B" +
		"\u063C\x07l\x02\x02\u063C\u063D\x05\xAAV\x02\u063D\u063E\x05\xD0i\x02" +
		"\u063E\u063F\x07\x8A\x02\x02\u063F\u0655\x03\x02\x02\x02\u0640\u0641\x05" +
		"\u025E\u0130\x02\u0641\u0642\x05\xD0i\x02\u0642\u0643\x07\x8A\x02\x02" +
		"\u0643\u0655\x03\x02\x02\x02\u0644\u0645\x07m\x02\x02\u0645\u0648\x05" +
		"\xACW\x02\u0646\u0647\x07\x9D\x02\x02\u0647\u0649\x05\xC8e\x02\u0648\u0646" +
		"\x03\x02\x02\x02\u0648\u0649\x03\x02\x02\x02\u0649\u064A\x03\x02\x02\x02" +
		"\u064A\u064B\x05\u025E\u0130\x02\u064B\u0650\x05\xEEx\x02\u064C\u064D" +
		"\x07\x8C\x02\x02\u064D\u064E\x05\u025E\u0130\x02\u064E\u064F\x05\xEEx" +
		"\x02\u064F\u0651\x03\x02\x02\x02\u0650\u064C\x03\x02\x02\x02\u0650\u0651" +
		"\x03\x02\x02\x02\u0651\u0652\x03\x02\x02\x02\u0652\u0653\x07\x8A\x02\x02" +
		"\u0653\u0655\x03\x02\x02\x02\u0654\u063B\x03\x02\x02\x02\u0654\u0640\x03" +
		"\x02\x02\x02\u0654\u0644\x03\x02\x02\x02\u0655\x9D\x03\x02\x02\x02\u0656" +
		"\u0657\x07I\x02\x02\u0657\u0658\x05\xA8U\x02\u0658\u065C\x05\u025E\u0130" +
		"\x02\u0659\u065B\x05\xF4{\x02\u065A\u0659\x03\x02\x02\x02\u065B\u065E" +
		"\x03\x02\x02\x02\u065C\u065A\x03\x02\x02\x02\u065C\u065D\x03\x02\x02\x02" +
		"\u065D\u065F\x03\x02\x02\x02\u065E\u065C\x03\x02\x02\x02\u065F\u0660\x07" +
		"\x8A\x02\x02\u0660\u0671\x03\x02\x02\x02\u0661\u0662\x07I\x02\x02\u0662" +
		"\u0663\x05\u025E\u0130\x02\u0663\u0664\x05\u023C\u011F\x02\u0664\u0665" +
		"\x07\x8B\x02\x02\u0665\u0666\x05\u025E\u0130\x02\u0666\u0667\x05\u025E" +
		"\u0130\x02\u0667\u0668\x07\x8A\x02\x02\u0668\u0671\x03\x02\x02\x02\u0669" +
		"\u066B\x07I\x02\x02\u066A\u066C\x05\xA0Q\x02\u066B\u066A\x03\x02\x02\x02" +
		"\u066B\u066C\x03\x02\x02\x02\u066C\u066D\x03\x02\x02\x02\u066D\u066E\x05" +
		"\u025E\u0130\x02\u066E\u066F\x07\x8A\x02\x02\u066F\u0671\x03\x02\x02\x02" +
		"\u0670\u0656\x03\x02\x02\x02\u0670\u0661\x03\x02\x02\x02\u0670\u0669\x03" +
		"\x02\x02\x02\u0671\x9F\x03\x02\x02\x02\u0672\u0679\x07v\x02\x02\u0673" +
		"\u0679\x07x\x02\x02\u0674\u0679\x07y\x02\x02\u0675\u0679\x07\x07\x02\x02" +
		"\u0676\u0677\x07\x05\x02\x02\u0677\u0679\x07\x07\x02\x02\u0678\u0672\x03" +
		"\x02\x02\x02\u0678\u0673\x03\x02\x02\x02\u0678\u0674\x03\x02\x02\x02\u0678" +
		"\u0675\x03\x02\x02\x02\u0678\u0676\x03\x02\x02\x02\u0679\xA1\x03\x02\x02" +
		"\x02\u067A\u067B\x07J\x02\x02\u067B\u067C\x05\xA8U\x02\u067C\u0684\x05" +
		"\u025E\u0130\x02\u067D\u0680\x074\x02\x02\u067E\u0681\x05\u025C\u012F" +
		"\x02\u067F\u0681\x05\xB2Z\x02\u0680\u067E\x03\x02\x02\x02\u0680\u067F" +
		"\x03\x02\x02\x02\u0681\u0682\x03\x02\x02\x02\u0682\u0683\x05\u025E\u0130" +
		"\x02\u0683\u0685\x03\x02\x02\x02\u0684\u067D\x03\x02\x02\x02\u0684\u0685" +
		"\x03\x02\x02\x02\u0685\u0686\x03\x02\x02\x02\u0686\u0687\x07\x8A\x02\x02" +
		"\u0687\u0692\x03\x02\x02\x02\u0688\u068B\x07J\x02\x02\u0689\u068C\x05" +
		"\u025C\u012F\x02\u068A\u068C\x05\xB2Z\x02\u068B\u0689\x03\x02\x02\x02" +
		"\u068B\u068A\x03\x02\x02\x02\u068C\u068D\x03\x02\x02\x02\u068D\u068E\x05" +
		"\u025E\u0130\x02\u068E\u068F\x05\u025E\u0130\x02\u068F\u0690\x07\x8A\x02" +
		"\x02\u0690\u0692\x03\x02\x02\x02\u0691\u067A\x03\x02\x02\x02\u0691\u0688" +
		"\x03\x02\x02\x02\u0692\xA3\x03\x02\x02\x02\u0693\u0694\t\x05\x02\x02\u0694" +
		"\xA5\x03\x02\x02\x02\u0695\u069C\x05\xBE`\x02\u0696\u069C\x05\u0228\u0115" +
		"\x02\u0697\u069C\x05\u024A\u0126\x02\u0698\u069C\x07g\x02\x02\u0699\u069C" +
		"\x07h\x02\x02\u069A\u069C\x07d\x02\x02\u069B\u0695\x03\x02\x02\x02\u069B" +
		"\u0696\x03\x02\x02\x02\u069B\u0697\x03\x02\x02\x02\u069B\u0698\x03\x02" +
		"\x02\x02\u069B\u0699\x03\x02\x02\x02\u069B\u069A\x03\x02\x02\x02\u069C" +
		"\xA7\x03\x02\x02\x02\u069D\u069F\x07j\x02\x02\u069E\u06A0\x07g\x02\x02" +
		"\u069F\u069E\x03\x02\x02\x02\u069F\u06A0\x03\x02\x02\x02\u06A0\u06A4\x03" +
		"\x02\x02\x02\u06A1\u06A3\x05\xF0y\x02\u06A2\u06A1\x03\x02\x02\x02\u06A3" +
		"\u06A6\x03\x02\x02\x02\u06A4\u06A2\x03\x02\x02\x02\u06A4\u06A5\x03\x02" +
		"\x02\x02\u06A5\u06F3\x03\x02\x02\x02\u06A6\u06A4\x03\x02\x02\x02\u06A7" +
		"\u06A9\x07i\x02\x02\u06A8\u06AA\x07g\x02\x02\u06A9\u06A8\x03\x02\x02\x02" +
		"\u06A9\u06AA\x03\x02\x02\x02\u06AA\u06F3\x03\x02\x02\x02\u06AB\u06F3\x07" +
		"k\x02\x02\u06AC\u06B1\x05\xC0a\x02\u06AD\u06AF\x07z\x02\x02\u06AE\u06B0" +
		"\x07g\x02\x02\u06AF\u06AE\x03\x02\x02\x02\u06AF\u06B0\x03\x02\x02\x02" +
		"\u06B0\u06B2\x03\x02\x02\x02\u06B1\u06AD\x03\x02\x02\x02\u06B1\u06B2\x03" +
		"\x02\x02\x02\u06B2\u06B3\x03\x02\x02\x02\u06B3\u06B5\x07\x82\x02\x02\u06B4" +
		"\u06B6\x05\xC4c\x02\u06B5\u06B4\x03\x02\x02\x02\u06B6\u06B7\x03\x02\x02" +
		"\x02\u06B7\u06B5\x03\x02\x02\x02\u06B7\u06B8\x03\x02\x02\x02\u06B8\u06B9" +
		"\x03\x02\x02\x02\u06B9\u06BD\x07\x83\x02\x02\u06BA\u06BC\x05\xF0y\x02" +
		"\u06BB\u06BA\x03\x02\x02\x02\u06BC\u06BF\x03\x02\x02\x02\u06BD\u06BB\x03" +
		"\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE\u06F3\x03\x02\x02\x02\u06BF" +
		"\u06BD\x03\x02\x02\x02\u06C0\u06C1\x07v\x02\x02\u06C1\u06C2\x05\xAEX\x02" +
		"\u06C2\u06C3\x07\x82\x02\x02\u06C3\u06C8\x05\xB0Y\x02\u06C4\u06C5\x07" +
		"\x8C\x02\x02\u06C5\u06C7\x05\xB0Y\x02\u06C6\u06C4\x03\x02\x02\x02\u06C7" +
		"\u06CA\x03\x02\x02\x02\u06C8\u06C6\x03\x02\x02\x02\u06C8\u06C9\x03\x02" +
		"\x02\x02\u06C9\u06CB\x03\x02\x02\x02\u06CA\u06C8\x03\x02\x02\x02\u06CB" +
		"\u06CF\x07\x83\x02\x02\u06CC\u06CE\x05\xF0y\x02\u06CD\u06CC\x03\x02\x02" +
		"\x02\u06CE\u06D1\x03\x02\x02\x02\u06CF\u06CD\x03\x02\x02\x02\u06CF\u06D0" +
		"\x03\x02\x02\x02\u06D0\u06F3\x03\x02\x02\x02\u06D1\u06CF\x03\x02\x02\x02" +
		"\u06D2\u06F3\x07h\x02\x02\u06D3\u06F3\x07P\x02\x02\u06D4\u06D6\x07B\x02" +
		"\x02\u06D5\u06D7\x07\x05\x02\x02\u06D6\u06D5\x03\x02\x02\x02\u06D6\u06D7" +
		"\x03\x02\x02\x02\u06D7\u06D8\x03\x02\x02\x02\u06D8\u06DC\x05\u025E\u0130" +
		"\x02\u06D9\u06DB\x05\u012E\x98\x02\u06DA\u06D9\x03\x02\x02\x02\u06DB\u06DE" +
		"\x03\x02\x02\x02\u06DC\u06DA\x03\x02\x02\x02\u06DC\u06DD\x03\x02\x02\x02" +
		"\u06DD\u06E1\x03\x02\x02\x02\u06DE\u06DC\x03\x02\x02\x02\u06DF\u06E0\x07" +
		"\x8B\x02\x02\u06E0\u06E2\x05\u025E\u0130\x02\u06E1\u06DF\x03\x02\x02\x02" +
		"\u06E1\u06E2\x03\x02\x02\x02\u06E2\u06F3\x03\x02\x02\x02\u06E3\u06E6\x05" +
		"\xB2Z\x02\u06E4\u06E6\x05\u025C\u012F\x02\u06E5\u06E3\x03\x02\x02\x02" +
		"\u06E5\u06E4\x03\x02\x02\x02\u06E5\u06E6\x03\x02\x02\x02\u06E6\u06E7\x03" +
		"\x02\x02\x02\u06E7\u06EB\x05\u025E\u0130\x02\u06E8\u06EA\x05\xF0y\x02" +
		"\u06E9\u06E8\x03\x02\x02\x02\u06EA\u06ED\x03\x02\x02\x02\u06EB\u06E9\x03" +
		"\x02\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06F3\x03\x02\x02\x02\u06ED" +
		"\u06EB\x03\x02\x02\x02\u06EE\u06F3\x05\xB4[\x02\u06EF\u06F3\x07Q\x02\x02" +
		"\u06F0\u06F3\x05\u0260\u0131\x02\u06F1\u06F3\x05\xC6d\x02\u06F2\u069D" +
		"\x03\x02\x02\x02\u06F2\u06A7\x03\x02\x02\x02\u06F2\u06AB\x03\x02\x02\x02" +
		"\u06F2\u06AC\x03\x02\x02\x02\u06F2\u06C0\x03\x02\x02\x02\u06F2\u06D2\x03" +
		"\x02\x02\x02\u06F2\u06D3\x03\x02\x02\x02\u06F2\u06D4\x03\x02\x02\x02\u06F2" +
		"\u06E5\x03\x02\x02\x02\u06F2\u06EE\x03\x02\x02\x02\u06F2\u06EF\x03\x02" +
		"\x02\x02\u06F2\u06F0\x03\x02\x02\x02\u06F2\u06F1\x03\x02\x02\x02\u06F3" +
		"\xA9\x03\x02\x02\x02\u06F4\u06F7\x05\xA8U\x02\u06F5\u06F7\x05\xACW\x02" +
		"\u06F6\u06F4\x03\x02\x02\x02\u06F6\u06F5\x03\x02\x02\x02\u06F7\xAB\x03" +
		"\x02\x02\x02\u06F8\u06FA\x07g\x02\x02\u06F9\u06F8\x03\x02\x02\x02\u06F9" +
		"\u06FA\x03\x02\x02\x02\u06FA\u06FE\x03\x02\x02\x02\u06FB\u06FD\x05\xF0" +
		"y\x02\u06FC\u06FB\x03\x02\x02\x02\u06FD\u0700\x03\x02\x02\x02\u06FE\u06FC" +
		"\x03\x02\x02\x02\u06FE\u06FF\x03\x02\x02\x02\u06FF\xAD\x03\x02\x02\x02" +
		"\u0700\u06FE\x03\x02\x02\x02\u0701\u0703\x07i\x02\x02\u0702\u0704\x07" +
		"g\x02\x02\u0703\u0702\x03\x02\x02\x02\u0703\u0704\x03\x02\x02\x02\u0704" +
		"\u0711\x03\x02\x02\x02\u0705\u0707\x07j\x02\x02\u0706\u0708\x07g\x02\x02" +
		"\u0707\u0706\x03\x02\x02\x02\u0707\u0708\x03\x02\x02\x02\u0708\u070A\x03" +
		"\x02\x02\x02\u0709\u070B\x05\xF0y\x02\u070A\u0709\x03\x02\x02\x02\u070A" +
		"\u070B\x03\x02\x02\x02\u070B\u0711\x03\x02\x02\x02\u070C\u070E\x05\u025E" +
		"\u0130\x02\u070D\u070F\x05\xF0y\x02\u070E\u070D\x03\x02\x02\x02\u070E" +
		"\u070F\x03\x02\x02\x02\u070F\u0711\x03\x02\x02\x02\u0710";
	private static readonly _serializedATNSegment4: string =
		"\u0701\x03\x02\x02\x02\u0710\u0705\x03\x02\x02\x02\u0710\u070C\x03\x02" +
		"\x02\x02\u0711\xAF\x03\x02\x02\x02\u0712\u071B\x05\u025E\u0130\x02\u0713" +
		"\u0714\x07\x84\x02\x02\u0714\u0717\x05\u024C\u0127\x02\u0715\u0716\x07" +
		"\x89\x02\x02\u0716\u0718\x05\u024C\u0127\x02\u0717\u0715\x03\x02\x02\x02" +
		"\u0717\u0718\x03\x02\x02\x02\u0718\u0719\x03\x02\x02\x02\u0719\u071A\x07" +
		"\x85\x02\x02\u071A\u071C\x03\x02\x02\x02\u071B\u0713\x03\x02\x02\x02\u071B" +
		"\u071C\x03\x02\x02\x02\u071C\u071F\x03\x02\x02\x02\u071D\u071E\x07\x8E" +
		"\x02\x02\u071E\u0720\x05\u021A\u010E\x02\u071F\u071D\x03\x02\x02\x02\u071F" +
		"\u0720\x03\x02\x02\x02\u0720\xB1\x03\x02\x02\x02\u0721\u0722\x05\xB4[" +
		"\x02\u0722\u0723\x07\xA8\x02\x02\u0723\xB3\x03\x02\x02\x02\u0724\u0726" +
		"\x05\u0260\u0131\x02\u0725\u0727\x05\u012E\x98\x02\u0726\u0725\x03\x02" +
		"\x02\x02\u0726\u0727\x03\x02\x02\x02\u0727\u072F\x03\x02\x02\x02\u0728" +
		"\u0729\x07\xA8\x02\x02\u0729\u072B\x05\u025E\u0130\x02\u072A\u072C\x05" +
		"\u012E\x98\x02\u072B\u072A\x03\x02\x02\x02\u072B\u072C\x03\x02\x02\x02" +
		"\u072C\u072E\x03\x02\x02\x02\u072D\u0728\x03\x02\x02\x02\u072E\u0731\x03" +
		"\x02\x02\x02\u072F\u072D\x03\x02\x02\x02\u072F\u0730\x03\x02\x02\x02\u0730" +
		"\xB5\x03\x02\x02\x02\u0731\u072F\x03\x02\x02\x02\u0732\u0733\t\x06\x02" +
		"\x02\u0733\xB7\x03\x02\x02\x02\u0734\u073C\x05\u025E\u0130\x02\u0735\u0737" +
		"\x07l\x02\x02\u0736\u0735\x03\x02\x02\x02\u0736\u0737\x03\x02\x02\x02" +
		"\u0737\u0738\x03\x02\x02\x02\u0738\u073C\x05\xAAV\x02\u0739\u073A\x07" +
		"m\x02\x02\u073A\u073C\x05\xACW\x02\u073B\u0734\x03\x02\x02\x02\u073B\u0736" +
		"\x03\x02\x02\x02\u073B\u0739\x03\x02\x02\x02\u073C\xB9\x03\x02\x02\x02" +
		"\u073D\u073E\x05\xBC_\x02\u073E\xBB\x03\x02\x02\x02\u073F\u0743\x05\xA8" +
		"U\x02\u0740\u0741\x07n\x02\x02\u0741\u0743\x05\xAAV\x02\u0742\u073F\x03" +
		"\x02\x02\x02\u0742\u0740\x03\x02\x02\x02\u0743\xBD\x03\x02\x02\x02\u0744" +
		"\u0748\x05\xB6\\\x02\u0745\u0748\x07k\x02\x02\u0746\u0748\x05\u0260\u0131" +
		"\x02\u0747\u0744\x03\x02\x02\x02\u0747\u0745\x03\x02\x02\x02\u0747\u0746" +
		"\x03\x02\x02\x02\u0748\xBF\x03\x02\x02\x02\u0749\u074F\x07x\x02\x02\u074A" +
		"\u074C\x07y\x02\x02\u074B\u074D\x07w\x02\x02\u074C\u074B\x03\x02\x02\x02" +
		"\u074C\u074D\x03\x02\x02\x02\u074D\u074F\x03\x02\x02\x02\u074E\u0749\x03" +
		"\x02\x02\x02\u074E\u074A\x03\x02\x02\x02\u074F\xC1\x03\x02\x02\x02\u0750" +
		"\u0753\x05\xA8U\x02\u0751\u0753\x07s\x02\x02\u0752\u0750\x03\x02\x02\x02" +
		"\u0752\u0751\x03\x02\x02\x02\u0753\xC3\x03\x02\x02\x02\u0754\u0756\x07" +
		"r\x02\x02\u0755\u0754\x03\x02\x02\x02\u0755\u0756\x03\x02\x02\x02\u0756" +
		"\u0757\x03\x02\x02\x02\u0757\u0758\x05\xC2b\x02\u0758\u0759\x05\xDAn\x02" +
		"\u0759\u075A\x07\x8A\x02\x02\u075A\xC5\x03\x02\x02\x02\u075B\u075C\x07" +
		"u\x02\x02\u075C\u075D\x07\x80\x02\x02\u075D\u075E\x05\u021A\u010E\x02" +
		"\u075E\u075F\x07\x81\x02\x02\u075F\u0766\x03\x02\x02\x02\u0760\u0761\x07" +
		"u\x02\x02\u0761\u0762\x07\x80\x02\x02\u0762\u0763\x05\xA8U\x02\u0763\u0764" +
		"\x07\x81\x02\x02\u0764\u0766\x03\x02\x02\x02\u0765\u075B\x03\x02\x02\x02" +
		"\u0765\u0760\x03\x02\x02\x02\u0766\xC7\x03\x02\x02\x02\u0767\u076D\x07" +
		"\xD4\x02\x02\u0768\u076D\x05\u0250\u0129\x02\u0769\u076D\x05\u0260\u0131" +
		"\x02\u076A\u076D\x05\u0232\u011A\x02\u076B\u076D\x07R\x02\x02\u076C\u0767" +
		"\x03\x02\x02\x02\u076C\u0768\x03\x02\x02\x02\u076C\u0769\x03\x02\x02\x02" +
		"\u076C\u076A\x03\x02\x02\x02\u076C\u076B\x03\x02\x02\x02\u076D\xC9\x03" +
		"\x02\x02\x02\u076E\u0773\x05\xE0q\x02\u076F\u0770\x07\x8C\x02\x02\u0770" +
		"\u0772\x05\xE0q\x02\u0771\u076F\x03\x02\x02\x02\u0772\u0775\x03\x02\x02" +
		"\x02\u0773\u0771\x03\x02\x02\x02\u0773\u0774\x03\x02\x02\x02\u0774\xCB" +
		"\x03\x02\x02\x02\u0775\u0773\x03\x02\x02\x02\u0776\u077B\x05\u025E\u0130" +
		"\x02\u0777\u0778\x07\x8C\x02\x02\u0778\u077A\x05\u025E\u0130\x02\u0779" +
		"\u0777\x03\x02\x02\x02\u077A\u077D\x03\x02\x02\x02\u077B\u0779\x03\x02" +
		"\x02\x02\u077B\u077C\x03\x02\x02\x02\u077C\xCD\x03\x02\x02\x02\u077D\u077B" +
		"\x03\x02\x02\x02\u077E\u0782\x05\u025E\u0130\x02\u077F\u0781\x05\xEEx" +
		"\x02\u0780\u077F\x03\x02\x02\x02\u0781\u0784\x03\x02\x02\x02\u0782\u0780" +
		"\x03\x02\x02\x02\u0782\u0783\x03\x02\x02\x02\u0783\u078F\x03\x02\x02\x02" +
		"\u0784\u0782\x03\x02\x02\x02\u0785\u0786\x07\x8C\x02\x02\u0786\u078A\x05" +
		"\u025E\u0130\x02\u0787\u0789\x05\xEEx\x02\u0788\u0787\x03\x02\x02\x02" +
		"\u0789\u078C\x03\x02\x02\x02\u078A\u0788\x03\x02\x02\x02\u078A\u078B\x03" +
		"\x02\x02\x02\u078B\u078E\x03\x02\x02\x02\u078C\u078A\x03\x02\x02\x02\u078D" +
		"\u0785\x03\x02\x02\x02\u078E\u0791\x03\x02\x02\x02\u078F\u078D\x03\x02" +
		"\x02\x02\u078F\u0790\x03\x02\x02\x02\u0790\xCF\x03\x02\x02\x02\u0791\u078F" +
		"\x03\x02\x02\x02\u0792\u0797\x05\xE2r\x02\u0793\u0794\x07\x8C\x02\x02" +
		"\u0794\u0796\x05\xE2r\x02\u0795\u0793\x03\x02\x02\x02\u0796\u0799\x03" +
		"\x02\x02\x02\u0797\u0795\x03\x02\x02\x02\u0797\u0798\x03\x02\x02\x02\u0798" +
		"\xD1\x03\x02\x02\x02\u0799\u0797\x03\x02\x02\x02\u079A\u079F\x05\xE4s" +
		"\x02\u079B\u079C\x07\x8C\x02\x02\u079C\u079E\x05\xE4s\x02\u079D\u079B" +
		"\x03\x02\x02\x02\u079E\u07A1\x03\x02\x02\x02\u079F\u079D\x03\x02\x02\x02" +
		"\u079F\u07A0\x03\x02\x02\x02\u07A0\xD3\x03\x02\x02\x02\u07A1\u079F\x03" +
		"\x02\x02\x02\u07A2\u07A6\x05\u025E\u0130\x02\u07A3\u07A5\x05\xEEx\x02" +
		"\u07A4\u07A3\x03\x02\x02\x02\u07A5\u07A8\x03\x02\x02\x02\u07A6\u07A4\x03" +
		"\x02\x02\x02\u07A6\u07A7\x03\x02\x02\x02\u07A7\u07B2\x03\x02\x02\x02\u07A8" +
		"\u07A6\x03\x02\x02\x02\u07A9\u07AD\x05\u025E\u0130\x02\u07AA\u07AC\x05" +
		"\xEEx\x02\u07AB\u07AA\x03\x02\x02\x02\u07AC\u07AF\x03\x02\x02\x02\u07AD" +
		"\u07AB\x03\x02\x02\x02\u07AD\u07AE\x03\x02\x02\x02\u07AE\u07B1\x03\x02" +
		"\x02\x02\u07AF\u07AD\x03\x02\x02\x02\u07B0\u07A9\x03\x02\x02\x02\u07B1" +
		"\u07B4\x03\x02\x02\x02\u07B2\u07B0\x03\x02\x02\x02\u07B2\u07B3\x03\x02" +
		"\x02\x02\u07B3\xD5\x03\x02\x02\x02\u07B4\u07B2\x03\x02\x02\x02\u07B5\u07B9" +
		"\x05\u025E\u0130\x02\u07B6\u07B8\x05\xF4{\x02\u07B7\u07B6\x03\x02\x02" +
		"\x02\u07B8\u07BB\x03\x02\x02\x02\u07B9\u07B7\x03\x02\x02\x02\u07B9\u07BA" +
		"\x03\x02\x02\x02\u07BA\u07BE\x03\x02\x02\x02\u07BB\u07B9\x03\x02\x02\x02" +
		"\u07BC\u07BD\x07\x8E\x02\x02\u07BD\u07BF\x05\u021A\u010E\x02\u07BE\u07BC" +
		"\x03\x02\x02\x02\u07BE\u07BF\x03\x02\x02\x02\u07BF\u07CD\x03\x02\x02\x02" +
		"\u07C0\u07C4\x05\u025E\u0130\x02\u07C1\u07C3\x05\xF4{\x02\u07C2\u07C1" +
		"\x03\x02\x02\x02\u07C3\u07C6\x03\x02\x02\x02\u07C4\u07C2\x03\x02\x02\x02" +
		"\u07C4\u07C5\x03\x02\x02\x02\u07C5\u07C9\x03\x02\x02\x02\u07C6\u07C4\x03" +
		"\x02\x02\x02\u07C7\u07C8\x07\x8E\x02\x02\u07C8\u07CA\x05\u021A\u010E\x02" +
		"\u07C9\u07C7\x03\x02\x02\x02\u07C9\u07CA\x03\x02\x02\x02\u07CA\u07CC\x03" +
		"\x02\x02\x02\u07CB\u07C0\x03\x02\x02\x02\u07CC\u07CF\x03\x02\x02\x02\u07CD" +
		"\u07CB\x03\x02\x02\x02\u07CD\u07CE\x03\x02\x02\x02\u07CE\xD7\x03\x02\x02" +
		"\x02\u07CF\u07CD\x03\x02\x02\x02\u07D0\u07D5\x05\xE6t\x02\u07D1\u07D2" +
		"\x07\x8C\x02\x02\u07D2\u07D4\x05\xE6t\x02\u07D3\u07D1\x03\x02\x02\x02" +
		"\u07D4\u07D7\x03\x02\x02\x02\u07D5\u07D3\x03\x02\x02\x02\u07D5\u07D6\x03" +
		"\x02\x02\x02\u07D6\xD9\x03\x02\x02\x02\u07D7\u07D5\x03\x02\x02\x02\u07D8" +
		"\u07DD\x05\xE8u\x02\u07D9\u07DA\x07\x8C\x02\x02\u07DA\u07DC\x05\xE8u\x02" +
		"\u07DB\u07D9\x03\x02\x02\x02\u07DC\u07DF\x03\x02\x02\x02\u07DD\u07DB\x03" +
		"\x02\x02\x02\u07DD\u07DE\x03\x02\x02\x02\u07DE\xDB\x03\x02\x02\x02\u07DF" +
		"\u07DD\x03\x02\x02\x02\u07E0\u07E4\x05\u025E\u0130\x02\u07E1\u07E3\x05" +
		"\xF4{\x02\u07E2\u07E1\x03\x02\x02\x02\u07E3\u07E6\x03\x02\x02\x02\u07E4" +
		"\u07E2\x03\x02\x02\x02\u07E4\u07E5\x03\x02\x02\x02\u07E5\u07F1\x03\x02" +
		"\x02\x02\u07E6\u07E4\x03\x02\x02\x02\u07E7\u07E8\x07\x8C\x02\x02\u07E8" +
		"\u07EC\x05\u025E\u0130\x02\u07E9\u07EB\x05\xF4{\x02\u07EA\u07E9\x03\x02" +
		"\x02\x02\u07EB\u07EE\x03\x02\x02\x02\u07EC\u07EA\x03\x02\x02\x02\u07EC" +
		"\u07ED\x03\x02\x02\x02\u07ED\u07F0\x03\x02\x02\x02\u07EE\u07EC\x03\x02" +
		"\x02\x02\u07EF\u07E7\x03\x02\x02\x02\u07F0\u07F3\x03\x02\x02\x02\u07F1" +
		"\u07EF\x03\x02\x02\x02\u07F1\u07F2\x03\x02\x02\x02\u07F2\xDD\x03\x02\x02" +
		"\x02\u07F3\u07F1\x03\x02\x02\x02\u07F4\u07F8\x05\u025E\u0130\x02\u07F5" +
		"\u07F7\x05\xF4{\x02\u07F6\u07F5\x03\x02\x02\x02\u07F7\u07FA\x03\x02\x02" +
		"\x02\u07F8\u07F6\x03\x02\x02\x02\u07F8\u07F9\x03\x02\x02\x02\u07F9\u07FD" +
		"\x03\x02\x02\x02\u07FA\u07F8\x03\x02\x02\x02\u07FB\u07FC\x07\x8E\x02\x02" +
		"\u07FC\u07FE\x05\u020A\u0106\x02\u07FD\u07FB\x03\x02\x02\x02\u07FD\u07FE" +
		"\x03\x02\x02\x02\u07FE\u080C\x03\x02\x02\x02\u07FF\u0803\x05\u025E\u0130" +
		"\x02\u0800\u0802\x05\xF4{\x02\u0801\u0800\x03\x02\x02\x02\u0802\u0805" +
		"\x03\x02\x02\x02\u0803\u0801\x03\x02\x02\x02\u0803\u0804\x03\x02\x02\x02" +
		"\u0804\u0808\x03\x02\x02\x02\u0805\u0803\x03\x02\x02\x02\u0806\u0807\x07" +
		"\x8E\x02\x02\u0807\u0809\x05\u020A\u0106\x02\u0808\u0806\x03\x02\x02\x02" +
		"\u0808\u0809\x03\x02\x02\x02\u0809\u080B\x03\x02\x02\x02\u080A\u07FF\x03" +
		"\x02\x02\x02\u080B\u080E\x03\x02\x02\x02\u080C\u080A\x03\x02\x02\x02\u080C" +
		"\u080D\x03\x02\x02\x02\u080D\xDF\x03\x02\x02\x02\u080E\u080C\x03\x02\x02" +
		"\x02\u080F\u0810\x05\u0262\u0132\x02\u0810\u0811\x07\x8E\x02\x02\u0811" +
		"\u0812\x05\u020C\u0107\x02\u0812\xE1\x03\x02\x02\x02\u0813\u0817\x05\u025E" +
		"\u0130\x02\u0814\u0816\x05\xEEx\x02\u0815\u0814\x03\x02\x02\x02\u0816" +
		"\u0819\x03\x02\x02\x02\u0817\u0815\x03\x02\x02\x02\u0817\u0818\x03\x02" +
		"\x02\x02\u0818\u081C\x03\x02\x02\x02\u0819\u0817\x03\x02\x02\x02\u081A" +
		"\u081B\x07\x8E\x02\x02\u081B\u081D\x05\u021A\u010E\x02\u081C\u081A\x03" +
		"\x02\x02\x02\u081C\u081D\x03\x02\x02\x02\u081D\xE3\x03\x02\x02\x02\u081E" +
		"\u0822\x05\u025E\u0130\x02\u081F\u0821\x05\xEEx\x02\u0820\u081F\x03\x02" +
		"\x02\x02\u0821\u0824\x03\x02\x02\x02\u0822\u0820\x03\x02\x02\x02\u0822" +
		"\u0823\x03\x02\x02\x02\u0823\u0827\x03\x02\x02\x02\u0824\u0822\x03\x02" +
		"\x02\x02\u0825\u0826\x07\x8E\x02\x02\u0826\u0828\x05\u020E\u0108\x02\u0827" +
		"\u0825\x03\x02\x02\x02\u0827\u0828\x03\x02\x02\x02\u0828\xE5\x03\x02\x02" +
		"\x02\u0829\u082A\x05\u025E\u0130\x02\u082A\u082B\x07\x8E\x02\x02\u082B" +
		"\u082C\x05\xA8U\x02\u082C\xE7\x03\x02\x02\x02\u082D\u0831\x05\u025E\u0130" +
		"\x02\u082E\u0830\x05\xF4{\x02\u082F\u082E\x03\x02\x02\x02\u0830\u0833" +
		"\x03\x02\x02\x02\u0831\u082F\x03\x02\x02\x02\u0831\u0832\x03\x02\x02\x02" +
		"\u0832\u0836\x03\x02\x02\x02\u0833\u0831\x03\x02\x02\x02\u0834\u0835\x07" +
		"\x8E\x02\x02\u0835\u0837\x05\u021A\u010E\x02\u0836\u0834\x03\x02\x02\x02" +
		"\u0836\u0837\x03\x02\x02\x02\u0837\u084A\x03\x02\x02\x02\u0838\u0839\x05" +
		"\u025E\u0130\x02\u0839\u083D\x05\xF8}\x02\u083A\u083C\x05\xF4{\x02\u083B" +
		"\u083A\x03\x02\x02\x02\u083C\u083F\x03\x02\x02\x02\u083D\u083B\x03\x02" +
		"\x02\x02\u083D\u083E\x03\x02\x02\x02\u083E\u0842\x03\x02\x02\x02\u083F" +
		"\u083D\x03\x02\x02\x02\u0840\u0841\x07\x8E\x02\x02\u0841\u0843\x05\xEC" +
		"w\x02\u0842\u0840\x03\x02\x02\x02\u0842\u0843\x03\x02\x02\x02\u0843\u084A" +
		"\x03\x02\x02\x02\u0844\u0847\x05\u025E\u0130\x02\u0845\u0846\x07\x8E\x02" +
		"\x02\u0846\u0848\x05\xEAv\x02\u0847\u0845\x03\x02\x02\x02\u0847\u0848" +
		"\x03\x02\x02\x02\u0848\u084A\x03\x02\x02\x02\u0849\u082D\x03\x02\x02\x02" +
		"\u0849\u0838\x03\x02\x02\x02\u0849\u0844\x03\x02\x02\x02\u084A\xE9\x03" +
		"\x02\x02\x02\u084B\u084D\x05\xB2Z\x02\u084C\u084B\x03\x02\x02\x02\u084C" +
		"\u084D\x03\x02\x02\x02\u084D\u084E\x03\x02\x02\x02\u084E\u0853\x07A\x02" +
		"\x02\u084F\u0850\x07\x80\x02\x02\u0850\u0851\x05\u01F8\xFD\x02\u0851\u0852" +
		"\x07\x81\x02\x02\u0852\u0854\x03\x02\x02\x02\u0853\u084F\x03\x02\x02\x02" +
		"\u0853\u0854\x03\x02\x02\x02\u0854\u0858\x03\x02\x02\x02\u0855\u0856\x07" +
		"A\x02\x02\u0856\u0858\x05\u021A\u010E\x02\u0857\u084C\x03\x02\x02\x02" +
		"\u0857\u0855\x03\x02\x02\x02\u0858\xEB\x03\x02\x02\x02\u0859\u085A\x07" +
		"A\x02\x02\u085A\u085B\x07\x84\x02\x02\u085B\u085C\x05\u021A\u010E\x02" +
		"\u085C\u0861\x07\x85\x02\x02\u085D\u085E\x07\x80\x02\x02\u085E\u085F\x05" +
		"\u021A\u010E\x02\u085F\u0860\x07\x81\x02\x02\u0860\u0862\x03\x02\x02\x02" +
		"\u0861\u085D\x03\x02\x02\x02\u0861\u0862\x03\x02\x02\x02\u0862\xED\x03" +
		"\x02\x02\x02\u0863\u0864\x07\x84\x02\x02\u0864\u0865\x05\u0216\u010C\x02" +
		"\u0865\u0866\x07\x85\x02\x02\u0866\u086C\x03\x02\x02\x02\u0867\u0868\x07" +
		"\x84\x02\x02\u0868\u0869\x05\u020A\u0106\x02\u0869\u086A\x07\x85\x02\x02" +
		"\u086A\u086C\x03\x02\x02\x02\u086B\u0863\x03\x02\x02\x02\u086B\u0867\x03" +
		"\x02\x02\x02\u086C\xEF\x03\x02\x02\x02\u086D\u086E\x07\x84\x02\x02\u086E" +
		"\u086F\x05\u0216\u010C\x02\u086F\u0870\x07\x85\x02\x02\u0870\u0873\x03" +
		"\x02\x02\x02\u0871\u0873\x05\xF8}\x02\u0872\u086D\x03\x02\x02\x02\u0872" +
		"\u0871\x03\x02\x02\x02\u0873\xF1\x03\x02\x02\x02\u0874\u0875\x07\x84\x02" +
		"\x02\u0875\u0876\x05\xA8U\x02\u0876\u0877\x07\x85\x02\x02\u0877\u087C" +
		"\x03\x02\x02\x02\u0878\u0879\x07\x84\x02\x02\u0879\u087A\x07\x97\x02\x02" +
		"\u087A\u087C\x07\x85\x02\x02\u087B\u0874\x03\x02\x02\x02\u087B\u0878\x03" +
		"\x02\x02\x02\u087C\xF3\x03\x02\x02\x02\u087D\u0882\x05\xF8}\x02\u087E" +
		"\u0882\x05\xEEx\x02\u087F\u0882\x05\xF2z\x02\u0880\u0882\x05\xF6|\x02" +
		"\u0881\u087D\x03\x02\x02\x02\u0881\u087E\x03\x02\x02\x02\u0881\u087F\x03" +
		"\x02\x02\x02\u0881\u0880\x03\x02\x02\x02\u0882\xF5\x03\x02\x02\x02\u0883" +
		"\u0884\x07\x84\x02\x02\u0884\u0887\x07\x9C\x02\x02\u0885\u0886\x07\x89" +
		"\x02\x02\u0886\u0888\x05\u020A\u0106\x02\u0887\u0885\x03\x02\x02\x02\u0887" +
		"\u0888\x03\x02\x02\x02\u0888\u0889\x03\x02\x02\x02\u0889\u088A\x07\x85" +
		"\x02\x02\u088A\xF7\x03\x02\x02\x02\u088B\u088C\x07\x84\x02\x02\u088C\u088D" +
		"\x07\x85\x02\x02\u088D\xF9\x03\x02\x02\x02\u088E\u0891\x05\xC2b\x02\u088F" +
		"\u0891\x05\xACW\x02\u0890\u088E\x03\x02\x02\x02\u0890\u088F\x03\x02\x02" +
		"\x02\u0891\xFB\x03\x02\x02\x02\u0892\u0894\x07\x11\x02\x02\u0893\u0895" +
		"\x05\xA4S\x02\u0894\u0893\x03\x02\x02\x02\u0894\u0895\x03\x02\x02\x02" +
		"\u0895\u0896\x03\x02\x02\x02\u0896\u0897\x05\xFE\x80\x02\u0897\xFD\x03" +
		"\x02\x02\x02\u0898\u089D\x05\xFA~\x02\u0899\u089A\x05\u025E\u0130\x02" +
		"\u089A\u089B\x07\x8B\x02\x02\u089B\u089E\x03\x02\x02\x02\u089C\u089E\x05" +
		"\xB2Z\x02\u089D\u0899\x03\x02\x02\x02\u089D\u089C\x03\x02\x02\x02\u089D" +
		"\u089E\x03\x02\x02\x02\u089E\u089F\x03\x02\x02\x02\u089F\u08A0\x05\u025E" +
		"\u0130\x02\u08A0\u08A4\x07\x8A\x02\x02\u08A1\u08A3\x05\u0106\x84\x02\u08A2" +
		"\u08A1\x03\x02\x02\x02\u08A3\u08A6\x03\x02\x02\x02\u08A4\u08A2\x03\x02" +
		"\x02\x02\u08A4\u08A5\x03\x02\x02\x02\u08A5\u08AA\x03\x02\x02\x02\u08A6" +
		"\u08A4\x03\x02\x02\x02\u08A7\u08A9\x05\u0184\xC3\x02\u08A8\u08A7\x03\x02" +
		"\x02\x02\u08A9\u08AC\x03\x02\x02\x02\u08AA\u08A8\x03\x02\x02\x02\u08AA" +
		"\u08AB\x03\x02\x02\x02\u08AB\u08AD\x03\x02\x02\x02\u08AC\u08AA\x03\x02" +
		"\x02\x02\u08AD\u08B0\x07\x12\x02\x02\u08AE\u08AF\x07\x89\x02\x02\u08AF" +
		"\u08B1\x05\u025E\u0130\x02\u08B0\u08AE\x03\x02\x02\x02\u08B0\u08B1\x03" +
		"\x02\x02\x02\u08B1\u08D2\x03\x02\x02\x02\u08B2\u08B7\x05\xFA~\x02\u08B3" +
		"\u08B4\x05\u025E\u0130\x02\u08B4\u08B5\x07\x8B\x02\x02\u08B5\u08B8\x03" +
		"\x02\x02\x02\u08B6\u08B8\x05\xB2Z\x02\u08B7\u08B3\x03\x02\x02\x02\u08B7" +
		"\u08B6\x03\x02\x02\x02\u08B7\u08B8\x03\x02\x02\x02\u08B8\u08B9\x03\x02" +
		"\x02\x02\u08B9\u08BA\x05\u025E\u0130\x02\u08BA\u08BC\x07\x80\x02\x02\u08BB" +
		"\u08BD\x05\u0108\x85\x02\u08BC\u08BB\x03\x02\x02\x02\u08BC\u08BD\x03\x02" +
		"\x02\x02\u08BD\u08BE\x03\x02\x02\x02\u08BE\u08BF\x07\x81\x02\x02\u08BF" +
		"\u08C3\x07\x8A\x02\x02\u08C0\u08C2\x05\u0112\x8A\x02\u08C1\u08C0\x03\x02" +
		"\x02\x02\u08C2\u08C5\x03\x02\x02\x02\u08C3\u08C1\x03\x02\x02\x02\u08C3" +
		"\u08C4\x03\x02\x02\x02\u08C4\u08C9\x03\x02\x02\x02\u08C5\u08C3\x03\x02" +
		"\x02\x02\u08C6\u08C8\x05\u0184\xC3\x02\u08C7\u08C6\x03\x02\x02\x02\u08C8" +
		"\u08CB\x03\x02\x02\x02\u08C9\u08C7\x03\x02\x02\x02\u08C9\u08CA\x03\x02" +
		"\x02\x02\u08CA\u08CC\x03\x02\x02\x02\u08CB\u08C9\x03\x02\x02\x02\u08CC" +
		"\u08CF\x07\x12\x02\x02\u08CD\u08CE\x07\x89\x02\x02\u08CE\u08D0\x05\u025E" +
		"\u0130\x02\u08CF\u08CD\x03\x02\x02\x02\u08CF\u08D0\x03\x02\x02\x02\u08D0" +
		"\u08D2\x03\x02\x02\x02\u08D1\u0898\x03\x02\x02\x02\u08D1\u08B2\x03\x02" +
		"\x02\x02\u08D2\xFF\x03\x02\x02\x02\u08D3\u08D4\x07\x11\x02\x02\u08D4\u08D5" +
		"\x05\xC2b\x02\u08D5\u08DB\x05\u025E\u0130\x02\u08D6\u08D8\x07\x80\x02" +
		"\x02\u08D7\u08D9\x05\u0108\x85\x02\u08D8\u08D7\x03\x02\x02\x02\u08D8\u08D9" +
		"\x03\x02\x02\x02\u08D9\u08DA\x03\x02\x02\x02\u08DA\u08DC\x07\x81\x02\x02" +
		"\u08DB\u08D6\x03\x02\x02\x02\u08DB\u08DC\x03\x02\x02\x02\u08DC\u0101\x03" +
		"\x02\x02\x02\u08DD\u08DF\x07\x0F\x02\x02\u08DE\u08E0\x05\xA4S\x02\u08DF" +
		"\u08DE\x03\x02\x02\x02\u08DF\u08E0\x03\x02\x02\x02\u08E0\u08E1\x03\x02" +
		"\x02\x02\u08E1\u08E2\x05\u0104\x83\x02\u08E2\u0103\x03\x02\x02\x02\u08E3" +
		"\u08E4\x05\u025E\u0130\x02\u08E4\u08E5\x07\x8B\x02\x02\u08E5\u08E8\x03" +
		"\x02\x02\x02\u08E6\u08E8\x05\xB2Z\x02\u08E7\u08E3\x03\x02\x02\x02\u08E7" +
		"\u08E6\x03\x02\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08E9\x03\x02" +
		"\x02\x02\u08E9\u08EA\x05\u025E\u0130\x02\u08EA\u08EE\x07\x8A\x02\x02\u08EB" +
		"\u08ED\x05\u0106\x84\x02\u08EC\u08EB\x03\x02\x02\x02\u08ED\u08F0\x03\x02" +
		"\x02\x02\u08EE\u08EC\x03\x02\x02\x02\u08EE\u08EF\x03\x02\x02\x02\u08EF" +
		"\u08F4\x03\x02\x02\x02\u08F0\u08EE\x03\x02\x02\x02\u08F1\u08F3\x05\u017C" +
		"\xBF\x02\u08F2\u08F1\x03\x02\x02\x02\u08F3\u08F6\x03\x02\x02\x02\u08F4" +
		"\u08F2\x03\x02\x02\x02\u08F4\u08F5\x03\x02\x02\x02\u08F5\u08F7\x03\x02" +
		"\x02\x02\u08F6\u08F4\x03\x02\x02\x02\u08F7\u08FA\x07\x10\x02\x02\u08F8" +
		"\u08F9\x07\x89\x02\x02\u08F9\u08FB\x05\u025E\u0130\x02\u08FA\u08F8\x03" +
		"\x02\x02\x02\u08FA\u08FB\x03\x02\x02\x02\u08FB\u091B\x03\x02\x02\x02\u08FC" +
		"\u08FD\x05\u025E\u0130\x02\u08FD\u08FE\x07\x8B\x02\x02\u08FE\u0901\x03" +
		"\x02\x02\x02\u08FF\u0901\x05\xB2Z\x02\u0900\u08FC\x03\x02\x02\x02\u0900" +
		"\u08FF\x03\x02\x02\x02\u0900\u0901\x03\x02\x02\x02\u0901\u0902\x03\x02" +
		"\x02\x02\u0902\u0903\x05\u025E\u0130\x02\u0903\u0905\x07\x80\x02\x02\u0904" +
		"\u0906\x05\u0108\x85\x02\u0905\u0904\x03\x02\x02\x02\u0905\u0906\x03\x02" +
		"\x02\x02\u0906\u0907\x03\x02\x02\x02\u0907\u0908\x07\x81\x02\x02\u0908" +
		"\u090C\x07\x8A\x02\x02\u0909\u090B\x05\u0112\x8A\x02\u090A\u0909\x03\x02" +
		"\x02\x02\u090B\u090E\x03\x02\x02\x02\u090C\u090A\x03\x02\x02\x02\u090C" +
		"\u090D\x03\x02\x02\x02\u090D\u0912\x03\x02\x02\x02\u090E\u090C\x03\x02" +
		"\x02\x02\u090F\u0911\x05\u017C\xBF\x02\u0910\u090F\x03\x02\x02\x02\u0911" +
		"\u0914\x03\x02\x02\x02\u0912\u0910\x03\x02\x02\x02\u0912\u0913\x03\x02" +
		"\x02\x02\u0913\u0915\x03\x02\x02\x02\u0914\u0912\x03\x02\x02\x02\u0915" +
		"\u0918\x07\x10\x02\x02\u0916\u0917\x07\x89\x02\x02\u0917\u0919\x05\u025E" +
		"\u0130\x02\u0918\u0916\x03\x02\x02\x02\u0918\u0919\x03\x02\x02\x02\u0919" +
		"\u091B\x03\x02\x02\x02\u091A\u08E7\x03\x02\x02\x02\u091A\u0900\x03\x02" +
		"\x02\x02\u091B\u0105\x03\x02\x02\x02\u091C\u091F\x05\u0112\x8A\x02\u091D" +
		"\u091F\x05\u010E\x88\x02\u091E\u091C\x03\x02\x02\x02\u091E\u091D\x03\x02" +
		"\x02\x02\u091F\u0107\x03\x02\x02\x02\u0920\u0925\x05\u010A\x86\x02\u0921" +
		"\u0922\x07\x8C\x02\x02\u0922\u0924\x05\u010A\x86\x02\u0923\u0921\x03\x02" +
		"\x02\x02\u0924\u0927\x03\x02\x02\x02\u0925\u0923\x03\x02\x02\x02\u0925" +
		"\u0926\x03\x02\x02\x02\u0926\u0109\x03\x02\x02\x02\u0927\u0925\x03\x02" +
		"\x02\x02\u0928\u092A\x05\u010C\x87\x02\u0929\u0928\x03\x02\x02\x02\u0929" +
		"\u092A\x03\x02\x02\x02\u092A\u092C\x03\x02\x02\x02\u092B\u092D\x07n\x02" +
		"\x02\u092C\u092B\x03\x02\x02\x02\u092C\u092D\x03\x02\x02\x02\u092D\u092E" +
		"\x03\x02\x02\x02\u092E\u092F\x05\xAAV\x02\u092F\u0933\x05\u025E\u0130" +
		"\x02\u0930\u0932\x05\xF4{\x02\u0931\u0930\x03\x02\x02\x02\u0932\u0935" +
		"\x03\x02\x02\x02\u0933\u0931\x03\x02\x02\x02\u0933\u0934\x03\x02\x02\x02" +
		"\u0934\u0938\x03\x02\x02\x02\u0935\u0933\x03\x02\x02\x02\u0936\u0937\x07" +
		"\x8E\x02\x02\u0937\u0939\x05\u021A\u010E\x02\u0938\u0936\x03\x02\x02\x02" +
		"\u0938\u0939\x03\x02\x02\x02\u0939\u010B\x03\x02\x02\x02\u093A\u093E\x05" +
		"0\x19\x02\u093B\u093C\x07d\x02\x02\u093C\u093E\x07_\x02\x02\u093D\u093A" +
		"\x03\x02\x02\x02\u093D\u093B\x03\x02\x02\x02\u093E\u010D\x03\x02\x02\x02" +
		"\u093F\u0941\x05\u010C\x87\x02\u0940\u0942\x07n\x02\x02\u0941\u0940\x03" +
		"\x02\x02\x02\u0941\u0942\x03\x02\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943" +
		"\u0944\x05\xAAV\x02\u0944\u0945\x05\xD6l\x02\u0945\u0946\x07\x8A\x02\x02" +
		"\u0946\u010F\x03\x02\x02\x02\u0947\u0948\x07\x0F\x02\x02\u0948\u094D\x05" +
		"\u025E\u0130\x02\u0949\u094A\x07\x80\x02\x02\u094A\u094B\x05\u0108\x85" +
		"\x02\u094B\u094C\x07\x81\x02\x02\u094C\u094E\x03\x02\x02\x02\u094D\u0949" +
		"\x03\x02\x02\x02\u094D\u094E\x03\x02\x02\x02\u094E\u0111\x03\x02\x02\x02" +
		"\u094F\u0957\x05\x92J\x02\u0950\u0951\x05\x84C\x02\u0951\u0952\x07\x8A" +
		"\x02\x02\u0952\u0957\x03\x02\x02\x02\u0953\u0954\x05\x86D\x02\u0954\u0955" +
		"\x07\x8A\x02\x02\u0955\u0957\x03\x02\x02\x02\u0956\u094F\x03\x02\x02\x02" +
		"\u0956\u0950\x03\x02\x02\x02\u0956\u0953\x03\x02\x02\x02\u0957\u0113\x03" +
		"\x02\x02\x02\u0958\u0959\x07\x14\x02\x02\u0959\u095E\x05\u0116\x8C\x02" +
		"\u095A\u095B\x07\x8C\x02\x02\u095B\u095D\x05\u0116\x8C\x02\u095C\u095A" +
		"\x03\x02\x02\x02\u095D\u0960\x03\x02\x02\x02\u095E\u095C\x03\x02\x02\x02" +
		"\u095E\u095F\x03\x02\x02\x02\u095F\u0961\x03\x02\x02\x02\u0960\u095E\x03" +
		"\x02\x02\x02\u0961\u0962\x07\x8A\x02\x02\u0962\u0115\x03\x02\x02\x02\u0963" +
		"\u0964\x05\u025E\u0130\x02\u0964\u0965\x07\x80\x02\x02\u0965\u096A\x05" +
		"\u0118\x8D\x02\u0966\u0967\x07\x8C\x02\x02\u0967\u0969\x05\u0118\x8D\x02" +
		"\u0968\u0966\x03\x02\x02\x02\u0969\u096C\x03\x02\x02\x02\u096A\u0968\x03" +
		"\x02\x02\x02\u096A\u096B\x03\x02\x02\x02\u096B\u096D\x03\x02\x02\x02\u096C" +
		"\u096A\x03\x02\x02\x02\u096D\u096E\x07\x81\x02\x02\u096E\u0117\x03\x02" +
		"\x02\x02\u096F\u0973\x05\u011C\x8F\x02\u0970\u0973\x05\u0120\x91\x02\u0971" +
		"\u0973\x05\u011A\x8E\x02\u0972\u096F\x03\x02\x02\x02\u0972\u0970\x03\x02" +
		"\x02\x02\u0972\u0971\x03\x02\x02\x02\u0973\u0119\x03\x02\x02\x02\u0974" +
		"\u0975\x07\x13\x02\x02\u0975\u0976\x05\u025E\u0130\x02\u0976\u011B\x03" +
		"\x02\x02\x02\u0977\u0978\x050\x19\x02\u0978\u097D\x05\u011E\x90\x02\u0979" +
		"\u097A\x07\x8C\x02\x02\u097A\u097C\x05\u011E\x90\x02\u097B\u0979\x03\x02" +
		"\x02\x02\u097C\u097F\x03\x02\x02\x02\u097D\u097B\x03\x02\x02\x02\u097D" +
		"\u097E\x03\x02\x02\x02\u097E\u011D\x03\x02\x02\x02\u097F\u097D\x03\x02" +
		"\x02\x02\u0980\u098A\x05\u025E\u0130\x02\u0981\u0982\x07\x8B\x02\x02\u0982" +
		"\u0983\x05\u025E\u0130\x02\u0983\u0985\x07\x80\x02\x02\u0984\u0986\x05" +
		"\u021A\u010E\x02\u0985\u0984\x03\x02\x02\x02\u0985\u0986\x03\x02\x02\x02" +
		"\u0986\u0987\x03\x02\x02\x02\u0987\u0988\x07\x81\x02\x02\u0988\u098A\x03" +
		"\x02\x02\x02\u0989\u0980\x03\x02\x02\x02\u0989\u0981\x03\x02\x02\x02\u098A" +
		"\u011F\x03\x02\x02\x02\u098B\u098C\x05\u0124\x93\x02\u098C\u098D\x05\u0122" +
		"\x92\x02\u098D\u098E\x07\x8C\x02\x02\u098E\u098F\x05\u0122\x92\x02\u098F" +
		"\u0121\x03\x02\x02\x02\u0990\u0993\x05`1\x02\u0991\u0993\x05\u025E\u0130" +
		"\x02\u0992\u0990\x03\x02\x02\x02\u0992\u0991\x03\x02\x02\x02\u0993\u0123" +
		"\x03\x02\x02\x02\u0994\u0995\t\x07\x02\x02\u0995\u0125\x03\x02\x02\x02" +
		"\u0996\u0997\x05\u025E\u0130\x02\u0997\u0998\x07\x89\x02\x02\u0998\u099A" +
		"\x03\x02\x02\x02\u0999\u0996\x03\x02\x02\x02\u0999\u099A\x03\x02\x02\x02" +
		"\u099A\u099B\x03\x02\x02\x02\u099B\u099E\x05\u0128\x95\x02\u099C\u099E" +
		"\x05\u0144\xA3\x02\u099D\u0999\x03\x02\x02\x02\u099D\u099C\x03\x02\x02" +
		"\x02\u099E\u0127\x03\x02\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u0129" +
		"\x03\x02\x02\x02\u09A1\u09A7\x05\u021A\u010E\x02\u09A2\u09A3\x07@\x02" +
		"\x02\u09A3\u09A4\x07\x82\x02\x02\u09A4\u09A5\x05t;\x02\u09A5\u09A6\x07" +
		"\x83\x02\x02\u09A6\u09A8\x03\x02\x02\x02\u09A7\u09A2\x03\x02\x02\x02\u09A7" +
		"\u09A8\x03\x02\x02\x02\u09A8\u012B\x03\x02\x02\x02\u09A9\u09AB\x05\u025E" +
		"\u0130\x02\u09AA\u09AC\x05\u012E\x98\x02\u09AB\u09AA\x03\x02\x02\x02\u09AB" +
		"\u09AC\x03\x02\x02\x02\u09AC\u09AD\x03\x02\x02\x02\u09AD\u09B2\x05\u0138" +
		"\x9D\x02\u09AE\u09AF\x07\x8C\x02\x02\u09AF\u09B1\x05\u0138\x9D\x02\u09B0" +
		"\u09AE\x03\x02\x02\x02\u09B1\u09B4\x03\x02\x02\x02\u09B2\u09B0\x03\x02" +
		"\x02\x02\u09B2\u09B3\x03\x02\x02\x02\u09B3\u09B5\x03\x02\x02\x02\u09B4" +
		"\u09B2\x03\x02\x02\x02\u09B5\u09B6\x07\x8A\x02\x02\u09B6\u012D\x03\x02" +
		"\x02\x02\u09B7\u09B8\x07\x9D\x02\x02\u09B8\u09BA\x07\x80\x02\x02\u09B9" +
		"\u09BB\x05\u0132\x9A\x02\u09BA\u09B9\x03\x02\x02\x02\u09BA\u09BB\x03\x02" +
		"\x02\x02\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BD\x07\x81\x02\x02\u09BD" +
		"\u012F\x03\x02\x02\x02\u09BE\u09BF\x07\x8C\x02\x02\u09BF\u0131\x03\x02" +
		"\x02\x02\u09C0\u09C6\x05\u0134\x9B\x02\u09C1\u09C2\x05\u0130\x99\x02\u09C2" +
		"\u09C3\x05\u0134\x9B\x02\u09C3\u09C5\x03\x02\x02\x02\u09C4\u09C1\x03\x02" +
		"\x02\x02\u09C5\u09C8\x03\x02\x02\x02\u09C6\u09C4\x03\x02\x02\x02\u09C6" +
		"\u09C7\x03\x02\x02\x02\u09C7\u09D3\x03\x02\x02\x02\u09C8\u09C6\x03\x02" +
		"\x02\x02\u09C9\u09CF\x05\u0136\x9C\x02\u09CA\u09CB\x05\u0130\x99\x02\u09CB" +
		"\u09CC\x05\u0136\x9C\x02\u09CC\u09CE\x03\x02\x02\x02\u09CD\u09CA\x03\x02" +
		"\x02\x02\u09CE\u09D1\x03\x02\x02\x02\u09CF\u09CD\x03\x02\x02\x02\u09CF" +
		"\u09D0\x03\x02\x02\x02\u09D0\u09D3\x03\x02\x02\x02\u09D1\u09CF\x03\x02" +
		"\x02\x02\u09D2\u09C0\x03\x02\x02\x02\u09D2\u09C9\x03";
	private static readonly _serializedATNSegment5: string =
		"\x02\x02\x02\u09D3\u0133\x03\x02\x02\x02\u09D4\u09D5\x05\u0210\u0109\x02" +
		"\u09D5\u0135\x03\x02\x02\x02\u09D6\u09D7\x07\x8B\x02\x02\u09D7\u09D8\x05" +
		"\u025E\u0130\x02\u09D8\u09DA\x07\x80\x02\x02\u09D9\u09DB\x05\u0210\u0109" +
		"\x02\u09DA\u09D9\x03\x02\x02\x02\u09DA\u09DB\x03\x02\x02\x02\u09DB\u09DC" +
		"\x03\x02\x02\x02\u09DC\u09DD\x07\x81\x02\x02\u09DD\u09E0\x03\x02\x02\x02" +
		"\u09DE\u09E0\x07\x8B\x02\x02\u09DF\u09D6\x03\x02\x02\x02\u09DF\u09DE\x03" +
		"\x02\x02\x02\u09E0\u0137\x03\x02\x02\x02\u09E1\u09E2\x05\u013A\x9E\x02" +
		"\u09E2\u09E4\x07\x80\x02\x02\u09E3\u09E5\x05\u013E\xA0\x02\u09E4\u09E3" +
		"\x03\x02\x02\x02\u09E4\u09E5\x03\x02\x02\x02\u09E5\u09E6\x03\x02\x02\x02" +
		"\u09E6\u09E7\x07\x81\x02\x02\u09E7\u0139\x03\x02\x02\x02\u09E8\u09EC\x05" +
		"\u025E\u0130\x02\u09E9\u09EB\x05\xEEx\x02\u09EA\u09E9\x03\x02\x02\x02" +
		"\u09EB\u09EE\x03\x02\x02\x02\u09EC\u09EA\x03\x02\x02\x02\u09EC\u09ED\x03" +
		"\x02\x02\x02\u09ED\u013B\x03\x02\x02\x02\u09EE\u09EC\x03\x02\x02\x02\u09EF" +
		"\u09F0\x07\x8C\x02\x02\u09F0\u013D\x03\x02\x02\x02\u09F1\u09F7\x05\u0140" +
		"\xA1\x02\u09F2\u09F3\x05\u013C\x9F\x02\u09F3\u09F4\x05\u0140\xA1\x02\u09F4" +
		"\u09F6\x03\x02\x02\x02\u09F5\u09F2\x03\x02\x02\x02\u09F6\u09F9\x03\x02" +
		"\x02\x02\u09F7\u09F5\x03\x02\x02\x02\u09F7\u09F8\x03\x02\x02\x02\u09F8" +
		"\u0A04\x03\x02\x02\x02\u09F9\u09F7\x03\x02\x02\x02\u09FA\u0A00\x05\u0142" +
		"\xA2\x02\u09FB\u09FC\x05\u013C\x9F\x02\u09FC\u09FD\x05\u0142\xA2\x02\u09FD" +
		"\u09FF\x03\x02\x02\x02\u09FE\u09FB\x03\x02\x02\x02\u09FF\u0A02\x03\x02" +
		"\x02\x02\u0A00\u09FE\x03\x02\x02\x02\u0A00\u0A01\x03\x02\x02\x02\u0A01" +
		"\u0A04\x03\x02\x02\x02\u0A02\u0A00\x03\x02\x02\x02\u0A03\u09F1\x03\x02" +
		"\x02\x02\u0A03\u09FA\x03\x02\x02\x02\u0A04\u013F\x03\x02\x02\x02\u0A05" +
		"\u0A06\x05\u021A\u010E\x02\u0A06\u0141\x03\x02\x02\x02\u0A07\u0A08\x07" +
		"\x8B\x02\x02\u0A08\u0A0E\x05\u025E\u0130\x02\u0A09\u0A0B\x07\x80\x02\x02" +
		"\u0A0A\u0A0C\x05\u021A\u010E\x02\u0A0B\u0A0A\x03\x02\x02\x02\u0A0B\u0A0C" +
		"\x03\x02\x02\x02\u0A0C\u0A0D\x03\x02\x02\x02\u0A0D\u0A0F\x07\x81\x02\x02" +
		"\u0A0E\u0A09\x03\x02\x02\x02\u0A0E\u0A0F\x03\x02\x02\x02\u0A0F\u0A12\x03" +
		"\x02\x02\x02\u0A10\u0A12\x07\xA9\x02\x02\u0A11\u0A07\x03\x02\x02\x02\u0A11" +
		"\u0A10\x03\x02\x02\x02\u0A12\u0143\x03\x02\x02\x02\u0A13\u0A14\x05\u0260" +
		"\u0131\x02\u0A14\u0A15\x05\u013A\x9E\x02\u0A15\u0A16\x07\x80\x02\x02\u0A16" +
		"\u0A17\x05\u0146\xA4\x02\u0A17\u0A18\x07\x81\x02\x02\u0A18\u0145\x03\x02" +
		"\x02\x02\u0A19\u0A1A\x03\x02\x02\x02\u0A1A\u0147\x03\x02\x02\x02\u0A1B" +
		"\u0A1F\x07\r\x02\x02\u0A1C\u0A1E\x05\u015A\xAE\x02\u0A1D\u0A1C\x03\x02" +
		"\x02\x02\u0A1E\u0A21\x03\x02\x02\x02\u0A1F\u0A1D\x03\x02\x02\x02\u0A1F" +
		"\u0A20\x03\x02\x02\x02\u0A20\u0A22\x03\x02\x02\x02\u0A21\u0A1F\x03\x02" +
		"\x02\x02\u0A22\u0A23\x07\x0E\x02\x02\u0A23\u0149\x03\x02\x02\x02\u0A24" +
		"\u0A25\x07%\x02\x02\u0A25\u0A26\x07\x80\x02\x02\u0A26\u0A27\x05\u014C" +
		"\xA7\x02\u0A27\u0A28\x07\x8A\x02\x02\u0A28\u0A29\x05\u0226\u0114\x02\u0A29" +
		"\u0A2A\x07\x8A\x02\x02\u0A2A\u0A2B\x05\u014E\xA8\x02\u0A2B\u0A2C\x07\x81" +
		"\x02\x02\u0A2C\u0A2D\x05\u0158\xAD\x02\u0A2D\u014B\x03\x02\x02\x02\u0A2E" +
		"\u0A30\x07o\x02\x02\u0A2F\u0A2E\x03\x02\x02\x02\u0A2F\u0A30\x03\x02\x02" +
		"\x02\u0A30\u0A31\x03\x02\x02\x02\u0A31\u0A32\x05\u025E\u0130\x02\u0A32" +
		"\u0A33\x07\x8E\x02\x02\u0A33\u0A34\x05\u020A\u0106\x02\u0A34\u014D\x03" +
		"\x02\x02\x02\u0A35\u0A36\x05\u025E\u0130\x02\u0A36\u0A37\x05\u0170\xB9" +
		"\x02\u0A37\u0A38\x05\u0226\u0114\x02\u0A38\u0A40\x03\x02\x02\x02\u0A39" +
		"\u0A3A\x05\u0256\u012C\x02\u0A3A\u0A3B\x05\u025E\u0130\x02\u0A3B\u0A40" +
		"\x03\x02\x02\x02\u0A3C\u0A3D\x05\u025E\u0130\x02\u0A3D\u0A3E\x05\u0256" +
		"\u012C\x02\u0A3E\u0A40\x03\x02\x02\x02\u0A3F\u0A35\x03\x02\x02\x02\u0A3F" +
		"\u0A39\x03\x02\x02\x02\u0A3F\u0A3C\x03\x02\x02\x02\u0A40\u014F\x03\x02" +
		"\x02\x02\u0A41\u0A44\x05\u0152\xAA\x02\u0A42\u0A44\x05\u0154\xAB\x02\u0A43" +
		"\u0A41\x03\x02\x02\x02\u0A43\u0A42\x03\x02\x02\x02\u0A44\u0151\x03\x02" +
		"\x02\x02\u0A45\u0A46\x07\"\x02\x02\u0A46\u0A47\x07\x80\x02\x02\u0A47\u0A48" +
		"\x05\u020A\u0106\x02\u0A48\u0A49\x07\x81\x02\x02\u0A49\u0A4C\x05\u0158" +
		"\xAD\x02\u0A4A\u0A4B\x07#\x02\x02\u0A4B\u0A4D\x05\u0158\xAD\x02\u0A4C" +
		"\u0A4A\x03\x02\x02\x02\u0A4C\u0A4D\x03\x02\x02\x02\u0A4D\u0153\x03\x02" +
		"\x02\x02\u0A4E\u0A4F\x07-\x02\x02\u0A4F\u0A50\x07\x80\x02\x02\u0A50\u0A51" +
		"\x05\u020A\u0106\x02\u0A51\u0A52\x07\x81\x02\x02\u0A52\u0A56\x05\u0156" +
		"\xAC\x02\u0A53\u0A55\x05\u0156\xAC\x02\u0A54\u0A53\x03\x02\x02\x02\u0A55" +
		"\u0A58\x03\x02\x02\x02\u0A56\u0A54\x03\x02\x02\x02\u0A56\u0A57\x03\x02" +
		"\x02\x02\u0A57\u0A59\x03\x02\x02\x02\u0A58\u0A56\x03\x02\x02\x02\u0A59" +
		"\u0A5A\x07.\x02\x02\u0A5A\u0155\x03\x02\x02\x02\u0A5B\u0A60\x05\u020A" +
		"\u0106\x02\u0A5C\u0A5D\x07\x8C\x02\x02\u0A5D\u0A5F\x05\u020A\u0106\x02" +
		"\u0A5E\u0A5C\x03\x02\x02\x02\u0A5F\u0A62\x03\x02\x02\x02\u0A60\u0A5E\x03" +
		"\x02\x02\x02\u0A60\u0A61\x03\x02\x02\x02\u0A61\u0A63\x03\x02\x02\x02\u0A62" +
		"\u0A60\x03\x02\x02\x02\u0A63\u0A64\x07\x89\x02\x02\u0A64\u0A65\x05\u0158" +
		"\xAD\x02\u0A65\u0A6C\x03\x02\x02\x02\u0A66\u0A68\x07/\x02\x02\u0A67\u0A69" +
		"\x07\x89\x02\x02\u0A68\u0A67\x03\x02\x02\x02\u0A68\u0A69\x03\x02\x02\x02" +
		"\u0A69\u0A6A\x03\x02\x02\x02\u0A6A\u0A6C\x05\u0158\xAD\x02\u0A6B\u0A5B" +
		"\x03\x02\x02\x02\u0A6B\u0A66\x03\x02\x02\x02\u0A6C\u0157\x03\x02\x02\x02" +
		"\u0A6D\u0A84\x05\u015A\xAE\x02\u0A6E\u0A6F\x05\u025E\u0130\x02\u0A6F\u0A70" +
		"\x07\x89\x02\x02\u0A70\u0A72\x03\x02\x02\x02\u0A71\u0A6E\x03\x02\x02\x02" +
		"\u0A71\u0A72\x03\x02\x02\x02\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A76\x07" +
		">\x02\x02\u0A74\u0A75\x07\x89\x02\x02\u0A75\u0A77\x05\u025E\u0130\x02" +
		"\u0A76\u0A74\x03\x02\x02\x02\u0A76\u0A77\x03\x02\x02\x02\u0A77\u0A7B\x03" +
		"\x02\x02\x02\u0A78\u0A7A\x05\u015A\xAE\x02\u0A79\u0A78\x03\x02\x02\x02" +
		"\u0A7A\u0A7D\x03\x02\x02\x02\u0A7B\u0A79\x03\x02\x02\x02\u0A7B\u0A7C\x03" +
		"\x02\x02\x02\u0A7C\u0A7E\x03\x02\x02\x02\u0A7D\u0A7B\x03\x02\x02\x02\u0A7E" +
		"\u0A81\x07?\x02\x02\u0A7F\u0A80\x07\x89\x02\x02\u0A80\u0A82\x05\u025E" +
		"\u0130\x02\u0A81\u0A7F\x03\x02\x02\x02\u0A81\u0A82\x03\x02\x02\x02\u0A82" +
		"\u0A84\x03\x02\x02\x02\u0A83\u0A6D\x03\x02\x02\x02\u0A83\u0A71\x03\x02" +
		"\x02\x02\u0A84\u0159\x03\x02\x02\x02\u0A85\u0A86\x05@!\x02\u0A86\u015B" +
		"\x03\x02\x02\x02\u0A87\u0A88\x07\x19\x02\x02\u0A88\u0A89\x05\u015E\xB0" +
		"\x02\u0A89\u0A8A\x07\x8A\x02\x02\u0A8A\u0A93\x03\x02\x02\x02\u0A8B\u0A8D" +
		"\x07\x19\x02\x02\u0A8C\u0A8E\x05\u018C\xC7\x02\u0A8D\u0A8C\x03\x02\x02" +
		"\x02\u0A8D\u0A8E\x03\x02\x02\x02\u0A8E\u0A8F\x03\x02\x02\x02\u0A8F\u0A90" +
		"\x05\u0160\xB1\x02\u0A90\u0A91\x07\x8A\x02\x02\u0A91\u0A93\x03\x02\x02" +
		"\x02\u0A92\u0A87\x03\x02\x02\x02\u0A92\u0A8B\x03\x02\x02\x02\u0A93\u015D" +
		"\x03\x02\x02\x02\u0A94\u0A99\x05\u0164\xB3\x02\u0A95\u0A96\x07\x8C\x02" +
		"\x02\u0A96\u0A98\x05\u0164\xB3\x02\u0A97\u0A95\x03\x02\x02\x02\u0A98\u0A9B" +
		"\x03\x02\x02\x02\u0A99\u0A97\x03\x02\x02\x02\u0A99\u0A9A\x03\x02\x02\x02" +
		"\u0A9A\u015F\x03\x02\x02\x02\u0A9B\u0A99\x03\x02\x02\x02\u0A9C\u0AA1\x05" +
		"\u0176\xBC\x02\u0A9D\u0A9E\x07\x8C\x02\x02\u0A9E\u0AA0\x05\u0176\xBC\x02" +
		"\u0A9F\u0A9D\x03\x02\x02\x02\u0AA0\u0AA3\x03\x02\x02\x02\u0AA1\u0A9F\x03" +
		"\x02\x02\x02\u0AA1\u0AA2\x03\x02\x02\x02\u0AA2\u0161\x03\x02\x02\x02\u0AA3" +
		"\u0AA1\x03\x02\x02\x02\u0AA4\u0AA5\x07\x18\x02\x02\u0AA5\u0AA6\x05\u0244" +
		"\u0123\x02\u0AA6\u0AA7\x07\x8E\x02\x02\u0AA7\u0AAC\x05\u0244\u0123\x02" +
		"\u0AA8\u0AA9\x07\x8E\x02\x02\u0AA9\u0AAB\x05\u0244\u0123\x02\u0AAA\u0AA8" +
		"\x03\x02\x02\x02\u0AAB\u0AAE\x03\x02\x02\x02\u0AAC\u0AAA\x03\x02\x02\x02" +
		"\u0AAC\u0AAD\x03\x02\x02\x02\u0AAD\u0AAF\x03\x02\x02\x02\u0AAE\u0AAC\x03" +
		"\x02\x02\x02\u0AAF\u0AB0\x07\x8A\x02\x02\u0AB0\u0163\x03\x02\x02\x02\u0AB1" +
		"\u0AB2\x05\u0244\u0123\x02\u0AB2\u0AB3\x07\x8E\x02\x02\u0AB3\u0AB4\x05" +
		"\u021A\u010E\x02\u0AB4\u0165\x03\x02\x02\x02\u0AB5\u0AB6\x07\x1E\x02\x02" +
		"\u0AB6\u0AB7\x05\u017C\xBF\x02\u0AB7\u0167\x03\x02\x02\x02\u0AB8\u0AB9" +
		"\x07!\x02\x02\u0AB9\u0ABA\x05\u017E\xC0\x02\u0ABA\u0169\x03\x02\x02\x02" +
		"\u0ABB\u0ABC\x079\x02\x02\u0ABC\u0ABD\x05\u0182\xC2\x02\u0ABD\u016B\x03" +
		"\x02\x02\x02\u0ABE\u0ABF\x05\u0246\u0124\x02\u0ABF\u0AC0\x07\x8E\x02\x02" +
		"\u0AC0\u0AC1\x05\u018A\xC6\x02\u0AC1\u0AC2\x05\u021A\u010E\x02\u0AC2\u0AD5" +
		"\x03\x02\x02\x02\u0AC3\u0AC4\x05\u0248\u0125\x02\u0AC4\u0AC5\x07\x8E\x02" +
		"\x02\u0AC5\u0AC6\x05\xECw\x02\u0AC6\u0AD5\x03\x02\x02\x02\u0AC7\u0AC8" +
		"\x05\u0234\u011B\x02\u0AC8\u0AC9\x07\x8B\x02\x02\u0AC9\u0ACD\x03\x02\x02" +
		"\x02\u0ACA\u0ACD\x05\xB2Z\x02\u0ACB\u0ACD\x05\u025C\u012F\x02\u0ACC\u0AC7" +
		"\x03\x02\x02\x02\u0ACC\u0ACA\x03\x02\x02\x02\u0ACC\u0ACB\x03\x02\x02\x02" +
		"\u0ACC\u0ACD\x03\x02\x02\x02\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE\u0ACF\x05" +
		"\u0262\u0132\x02\u0ACF\u0AD0\x05\u0238\u011D\x02\u0AD0\u0AD1\x07\x8E\x02" +
		"\x02\u0AD1\u0AD2\x05\xEAv\x02\u0AD2\u0AD5\x03\x02\x02\x02\u0AD3\u0AD5" +
		"\x05\u016E\xB8\x02\u0AD4\u0ABE\x03\x02\x02\x02\u0AD4\u0AC3\x03\x02\x02" +
		"\x02\u0AD4\u0ACC\x03\x02\x02\x02\u0AD4\u0AD3\x03\x02\x02\x02\u0AD5\u016D" +
		"\x03\x02\x02\x02\u0AD6\u0AD7\x05\u0246\u0124\x02\u0AD7\u0AD8\x05\u0170" +
		"\xB9\x02\u0AD8\u0AD9\x05\u021A\u010E\x02\u0AD9\u016F\x03\x02\x02\x02\u0ADA" +
		"\u0ADB\t\b\x02\x02\u0ADB\u0171\x03\x02\x02\x02\u0ADC\u0ADD\x05\u0246\u0124" +
		"\x02\u0ADD\u0ADF\x07\xC7\x02\x02\u0ADE\u0AE0\x05\u018A\xC6\x02\u0ADF\u0ADE" +
		"\x03\x02\x02\x02\u0ADF\u0AE0\x03\x02\x02\x02\u0AE0\u0AE1\x03\x02\x02\x02" +
		"\u0AE1\u0AE2\x05\u021A\u010E\x02\u0AE2\u0173\x03\x02\x02\x02\u0AE3\u0AE4" +
		"\x07\x19\x02\x02\u0AE4\u0AF0\x05\u0176\xBC\x02\u0AE5\u0AE6\x07\x1A\x02" +
		"\x02\u0AE6\u0AF0\x05\u0246\u0124\x02\u0AE7\u0AE8\x07\x1B\x02\x02\u0AE8" +
		"\u0AF0\x05\u0176\xBC\x02\u0AE9\u0AEA\x07\x1B\x02\x02\u0AEA\u0AF0\x05\u0164" +
		"\xB3\x02\u0AEB\u0AEC\x07\x1C\x02\x02\u0AEC\u0AF0\x05\u0246\u0124\x02\u0AED" +
		"\u0AEE\x07\x1C\x02\x02\u0AEE\u0AF0\x05\u0244\u0123\x02\u0AEF\u0AE3\x03" +
		"\x02\x02\x02\u0AEF\u0AE5\x03\x02\x02\x02\u0AEF\u0AE7\x03\x02\x02\x02\u0AEF" +
		"\u0AE9\x03\x02\x02\x02\u0AEF\u0AEB\x03\x02\x02\x02\u0AEF\u0AED\x03\x02" +
		"\x02\x02\u0AF0\u0175\x03\x02\x02\x02\u0AF1\u0AF2\x05\u0246\u0124\x02\u0AF2" +
		"\u0AF3\x07\x8E\x02\x02\u0AF3\u0AF4\x05\u021A\u010E\x02\u0AF4\u0177\x03" +
		"\x02\x02\x02\u0AF5\u0AFC\x05\u017C\xBF\x02\u0AF6\u0AF8\x05\u017E\xC0\x02" +
		"\u0AF7\u0AF6\x03\x02\x02\x02\u0AF7\u0AF8\x03\x02\x02\x02\u0AF8\u0AF9\x03" +
		"\x02\x02\x02\u0AF9\u0AFA\x07#\x02\x02\u0AFA\u0AFC\x05\u017C\xBF\x02\u0AFB" +
		"\u0AF5\x03\x02\x02\x02\u0AFB\u0AF7\x03\x02\x02\x02\u0AFC\u0179\x03\x02" +
		"\x02\x02\u0AFD\u0B00\x07>\x02\x02\u0AFE\u0AFF\x07\x89\x02\x02\u0AFF\u0B01" +
		"\x05\u025E\u0130\x02\u0B00\u0AFE\x03\x02\x02\x02\u0B00\u0B01\x03\x02\x02" +
		"\x02\u0B01\u0B05\x03\x02\x02\x02\u0B02\u0B04\x05\u0112\x8A\x02\u0B03\u0B02" +
		"\x03\x02\x02\x02\u0B04\u0B07\x03\x02\x02\x02\u0B05\u0B03\x03\x02\x02\x02" +
		"\u0B05\u0B06\x03\x02\x02\x02\u0B06\u0B0B\x03\x02\x02\x02\u0B07\u0B05\x03" +
		"\x02\x02\x02\u0B08\u0B0A\x05\u017C\xBF\x02\u0B09\u0B08\x03\x02\x02\x02" +
		"\u0B0A\u0B0D\x03\x02\x02\x02\u0B0B\u0B09\x03\x02\x02\x02\u0B0B\u0B0C\x03" +
		"\x02\x02\x02\u0B0C\u0B0E\x03\x02\x02\x02\u0B0D\u0B0B\x03\x02\x02\x02\u0B0E" +
		"\u0B11\x07?\x02\x02\u0B0F\u0B10\x07\x89\x02\x02\u0B10\u0B12\x05\u025E" +
		"\u0130\x02\u0B11\u0B0F\x03\x02\x02\x02\u0B11\u0B12\x03\x02\x02\x02\u0B12" +
		"\u017B\x03\x02\x02\x02\u0B13\u0B16\x05\u017E\xC0\x02\u0B14\u0B16\x07\x8A" +
		"\x02\x02\u0B15\u0B13\x03\x02\x02\x02\u0B15\u0B14\x03\x02\x02\x02\u0B16" +
		"\u017D\x03\x02\x02\x02\u0B17\u0B18\x05\u025E\u0130\x02\u0B18\u0B19\x07" +
		"\x89\x02\x02\u0B19\u0B1B\x03\x02\x02\x02\u0B1A\u0B17\x03\x02\x02\x02\u0B1A" +
		"\u0B1B\x03\x02\x02\x02\u0B1B\u0B1C\x03\x02\x02\x02\u0B1C\u0B1D\x05\u0180" +
		"\xC1\x02\u0B1D\u017F\x03\x02\x02\x02\u0B1E\u0B36\x05\u017A\xBE\x02\u0B1F" +
		"\u0B36\x05\u01B6\xDC\x02\u0B20\u0B36\x05\u0194\xCB\x02\u0B21\u0B36\x05" +
		"\u01A6\xD4\x02\u0B22\u0B23\x05\u016C\xB7\x02\u0B23\u0B24\x07\x8A\x02\x02" +
		"\u0B24\u0B36\x03\x02\x02\x02\u0B25\u0B26\x05\u0172\xBA\x02\u0B26\u0B27" +
		"\x07\x8A\x02\x02\u0B27\u0B36\x03\x02\x02\x02\u0B28\u0B29\x05\u0174\xBB" +
		"\x02\u0B29\u0B2A\x07\x8A\x02\x02\u0B2A\u0B36\x03\x02\x02\x02\u0B2B\u0B36" +
		"\x05\u019C\xCF\x02\u0B2C\u0B2D\x05\u0208\u0105\x02\u0B2D\u0B2E\x07\x8A" +
		"\x02\x02\u0B2E\u0B36\x03\x02\x02\x02\u0B2F\u0B36\x05\u01C2\xE2\x02\u0B30" +
		"\u0B36\x05\u019A\xCE\x02\u0B31\u0B36\x05\u0198\xCD\x02\u0B32\u0B36\x05" +
		"\u0188\xC5\x02\u0B33\u0B36\x05\u0196\xCC\x02\u0B34\u0B36\x05\u01C8\xE5" +
		"\x02\u0B35\u0B1E\x03\x02\x02\x02\u0B35\u0B1F\x03\x02\x02\x02\u0B35\u0B20" +
		"\x03\x02\x02\x02\u0B35\u0B21\x03\x02\x02\x02\u0B35\u0B22\x03\x02\x02\x02" +
		"\u0B35\u0B25\x03\x02\x02\x02\u0B35\u0B28\x03\x02\x02\x02\u0B35\u0B2B\x03" +
		"\x02\x02\x02\u0B35\u0B2C\x03\x02\x02\x02\u0B35\u0B2F\x03\x02\x02\x02\u0B35" +
		"\u0B30\x03\x02\x02\x02\u0B35\u0B31\x03\x02\x02\x02\u0B35\u0B32\x03\x02" +
		"\x02\x02\u0B35\u0B33\x03\x02\x02\x02\u0B35\u0B34\x03\x02\x02\x02\u0B36" +
		"\u0181\x03\x02\x02\x02\u0B37\u0B38\x05\u017E\xC0\x02\u0B38\u0183\x03\x02" +
		"\x02\x02\u0B39\u0B3C\x05\u0182\xC2\x02\u0B3A\u0B3C\x07\x8A\x02\x02\u0B3B" +
		"\u0B39\x03\x02\x02\x02\u0B3B\u0B3A\x03\x02\x02\x02\u0B3C\u0185\x03\x02" +
		"\x02\x02\u0B3D\u0B42\x05\u025E\u0130\x02\u0B3E\u0B3F\x07\x8C\x02\x02\u0B3F" +
		"\u0B41\x05\u025E\u0130\x02\u0B40\u0B3E\x03\x02\x02\x02\u0B41\u0B44\x03" +
		"\x02\x02\x02\u0B42\u0B40\x03\x02\x02\x02\u0B42\u0B43\x03\x02\x02\x02\u0B43" +
		"\u0187\x03\x02\x02\x02\u0B44\u0B42\x03\x02\x02\x02\u0B45\u0B46\x05\u0192" +
		"\xCA\x02\u0B46\u0B47\x05\u017C\xBF\x02\u0B47\u0189\x03\x02\x02\x02\u0B48" +
		"\u0B51\x05\u018C\xC7\x02\u0B49\u0B51\x05\u018E\xC8\x02\u0B4A\u0B4B\x07" +
		" \x02\x02\u0B4B\u0B4C\x07\x80\x02\x02\u0B4C\u0B4D\x05\u021A\u010E\x02" +
		"\u0B4D\u0B4E\x07\x81\x02\x02\u0B4E\u0B4F\x05\u018E\xC8\x02\u0B4F\u0B51" +
		"\x03\x02\x02\x02\u0B50\u0B48\x03\x02\x02\x02\u0B50\u0B49\x03\x02\x02\x02" +
		"\u0B50\u0B4A\x03\x02\x02\x02\u0B51\u018B\x03\x02\x02\x02\u0B52\u0B53\x07" +
		"\x9D\x02\x02\u0B53\u0B5A\x05\xC8e\x02\u0B54\u0B55\x07\x9D\x02\x02\u0B55" +
		"\u0B56\x07\x80\x02\x02\u0B56\u0B57\x05\u0220\u0111\x02\u0B57\u0B58\x07" +
		"\x81\x02\x02\u0B58\u0B5A\x03\x02\x02\x02\u0B59\u0B52\x03\x02\x02\x02\u0B59" +
		"\u0B54\x03\x02\x02\x02\u0B5A\u018D\x03\x02\x02\x02\u0B5B\u0B5C\x07\x8D" +
		"\x02\x02\u0B5C\u0B6B\x05\u0262\u0132\x02\u0B5D\u0B5E\x07\x8D\x02\x02\u0B5E" +
		"\u0B5F\x07\x80\x02\x02\u0B5F\u0B60\x05\u0190\xC9\x02\u0B60\u0B61\x07\x81" +
		"\x02\x02\u0B61\u0B6B\x03\x02\x02\x02\u0B62\u0B63\x07\x8D\x02\x02\u0B63" +
		"\u0B6B\x07\x97\x02\x02\u0B64\u0B65\x07\x8D\x02\x02\u0B65\u0B66\x07\x80" +
		"\x02\x02\u0B66\u0B67\x07\x97\x02\x02\u0B67\u0B6B\x07\x81\x02\x02\u0B68" +
		"\u0B69\x07\x8D\x02\x02\u0B69\u0B6B\x05\u0264\u0133\x02\u0B6A\u0B5B\x03" +
		"\x02\x02\x02\u0B6A\u0B5D\x03\x02\x02\x02\u0B6A\u0B62\x03\x02\x02\x02\u0B6A" +
		"\u0B64\x03\x02\x02\x02\u0B6A\u0B68\x03\x02\x02\x02\u0B6B\u018F\x03\x02" +
		"\x02\x02\u0B6C\u0B6E\b\xC9\x01\x02\u0B6D\u0B6F\x05\u01DE\xF0\x02\u0B6E" +
		"\u0B6D\x03\x02\x02\x02\u0B6E\u0B6F\x03\x02\x02\x02\u0B6F\u0B70\x03\x02" +
		"\x02\x02\u0B70\u0B73\x05\u021A\u010E\x02\u0B71\u0B72\x07p\x02\x02\u0B72" +
		"\u0B74\x05\u021A\u010E\x02\u0B73\u0B71\x03\x02\x02\x02\u0B73\u0B74\x03" +
		"\x02\x02\x02\u0B74\u0B7A\x03\x02\x02\x02\u0B75\u0B76\x07\x80\x02\x02\u0B76" +
		"\u0B77\x05\u0190\xC9\x02\u0B77\u0B78\x07\x81\x02\x02\u0B78\u0B7A\x03\x02" +
		"\x02\x02\u0B79\u0B6C\x03\x02\x02\x02\u0B79\u0B75\x03\x02\x02\x02\u0B7A" +
		"\u0B83\x03\x02\x02\x02\u0B7B\u0B7C\f\x05\x02\x02\u0B7C\u0B7D\x07\xA7\x02" +
		"\x02\u0B7D\u0B82\x05\u0190\xC9\x06\u0B7E\u0B7F\f\x04\x02\x02\u0B7F\u0B80" +
		"\x07\x8C\x02\x02\u0B80\u0B82\x05\u0190\xC9\x05\u0B81\u0B7B\x03\x02\x02" +
		"\x02\u0B81\u0B7E\x03\x02\x02\x02\u0B82\u0B85\x03\x02\x02\x02\u0B83\u0B81" +
		"\x03\x02\x02\x02\u0B83\u0B84\x03\x02\x02\x02\u0B84\u0191\x03\x02\x02\x02" +
		"\u0B85\u0B83\x03\x02\x02\x02\u0B86\u0B8A\x05\u018C\xC7\x02\u0B87\u0B8A" +
		"\x05\u018E\xC8\x02\u0B88\u0B8A\x05\u01DC\xEF\x02\u0B89\u0B86\x03\x02\x02" +
		"\x02\u0B89\u0B87\x03\x02\x02\x02\u0B89\u0B88\x03\x02\x02\x02\u0B8A\u0193" +
		"\x03\x02\x02\x02\u0B8B\u0B8D\x07(\x02\x02\u0B8C\u0B8E\x05\u021A\u010E" +
		"\x02\u0B8D\u0B8C\x03\x02\x02\x02\u0B8D\u0B8E\x03\x02\x02\x02\u0B8E\u0B8F" +
		"\x03\x02\x02\x02\u0B8F\u0B95\x07\x8A\x02\x02\u0B90\u0B91\x07)\x02\x02" +
		"\u0B91\u0B95\x07\x8A\x02\x02\u0B92\u0B93\x07*\x02\x02\u0B93\u0B95\x07" +
		"\x8A\x02\x02\u0B94\u0B8B\x03\x02\x02\x02\u0B94\u0B90\x03\x02\x02\x02\u0B94" +
		"\u0B92\x03\x02\x02\x02\u0B95\u0195\x03\x02\x02\x02\u0B96\u0B97\x07+\x02" +
		"\x02\u0B97\u0B98\x07\x80\x02\x02\u0B98\u0B99\x05\u021A\u010E\x02\u0B99" +
		"\u0B9A\x07\x81\x02\x02\u0B9A\u0B9B\x05\u017C\xBF\x02\u0B9B\u0BAD\x03\x02" +
		"\x02\x02\u0B9C\u0B9D\x07+\x02\x02\u0B9D\u0B9E\x07:\x02\x02\u0B9E\u0BAD" +
		"\x07\x8A\x02\x02\u0B9F\u0BA0\x07,\x02\x02\u0BA0\u0BA1\x07\x80\x02\x02" +
		"\u0BA1\u0BA6\x05\u0262\u0132\x02\u0BA2\u0BA3\x07\x8C\x02\x02\u0BA3\u0BA5" +
		"\x05\u0262\u0132\x02\u0BA4\u0BA2\x03\x02\x02\x02\u0BA5\u0BA8\x03\x02\x02" +
		"\x02\u0BA6\u0BA4\x03\x02\x02\x02\u0BA6\u0BA7\x03\x02\x02\x02\u0BA7\u0BA9" +
		"\x03\x02\x02\x02\u0BA8\u0BA6\x03\x02\x02\x02\u0BA9\u0BAA\x07\x81\x02\x02" +
		"\u0BAA\u0BAB\x05\u0178\xBD\x02\u0BAB\u0BAD\x03\x02\x02\x02\u0BAC\u0B96" +
		"\x03\x02\x02\x02\u0BAC\u0B9C\x03\x02\x02\x02\u0BAC\u0B9F\x03\x02\x02\x02" +
		"\u0BAD\u0197\x03\x02\x02\x02\u0BAE\u0BAF\x07\xA1\x02\x02\u0BAF\u0BB0\x05" +
		"\u0262\u0132\x02\u0BB0\u0BB1\x07\x8A\x02\x02\u0BB1\u0BBA\x03\x02\x02\x02" +
		"\u0BB2\u0BB4\x07\xA2\x02\x02\u0BB3\u0BB5\x05\u018A\xC6\x02\u0BB4\u0BB3" +
		"\x03\x02\x02\x02\u0BB4\u0BB5\x03\x02\x02\x02\u0BB5\u0BB6\x03\x02\x02\x02" +
		"\u0BB6\u0BB7\x05\u0262\u0132\x02\u0BB7\u0BB8\x07\x8A\x02\x02\u0BB8\u0BBA" +
		"\x03\x02\x02\x02\u0BB9\u0BAE\x03\x02\x02\x02\u0BB9\u0BB2\x03\x02\x02\x02" +
		"\u0BBA\u0199\x03\x02\x02\x02\u0BBB\u0BBC\x07<\x02\x02\u0BBC\u0BBD\x05" +
		"\u0262\u0132\x02\u0BBD\u0BBE\x07\x8A\x02\x02\u0BBE\u0BC3\x03\x02\x02\x02" +
		"\u0BBF\u0BC0\x07<\x02\x02\u0BC0\u0BC1\x07:\x02\x02\u0BC1\u0BC3\x07\x8A" +
		"\x02\x02\u0BC2\u0BBB\x03\x02\x02\x02\u0BC2\u0BBF\x03\x02\x02\x02\u0BC3" +
		"\u019B\x03\x02\x02\x02\u0BC4\u0BC6\x05\u019E\xD0\x02\u0BC5\u0BC4\x03\x02" +
		"\x02\x02\u0BC5\u0BC6\x03\x02\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7" +
		"\u0BC8\x07\"\x02\x02\u0BC8\u0BC9\x07\x80\x02\x02\u0BC9\u0BCA\x05\u01A0" +
		"\xD1\x02\u0BCA\u0BCB\x07\x81\x02\x02\u0BCB\u0BD5\x05\u017C\xBF\x02\u0BCC" +
		"\u0BCD\x07#\x02\x02\u0BCD\u0BCE\x07\"\x02\x02\u0BCE\u0BCF\x07\x80\x02" +
		"\x02\u0BCF\u0BD0\x05\u01A0\xD1\x02\u0BD0\u0BD1\x07\x81\x02\x02\u0BD1\u0BD2" +
		"\x05\u017C\xBF\x02\u0BD2\u0BD4\x03\x02\x02\x02\u0BD3\u0BCC\x03\x02\x02" +
		"\x02\u0BD4\u0BD7\x03\x02\x02\x02\u0BD5\u0BD3\x03\x02\x02\x02\u0BD5\u0BD6" +
		"\x03\x02\x02\x02\u0BD6\u0BDA\x03\x02\x02\x02\u0BD7\u0BD5\x03\x02\x02\x02" +
		"\u0BD8\u0BD9\x07#\x02\x02\u0BD9\u0BDB\x05\u017C\xBF\x02\u0BDA\u0BD8\x03" +
		"\x02\x02\x02\u0BDA\u0BDB\x03\x02\x02\x02\u0BDB\u019D\x03\x02\x02\x02\u0BDC" +
		"\u0BDD\t\t\x02\x02\u0BDD\u019F\x03\x02\x02\x02\u0BDE\u0BE3\x05\u01A2\xD2" +
		"\x02\u0BDF\u0BE0\x07\xA0\x02\x02\u0BE0\u0BE2\x05\u01A2\xD2\x02\u0BE1\u0BDF" +
		"\x03\x02\x02\x02\u0BE2\u0BE5\x03\x02\x02\x02\u0BE3\u0BE1\x03\x02\x02\x02" +
		"\u0BE3\u0BE4\x03\x02\x02\x02\u0BE4\u01A1\x03\x02\x02\x02\u0BE5\u0BE3\x03" +
		"\x02\x02\x02\u0BE6\u0BE9\x05\u021A\u010E\x02\u0BE7\u0BE9\x05\u01A4\xD3" +
		"\x02\u0BE8\u0BE6\x03\x02\x02\x02\u0BE8\u0BE7\x03\x02\x02\x02\u0BE9\u01A3" +
		"\x03\x02\x02\x02\u0BEA\u0BEB\x05\u021A\u010E\x02\u0BEB\u0BEC\x075\x02" +
		"\x02\u0BEC\u0BED\x05\u01B4\xDB\x02\u0BED\u01A5\x03\x02\x02\x02\u0BEE\u0BF0" +
		"\x05\u019E\xD0\x02\u0BEF\u0BEE\x03\x02\x02\x02\u0BEF\u0BF0\x03\x02\x02" +
		"\x02\u0BF0\u0BF1\x03\x02\x02\x02\u0BF1\u0BF2\x07-\x02\x02\u0BF2\u0BF3" +
		"\x07\x80\x02\x02\u0BF3\u0BF4\x05\u01A8\xD5\x02\u0BF4\u0BF5\x07\x81\x02" +
		"\x02\u0BF5\u0BF9\x05\u01AA\xD6\x02\u0BF6\u0BF8\x05\u01AA\xD6\x02\u0BF7" +
		"\u0BF6\x03\x02\x02\x02\u0BF8\u0BFB\x03\x02\x02\x02\u0BF9\u0BF7\x03\x02" +
		"\x02\x02\u0BF9\u0BFA\x03\x02\x02\x02\u0BFA\u0BFC\x03\x02\x02\x02\u0BFB" +
		"\u0BF9\x03\x02\x02\x02\u0BFC\u0BFD\x07.\x02\x02\u0BFD\u0C10\x03\x02\x02" +
		"\x02\u0BFE\u0C00\x05\u019E\xD0\x02\u0BFF\u0BFE\x03\x02\x02\x02\u0BFF\u0C00" +
		"\x03\x02\x02\x02\u0C00\u0C01\x03\x02\x02\x02\u0C01\u0C02\x07-\x02\x02" +
		"\u0C02\u0C03\x07\x80\x02\x02\u0C03\u0C04\x05\u01A8\xD5\x02\u0C04\u0C05" +
		"\x07\x81\x02\x02\u0C05\u0C06\x073\x02\x02\u0C06\u0C0A\x05\u01AC\xD7\x02" +
		"\u0C07\u0C09\x05\u01AC\xD7\x02\u0C08\u0C07\x03\x02\x02\x02\u0C09\u0C0C" +
		"\x03\x02\x02\x02\u0C0A\u0C08\x03\x02\x02\x02\u0C0A\u0C0B\x03\x02\x02\x02" +
		"\u0C0B\u0C0D\x03\x02\x02\x02\u0C0C\u0C0A\x03\x02\x02\x02\u0C0D\u0C0E\x07" +
		".\x02\x02\u0C0E\u0C10\x03\x02\x02\x02\u0C0F\u0BEF\x03\x02\x02\x02\u0C0F" +
		"\u0BFF\x03\x02\x02\x02\u0C10\u01A7\x03\x02\x02\x02\u0C11\u0C12\x05\u021A" +
		"\u010E\x02\u0C12\u01A9\x03\x02\x02\x02\u0C13\u0C18\x05\u01AE\xD8\x02\u0C14" +
		"\u0C15\x07\x8C\x02\x02\u0C15\u0C17\x05\u01AE\xD8\x02\u0C16\u0C14\x03\x02" +
		"\x02\x02\u0C17\u0C1A\x03\x02\x02\x02\u0C18\u0C16\x03\x02\x02\x02\u0C18" +
		"\u0C19\x03\x02\x02\x02\u0C19\u0C1B\x03\x02\x02\x02\u0C1A\u0C18\x03\x02" +
		"\x02\x02\u0C1B\u0C1C\x07\x89\x02\x02\u0C1C\u0C1D\x05\u017C\xBF\x02\u0C1D" +
		"\u0C24\x03\x02\x02\x02\u0C1E\u0C20\x07/\x02\x02\u0C1F\u0C21\x07\x89\x02" +
		"\x02\u0C20\u0C1F\x03\x02\x02\x02\u0C20\u0C21\x03\x02\x02\x02\u0C21\u0C22" +
		"\x03\x02\x02\x02\u0C22\u0C24\x05\u017C\xBF\x02\u0C23\u0C13\x03\x02\x02" +
		"\x02\u0C23\u0C1E\x03\x02\x02\x02\u0C24\u01AB\x03\x02\x02\x02\u0C25\u0C26" +
		"\x05\u01B0\xD9\x02\u0C26\u0C27\x07\x89\x02\x02\u0C27\u0C28\x05\u017C\xBF" +
		"\x02\u0C28\u0C2F\x03\x02\x02\x02\u0C29\u0C2B\x07/\x02\x02\u0C2A\u0C2C" +
		"\x07\x89\x02\x02\u0C2B\u0C2A\x03\x02\x02\x02\u0C2B\u0C2C\x03\x02\x02\x02" +
		"\u0C2C\u0C2D\x03\x02\x02\x02\u0C2D\u0C2F\x05\u017C\xBF\x02\u0C2E\u0C25" +
		"\x03\x02\x02\x02\u0C2E\u0C29\x03\x02\x02\x02\u0C2F\u01AD\x03\x02\x02\x02" +
		"\u0C30\u0C31\x05\u021A\u010E\x02\u0C31\u01AF\x03\x02\x02\x02\u0C32\u0C37" +
		"\x05\u01B2\xDA\x02\u0C33\u0C34\x07\x8C\x02\x02\u0C34\u0C36\x05\u01B2\xDA" +
		"\x02\u0C35\u0C33\x03\x02\x02\x02\u0C36\u0C39\x03\x02\x02\x02\u0C37\u0C35" +
		"\x03\x02\x02\x02\u0C37\u0C38\x03\x02\x02\x02\u0C38\u01B1\x03\x02\x02\x02" +
		"\u0C39\u0C37\x03\x02\x02\x02\u0C3A\u0C3B\x05\u021E\u0110\x02\u0C3B\u01B3" +
		"\x03\x02\x02\x02\u0C3C\u0C3D\x07\x8B\x02\x02\u0C3D\u0C5D\x05\u025E\u0130" +
		"\x02\u0C3E\u0C5D\x07\xA9\x02\x02\u0C3F\u0C5D\x05\u020A\u0106\x02\u0C40" +
		"\u0C41\x07w\x02\x02\u0C41\u0C43\x05\u025E\u0130\x02\u0C42\u0C44\x05\u01B4" +
		"\xDB\x02\u0C43\u0C42\x03\x02\x02\x02\u0C43\u0C44\x03\x02\x02\x02\u0C44" +
		"\u0C5D\x03\x02\x02\x02\u0C45\u0C46\x07\x87\x02\x02\u0C46\u0C47\x05\u01B4" +
		"\xDB\x02\u0C47\u0C48\x07\x8C\x02\x02\u0C48\u0C49\x05\u01B4\xDB\x02\u0C49" +
		"\u0C4A\x03\x02\x02\x02\u0C4A\u0C4B\x07\x83\x02\x02\u0C4B\u0C5D\x03\x02" +
		"\x02\x02\u0C4C\u0C4D\x07\x87\x02\x02\u0C4D\u0C4E\x05\u025E\u0130\x02\u0C4E" +
		"\u0C4F\x07\x89\x02\x02\u0C4F\u0C57\x05\u01B4\xDB\x02\u0C50\u0C51\x07\x8C" +
		"\x02\x02\u0C51\u0C52\x05\u025E\u0130\x02\u0C52\u0C53\x07\x89\x02\x02\u0C53" +
		"\u0C54\x05\u01B4\xDB\x02\u0C54\u0C56\x03\x02\x02\x02\u0C55\u0C50\x03\x02" +
		"\x02\x02\u0C56\u0C59\x03\x02\x02\x02\u0C57\u0C55\x03\x02\x02\x02\u0C57" +
		"\u0C58\x03\x02\x02\x02\u0C58\u0C5A\x03\x02\x02\x02\u0C59\u0C57\x03\x02" +
		"\x02\x02\u0C5A\u0C5B\x07\x83\x02\x02\u0C5B\u0C5D\x03\x02\x02\x02\u0C5C" +
		"\u0C3C\x03\x02\x02\x02\u0C5C\u0C3E\x03\x02\x02\x02\u0C5C\u0C3F\x03\x02" +
		"\x02\x02\u0C5C\u0C40\x03\x02\x02\x02\u0C5C\u0C45\x03\x02\x02\x02\u0C5C" +
		"\u0C4C\x03\x02\x02\x02\u0C5D\u01B5\x03\x02\x02\x02\u0C5E\u0C5F\x07\x1F" +
		"\x02\x02\u0C5F\u0C8D\x05\u017C\xBF\x02\u0C60\u0C61\x07 \x02\x02\u0C61" +
		"\u0C62\x07\x80\x02\x02\u0C62\u0C63\x05\u021A\u010E\x02\u0C63\u0C64\x07" +
		"\x81\x02\x02\u0C64\u0C65\x05\u017C\xBF\x02\u0C65\u0C8D\x03\x02\x02\x02" +
		"\u0C66\u0C67\x07&\x02\x02\u0C67\u0C68\x07\x80\x02\x02\u0C68\u0C69\x05" +
		"\u021A\u010E\x02\u0C69\u0C6A\x07\x81\x02\x02\u0C6A\u0C6B\x05\u017C\xBF" +
		"\x02\u0C6B\u0C8D\x03\x02\x02\x02\u0C6C\u0C6D\x07%\x02\x02\u0C6D\u0C6F" +
		"\x07\x80\x02\x02\u0C6E\u0C70\x05\u01B8\xDD\x02\u0C6F\u0C6E\x03\x02\x02" +
		"\x02\u0C6F\u0C70\x03\x02\x02\x02\u0C70\u0C71\x03\x02\x02\x02\u0C71\u0C73" +
		"\x07\x8A\x02\x02\u0C72\u0C74\x05\u021A\u010E\x02\u0C73\u0C72\x03\x02\x02" +
		"\x02\u0C73\u0C74\x03\x02\x02\x02\u0C74\u0C75\x03\x02\x02\x02\u0C75\u0C77" +
		"\x07\x8A\x02\x02\u0C76\u0C78\x05\u01BC\xDF\x02\u0C77\u0C76\x03\x02\x02" +
		"\x02\u0C77\u0C78\x03\x02\x02\x02\u0C78\u0C79\x03\x02\x02\x02\u0C79\u0C7A" +
		"\x07\x81\x02\x02\u0C7A\u0C8D\x05\u017C\xBF\x02\u0C7B\u0C7C\x07\'\x02\x02" +
		"\u0C7C\u0C7D\x05\u017C\xBF\x02\u0C7D\u0C7E\x07&\x02\x02\u0C7E\u0C7F\x07" +
		"\x80\x02\x02\u0C7F\u0C80\x05\u021A\u010E\x02\u0C80\u0C81\x07\x81\x02\x02" +
		"\u0C81\u0C82\x07\x8A\x02\x02\u0C82\u0C8D\x03\x02\x02\x02\u0C83\u0C84\x07" +
		"$\x02\x02\u0C84\u0C85\x07\x80\x02\x02\u0C85\u0C86\x05\u0264\u0133\x02" +
		"\u0C86\u0C87\x07\x84\x02\x02\u0C87\u0C88\x05\u01C0\xE1\x02\u0C88\u0C89" +
		"\x07\x85\x02\x02\u0C89\u0C8A\x07\x81\x02\x02\u0C8A\u0C8B\x05\u017E\xC0" +
		"\x02\u0C8B\u0C8D\x03\x02\x02\x02\u0C8C\u0C5E\x03\x02\x02\x02\u0C8C\u0C60" +
		"\x03\x02\x02\x02\u0C8C\u0C66\x03\x02\x02\x02\u0C8C\u0C6C\x03\x02\x02\x02" +
		"\u0C8C\u0C7B\x03\x02\x02\x02\u0C8C\u0C83\x03\x02\x02\x02\u0C8D\u01B7\x03" +
		"\x02\x02\x02\u0C8E\u0C98\x05\u0160\xB1\x02\u0C8F\u0C94\x05\u01BA\xDE\x02" +
		"\u0C90\u0C91\x07\x8C\x02\x02\u0C91\u0C93\x05\u01BA\xDE\x02\u0C92\u0C90" +
		"\x03\x02\x02\x02\u0C93\u0C96\x03\x02\x02\x02\u0C94\u0C92\x03\x02\x02\x02" +
		"\u0C94\u0C95\x03\x02\x02\x02\u0C95\u0C98\x03\x02\x02\x02\u0C96\u0C94\x03" +
		"\x02\x02\x02\u0C97\u0C8E\x03\x02\x02\x02\u0C97\u0C8F\x03\x02\x02\x02\u0C98" +
		"\u01B9\x03\x02\x02\x02\u0C99\u0C9B\x07n\x02";
	private static readonly _serializedATNSegment6: string =
		"\x02\u0C9A\u0C99\x03\x02\x02\x02\u0C9A\u0C9B\x03\x02\x02\x02\u0C9B\u0C9C" +
		"\x03\x02\x02\x02\u0C9C\u0C9D\x05\xA8U\x02\u0C9D\u0C9E\x05\u025E\u0130" +
		"\x02\u0C9E\u0C9F\x07\x8E\x02\x02\u0C9F\u0CA7\x05\u021A\u010E\x02\u0CA0" +
		"\u0CA1\x07\x8C\x02\x02\u0CA1\u0CA2\x05\u025E\u0130\x02\u0CA2\u0CA3\x07" +
		"\x8E\x02\x02\u0CA3\u0CA4\x05\u021A\u010E\x02\u0CA4\u0CA6\x03\x02\x02\x02" +
		"\u0CA5\u0CA0\x03\x02\x02\x02\u0CA6\u0CA9\x03\x02\x02\x02\u0CA7\u0CA5\x03" +
		"\x02\x02\x02\u0CA7\u0CA8\x03\x02\x02\x02\u0CA8\u01BB\x03\x02\x02\x02\u0CA9" +
		"\u0CA7\x03\x02\x02\x02\u0CAA\u0CAF\x05\u01BE\xE0\x02\u0CAB\u0CAC\x07\x8C" +
		"\x02\x02\u0CAC\u0CAE\x05\u01BE\xE0\x02\u0CAD\u0CAB\x03\x02\x02\x02\u0CAE" +
		"\u0CB1\x03\x02\x02\x02\u0CAF\u0CAD\x03\x02\x02\x02\u0CAF\u0CB0\x03\x02" +
		"\x02\x02\u0CB0\u01BD\x03\x02\x02\x02\u0CB1\u0CAF\x03\x02\x02\x02\u0CB2" +
		"\u0CB6\x05\u016E\xB8\x02\u0CB3\u0CB6\x05\u0208\u0105\x02\u0CB4\u0CB6\x05" +
		"\u01F4\xFB\x02\u0CB5\u0CB2\x03\x02\x02\x02\u0CB5\u0CB3\x03\x02\x02\x02" +
		"\u0CB5\u0CB4\x03\x02\x02\x02\u0CB6\u01BF\x03\x02\x02\x02\u0CB7\u0CB9\x05" +
		"\u025E\u0130\x02\u0CB8\u0CB7\x03\x02\x02\x02\u0CB8\u0CB9\x03\x02\x02\x02" +
		"\u0CB9\u0CBE\x03\x02\x02\x02\u0CBA\u0CBB\x07\x8C\x02\x02\u0CBB\u0CBD\x05" +
		"\u025E\u0130\x02\u0CBC\u0CBA\x03\x02\x02\x02\u0CBD\u0CC0\x03\x02\x02\x02" +
		"\u0CBE\u0CBC\x03\x02\x02\x02\u0CBE\u0CBF\x03\x02\x02\x02\u0CBF\u01C1\x03" +
		"\x02\x02\x02\u0CC0\u0CBE\x03\x02\x02\x02\u0CC1\u0CC2\x05\u01F2\xFA\x02" +
		"\u0CC2\u0CC3\x07\x8A\x02\x02\u0CC3\u0CCA\x03\x02\x02\x02\u0CC4\u0CC5\x07" +
		"s\x02\x02\u0CC5\u0CC6\x07\x86\x02\x02\u0CC6\u0CC7\x05\u01F4\xFB\x02\u0CC7" +
		"\u0CC8\x07\x81\x02\x02\u0CC8\u0CCA\x03\x02\x02\x02\u0CC9\u0CC1\x03\x02" +
		"\x02\x02\u0CC9\u0CC4\x03\x02\x02\x02\u0CCA\u01C3\x03\x02\x02\x02\u0CCB" +
		"\u0CCE\x05\u0126\x94\x02\u0CCC\u0CCE\x05\u01C6\xE4\x02\u0CCD\u0CCB\x03" +
		"\x02\x02\x02\u0CCD\u0CCC\x03\x02\x02\x02\u0CCE\u01C5\x03\x02\x02\x02\u0CCF" +
		"\u0CD0\x05\u025E\u0130\x02\u0CD0\u0CD1\x07\x89\x02\x02\u0CD1\u0CD3\x03" +
		"\x02\x02\x02\u0CD2\u0CCF\x03\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3" +
		"\u0CD4\x03\x02\x02\x02\u0CD4\u0CD5\x05\u01D4\xEB\x02\u0CD5\u01C7\x03\x02" +
		"\x02\x02\u0CD6\u0CD7\x05\u01CA\xE6\x02\u0CD7\u01C9\x03\x02\x02\x02\u0CD8" +
		"\u0CDB\x05\u01CC\xE7\x02\u0CD9\u0CDB\x05\u01D4\xEB\x02\u0CDA\u0CD8\x03" +
		"\x02\x02\x02\u0CDA\u0CD9\x03\x02\x02\x02\u0CDB\u01CB\x03\x02\x02\x02\u0CDC" +
		"\u0CE0\x05\u01CE\xE8\x02\u0CDD\u0CE0\x05\u01D0\xE9\x02\u0CDE\u0CE0\x05" +
		"\u01D2\xEA\x02\u0CDF\u0CDC\x03\x02\x02\x02\u0CDF\u0CDD\x03\x02\x02\x02" +
		"\u0CDF\u0CDE\x03\x02\x02\x02\u0CE0\u01CD\x03\x02\x02\x02\u0CE1\u0CE2\x07" +
		"6\x02\x02\u0CE2\u0CE3\x07\x80\x02\x02\u0CE3\u0CE4\x05\u021A\u010E\x02" +
		"\u0CE4\u0CE5\x07\x81\x02\x02\u0CE5\u0CE6\x05\u0178\xBD\x02\u0CE6\u01CF" +
		"\x03\x02\x02\x02\u0CE7\u0CE8\x077\x02\x02\u0CE8\u0CE9\x07\x80\x02\x02" +
		"\u0CE9\u0CEA\x05\u021A\u010E\x02\u0CEA\u0CEB\x07\x81\x02\x02\u0CEB\u0CEC" +
		"\x05\u0178\xBD\x02\u0CEC\u01D1\x03\x02\x02\x02\u0CED\u0CEE\x078\x02\x02" +
		"\u0CEE\u0CEF\x07\x80\x02\x02\u0CEF\u0CF0\x05\u021A\u010E\x02\u0CF0\u0CF1" +
		"\x07\x81\x02\x02\u0CF1\u0CF2\x05\u017C\xBF\x02\u0CF2\u01D3\x03\x02\x02" +
		"\x02\u0CF3\u0CF7\x05\u01D6\xEC\x02\u0CF4\u0CF7\x05\u01D8\xED\x02\u0CF5" +
		"\u0CF7\x05\u01DA\xEE\x02\u0CF6\u0CF3\x03\x02\x02\x02\u0CF6\u0CF4\x03\x02" +
		"\x02\x02\u0CF6\u0CF5\x03\x02\x02\x02\u0CF7\u01D5\x03\x02\x02\x02\u0CF8" +
		"\u0CF9\x076\x02\x02\u0CF9\u0CFA\x07\x9F\x02\x02\u0CFA\u0CFB\x07\x80\x02" +
		"\x02\u0CFB\u0CFC\x05\u021A\u010E\x02\u0CFC\u0CFD\x07\x81\x02\x02\u0CFD" +
		"\u0CFE\x05\u0178\xBD\x02\u0CFE\u0D07\x03\x02\x02\x02\u0CFF\u0D00\x076" +
		"\x02\x02\u0D00\u0D01\x079\x02\x02\u0D01\u0D02\x07\x80\x02\x02\u0D02\u0D03" +
		"\x05\u021A\u010E\x02\u0D03\u0D04\x07\x81\x02\x02\u0D04\u0D05\x05\u0178" +
		"\xBD\x02\u0D05\u0D07\x03\x02\x02\x02\u0D06\u0CF8\x03\x02\x02\x02\u0D06" +
		"\u0CFF\x03\x02\x02\x02\u0D07\u01D7\x03\x02\x02\x02\u0D08\u0D09\x077\x02" +
		"\x02\u0D09\u0D0A\x07\x9F\x02\x02\u0D0A\u0D0B\x07\x80\x02\x02\u0D0B\u0D0C" +
		"\x05\u021A\u010E\x02\u0D0C\u0D0D\x07\x81\x02\x02\u0D0D\u0D0E\x05\u0178" +
		"\xBD\x02\u0D0E\u0D17\x03\x02\x02\x02\u0D0F\u0D10\x077\x02\x02\u0D10\u0D11" +
		"\x079\x02\x02\u0D11\u0D12\x07\x80\x02\x02\u0D12\u0D13\x05\u021A\u010E" +
		"\x02\u0D13\u0D14\x07\x81\x02\x02\u0D14\u0D15\x05\u0178\xBD\x02\u0D15\u0D17" +
		"\x03\x02\x02\x02\u0D16\u0D08\x03\x02\x02\x02\u0D16\u0D0F\x03\x02\x02\x02" +
		"\u0D17\u01D9\x03\x02\x02\x02\u0D18\u0D19\x078\x02\x02\u0D19\u0D1A\x07" +
		"\x9F\x02\x02\u0D1A\u0D1B\x07\x80\x02\x02\u0D1B\u0D1C\x05\u021A\u010E\x02" +
		"\u0D1C\u0D1D\x07\x81\x02\x02\u0D1D\u0D1E\x05\u017C\xBF\x02\u0D1E\u0D27" +
		"\x03\x02\x02\x02\u0D1F\u0D20\x078\x02\x02\u0D20\u0D21\x079\x02\x02\u0D21" +
		"\u0D22\x07\x80\x02\x02\u0D22\u0D23\x05\u021A\u010E\x02\u0D23\u0D24\x07" +
		"\x81\x02\x02\u0D24\u0D25\x05\u017C\xBF\x02\u0D25\u0D27\x03\x02\x02\x02" +
		"\u0D26\u0D18\x03\x02\x02\x02\u0D26\u0D1F\x03\x02\x02\x02\u0D27\u01DB\x03" +
		"\x02\x02\x02\u0D28\u0D29\x07\x9E\x02\x02\u0D29\u0D32\x05\u024C\u0127\x02" +
		"\u0D2A\u0D2B\x07\x9E\x02\x02\u0D2B\u0D32\x05\u025E\u0130\x02\u0D2C\u0D2D" +
		"\x07\x9E\x02\x02\u0D2D\u0D2E\x07\x80\x02\x02\u0D2E\u0D2F\x05\u021A\u010E" +
		"\x02\u0D2F\u0D30\x07\x81\x02\x02\u0D30\u0D32\x03\x02\x02\x02\u0D31\u0D28" +
		"\x03\x02\x02\x02\u0D31\u0D2A\x03\x02\x02\x02\u0D31\u0D2C\x03\x02\x02\x02" +
		"\u0D32\u01DD\x03\x02\x02\x02\u0D33\u0D34\t\n\x02\x02\u0D34\u01DF\x03\x02" +
		"\x02\x02\u0D35\u0D36\x07\x82\x02\x02\u0D36\u0D3B\x05\u021A\u010E\x02\u0D37" +
		"\u0D38\x07\x8C\x02\x02\u0D38\u0D3A\x05\u021A\u010E\x02\u0D39\u0D37\x03" +
		"\x02\x02\x02\u0D3A\u0D3D\x03\x02\x02\x02\u0D3B\u0D39\x03\x02\x02\x02\u0D3B" +
		"\u0D3C\x03\x02\x02\x02\u0D3C\u0D3E\x03\x02\x02\x02\u0D3D\u0D3B\x03\x02" +
		"\x02\x02\u0D3E\u0D3F\x07\x83\x02\x02\u0D3F\u01E1\x03\x02\x02\x02\u0D40" +
		"\u0D41\x07\x82\x02\x02\u0D41\u0D46\x05\u020A\u0106\x02\u0D42\u0D43\x07" +
		"\x8C\x02\x02\u0D43\u0D45\x05\u020A\u0106\x02\u0D44\u0D42\x03\x02\x02\x02" +
		"\u0D45\u0D48\x03\x02\x02\x02\u0D46\u0D44\x03\x02\x02\x02\u0D46\u0D47\x03" +
		"\x02\x02\x02\u0D47\u0D49\x03\x02\x02\x02\u0D48\u0D46\x03\x02\x02\x02\u0D49" +
		"\u0D4A\x07\x83\x02\x02\u0D4A\u01E3\x03\x02\x02\x02\u0D4B\u0D4C\x07\x82" +
		"\x02\x02\u0D4C\u0D4D\x05\u020A\u0106\x02\u0D4D\u0D4E\x05\u01E2\xF2\x02" +
		"\u0D4E\u0D4F\x07\x83\x02\x02\u0D4F\u01E5\x03\x02\x02\x02\u0D50\u0D51\x07" +
		"\x82\x02\x02\u0D51\u0D52\x05\u021A\u010E\x02\u0D52\u0D53\x05\u01E0\xF1" +
		"\x02\u0D53\u0D54\x07\x83\x02\x02\u0D54\u01E7\x03\x02\x02\x02\u0D55\u0D63" +
		"\x05\u021A\u010E\x02\u0D56\u0D57\x05\u021A\u010E\x02\u0D57\u0D58\x07\x89" +
		"\x02\x02\u0D58\u0D59\x05\u021A\u010E\x02\u0D59\u0D63\x03\x02\x02\x02\u0D5A" +
		"\u0D5B\x05\u021A\u010E\x02\u0D5B\u0D5C\x07\xAA\x02\x02\u0D5C\u0D5D\x05" +
		"\u021A\u010E\x02\u0D5D\u0D63\x03\x02\x02\x02\u0D5E\u0D5F\x05\u021A\u010E" +
		"\x02\u0D5F\u0D60\x07\xAB\x02\x02\u0D60\u0D61\x05\u021A\u010E\x02\u0D61" +
		"\u0D63\x03\x02\x02\x02\u0D62\u0D55\x03\x02\x02\x02\u0D62\u0D56\x03\x02" +
		"\x02\x02\u0D62\u0D5A\x03\x02\x02\x02\u0D62\u0D5E\x03\x02\x02\x02\u0D63" +
		"\u01E9\x03\x02\x02\x02\u0D64\u0D65\x07\x82\x02\x02\u0D65\u0D66\x07\x83" +
		"\x02\x02\u0D66\u01EB\x03\x02\x02\x02\u0D67\u0D68\x05\u01F4\xFB\x02\u0D68" +
		"\u01ED\x03\x02\x02\x02\u0D69\u0D6E\x05\u0264\u0133\x02\u0D6A\u0D6B\x07" +
		"\x80\x02\x02\u0D6B\u0D6C\x05\u01F8\xFD\x02\u0D6C\u0D6D\x07\x81\x02\x02" +
		"\u0D6D\u0D6F\x03\x02\x02\x02\u0D6E\u0D6A\x03\x02\x02\x02\u0D6E\u0D6F\x03" +
		"\x02\x02\x02\u0D6F\u01EF\x03\x02\x02\x02\u0D70\u0D75\x07\xD7\x02\x02\u0D71" +
		"\u0D72\x07\x80\x02\x02\u0D72\u0D73\x05\u01F8\xFD\x02\u0D73\u0D74\x07\x81" +
		"\x02\x02\u0D74\u0D76\x03\x02\x02\x02\u0D75\u0D71\x03\x02\x02\x02\u0D75" +
		"\u0D76\x03\x02\x02\x02\u0D76\u0D81\x03\x02\x02\x02\u0D77\u0D78\x07\xD7" +
		"\x02\x02\u0D78\u0D79\x07\x80\x02\x02\u0D79\u0D7C\x05\xA8U\x02\u0D7A\u0D7B" +
		"\x07\x8C\x02\x02\u0D7B\u0D7D\x05\u021A\u010E\x02\u0D7C\u0D7A\x03\x02\x02" +
		"\x02\u0D7C\u0D7D\x03\x02\x02\x02\u0D7D\u0D7E\x03\x02\x02\x02\u0D7E\u0D7F" +
		"\x07\x81\x02\x02\u0D7F\u0D81\x03\x02\x02\x02\u0D80\u0D70\x03\x02\x02\x02" +
		"\u0D80\u0D77\x03\x02\x02\x02\u0D81\u01F1\x03\x02\x02\x02\u0D82\u0D8A\x05" +
		"\u01EE\xF8\x02\u0D83\u0D8A\x05\u01F0\xF9\x02\u0D84\u0D8A\x05\u01FA\xFE" +
		"\x02\u0D85\u0D87\x07V\x02\x02\u0D86\u0D85\x03\x02\x02\x02\u0D86\u0D87" +
		"\x03\x02\x02\x02\u0D87\u0D88\x03\x02\x02\x02\u0D88\u0D8A\x05\u0204\u0103" +
		"\x02\u0D89\u0D82\x03\x02\x02\x02\u0D89\u0D83\x03\x02\x02\x02\u0D89\u0D84" +
		"\x03\x02\x02\x02\u0D89\u0D86\x03\x02\x02\x02\u0D8A\u01F3\x03\x02\x02\x02" +
		"\u0D8B\u0D8C\x05\u01F2\xFA\x02\u0D8C\u01F5\x03\x02\x02\x02\u0D8D\u0D8E" +
		"\x07\x8C\x02\x02\u0D8E\u01F7\x03\x02\x02\x02\u0D8F\u0D91\x05\u021A\u010E" +
		"\x02\u0D90\u0D8F\x03\x02\x02\x02\u0D90\u0D91\x03\x02\x02\x02\u0D91\u0D98" +
		"\x03\x02\x02\x02\u0D92\u0D94\x05\u01F6\xFC\x02\u0D93\u0D95\x05\u021A\u010E" +
		"\x02\u0D94\u0D93\x03\x02\x02\x02\u0D94\u0D95\x03\x02\x02\x02\u0D95\u0D97" +
		"\x03\x02\x02\x02\u0D96\u0D92\x03\x02\x02\x02\u0D97\u0D9A\x03\x02\x02\x02" +
		"\u0D98\u0D96\x03\x02\x02\x02\u0D98\u0D99\x03\x02\x02\x02\u0D99\u0DA6\x03" +
		"\x02\x02\x02\u0D9A\u0D98\x03\x02\x02\x02\u0D9B\u0D9C\x05\u01F6\xFC\x02" +
		"\u0D9C\u0D9D\x07\x8B\x02\x02\u0D9D\u0D9E\x05\u025E\u0130\x02\u0D9E\u0DA0" +
		"\x07\x80\x02\x02\u0D9F\u0DA1\x05\u021A\u010E\x02\u0DA0\u0D9F\x03\x02\x02" +
		"\x02\u0DA0\u0DA1\x03\x02\x02\x02\u0DA1\u0DA2\x03\x02\x02\x02\u0DA2\u0DA3" +
		"\x07\x81\x02\x02\u0DA3\u0DA5\x03\x02\x02\x02\u0DA4\u0D9B\x03\x02\x02\x02" +
		"\u0DA5\u0DA8\x03\x02\x02\x02\u0DA6\u0DA4\x03\x02\x02\x02\u0DA6\u0DA7\x03" +
		"\x02\x02\x02\u0DA7\u0DBF\x03\x02\x02\x02\u0DA8\u0DA6\x03\x02\x02\x02\u0DA9" +
		"\u0DAA\x07\x8B\x02\x02\u0DAA\u0DAB\x05\u025E\u0130\x02\u0DAB\u0DAD\x07" +
		"\x80\x02\x02\u0DAC\u0DAE\x05\u021A\u010E\x02\u0DAD\u0DAC\x03\x02\x02\x02" +
		"\u0DAD\u0DAE\x03\x02\x02\x02\u0DAE\u0DAF\x03\x02\x02\x02\u0DAF\u0DBB\x07" +
		"\x81\x02\x02\u0DB0\u0DB1\x05\u01F6\xFC\x02\u0DB1\u0DB2\x07\x8B\x02\x02" +
		"\u0DB2\u0DB3\x05\u025E\u0130\x02\u0DB3\u0DB5\x07\x80\x02\x02\u0DB4\u0DB6" +
		"\x05\u021A\u010E\x02\u0DB5\u0DB4\x03\x02\x02\x02\u0DB5\u0DB6\x03\x02\x02" +
		"\x02\u0DB6\u0DB7\x03\x02\x02\x02\u0DB7\u0DB8\x07\x81\x02\x02\u0DB8\u0DBA" +
		"\x03\x02\x02\x02\u0DB9\u0DB0\x03\x02\x02\x02\u0DBA\u0DBD\x03\x02\x02\x02" +
		"\u0DBB\u0DB9\x03\x02\x02\x02\u0DBB\u0DBC\x03\x02\x02\x02\u0DBC\u0DBF\x03" +
		"\x02\x02\x02\u0DBD\u0DBB\x03\x02\x02\x02\u0DBE\u0D90\x03\x02\x02\x02\u0DBE" +
		"\u0DA9\x03\x02\x02\x02\u0DBF\u01F9\x03\x02\x02\x02\u0DC0\u0DC1\x05\u01FC" +
		"\xFF\x02\u0DC1\u0DC2\x07\x8B\x02\x02\u0DC2\u0DC3\x05\u01FE\u0100\x02\u0DC3" +
		"\u01FB\x03\x02\x02\x02\u0DC4\u0DC7\x05\u022C\u0117\x02\u0DC5\u0DC7\x05" +
		"\u025C\u012F\x02\u0DC6\u0DC4\x03\x02\x02\x02\u0DC6\u0DC5\x03\x02\x02\x02" +
		"\u0DC7\u0DC8\x03\x02\x02\x02\u0DC8\u0DC9\x05\u0262\u0132\x02\u0DC9\u0DCA" +
		"\x05\u0238\u011D\x02\u0DCA\u0DCD\x03\x02\x02\x02\u0DCB\u0DCD\x05\u0234" +
		"\u011B\x02\u0DCC\u0DC6\x03\x02\x02\x02\u0DCC\u0DCB\x03\x02\x02\x02\u0DCD" +
		"\u01FD\x03\x02\x02\x02\u0DCE\u0DD3\x05\u025E\u0130\x02\u0DCF\u0DD0\x07" +
		"\x80\x02\x02\u0DD0\u0DD1\x05\u01F8\xFD\x02\u0DD1\u0DD2\x07\x81\x02\x02" +
		"\u0DD2\u0DD4\x03\x02\x02\x02\u0DD3\u0DCF\x03\x02\x02\x02\u0DD3\u0DD4\x03" +
		"\x02\x02\x02\u0DD4\u0DD7\x03\x02\x02\x02\u0DD5\u0DD7\x05\u0200\u0101\x02" +
		"\u0DD6\u0DCE\x03\x02\x02\x02\u0DD6\u0DD5\x03\x02\x02\x02\u0DD7\u01FF\x03" +
		"\x02\x02\x02\u0DD8\u0DDB\x05\u0202\u0102\x02\u0DD9\u0DDB\x05\u0204\u0103" +
		"\x02\u0DDA\u0DD8\x03\x02\x02\x02\u0DDA\u0DD9\x03\x02\x02\x02\u0DDB\u0201" +
		"\x03\x02\x02\x02\u0DDC\u0DE1\x05\u0206\u0104\x02\u0DDD\u0DDE\x07\x80\x02" +
		"\x02\u0DDE\u0DDF\x05\u01F8\xFD\x02\u0DDF\u0DE0\x07\x81\x02\x02\u0DE0\u0DE2" +
		"\x03\x02\x02\x02\u0DE1\u0DDD\x03\x02\x02\x02\u0DE1\u0DE2\x03\x02\x02\x02" +
		"\u0DE2\u0DE8\x03\x02\x02\x02\u0DE3\u0DE4\x074\x02\x02\u0DE4\u0DE5\x07" +
		"\x80\x02\x02\u0DE5\u0DE6\x05\u021A\u010E\x02\u0DE6\u0DE7\x07\x81\x02\x02" +
		"\u0DE7\u0DE9\x03\x02\x02\x02\u0DE8\u0DE3\x03\x02\x02\x02\u0DE8\u0DE9\x03" +
		"\x02\x02\x02\u0DE9\u0203\x03\x02\x02\x02\u0DEA\u0DF1\x07q\x02\x02\u0DEB" +
		"\u0DEE\x07\x80\x02\x02\u0DEC\u0DEF\x05\u0186\xC4\x02\u0DED\u0DEF\x07t" +
		"\x02\x02\u0DEE\u0DEC\x03\x02\x02\x02\u0DEE\u0DED\x03\x02\x02\x02\u0DEE" +
		"\u0DEF\x03\x02\x02\x02\u0DEF\u0DF0\x03\x02\x02\x02\u0DF0\u0DF2\x07\x81" +
		"\x02\x02\u0DF1\u0DEB\x03\x02\x02\x02\u0DF1\u0DF2\x03\x02\x02\x02\u0DF2" +
		"\u0205\x03\x02\x02\x02\u0DF3\u0DF9\x05\u025E\u0130\x02\u0DF4\u0DF9\x07" +
		"1\x02\x02\u0DF5\u0DF9\x07\x92\x02\x02\u0DF6\u0DF9\x07\x91\x02\x02\u0DF7" +
		"\u0DF9\x07\x90\x02\x02\u0DF8\u0DF3\x03\x02\x02\x02\u0DF8\u0DF4\x03\x02" +
		"\x02\x02\u0DF8\u0DF5\x03\x02\x02\x02\u0DF8\u0DF6\x03\x02\x02\x02\u0DF8" +
		"\u0DF7\x03\x02\x02\x02\u0DF9\u0207\x03\x02\x02\x02\u0DFA\u0DFB\x05\u0256" +
		"\u012C\x02\u0DFB\u0DFC\x05\u0246\u0124\x02\u0DFC\u0E01\x03\x02\x02\x02" +
		"\u0DFD\u0DFE\x05\u0246\u0124\x02\u0DFE\u0DFF\x05\u0256\u012C\x02\u0DFF" +
		"\u0E01\x03\x02\x02\x02\u0E00\u0DFA\x03\x02\x02\x02\u0E00\u0DFD\x03\x02" +
		"\x02\x02\u0E01\u0209\x03\x02\x02\x02\u0E02\u0E03\b\u0106\x01\x02\u0E03" +
		"\u0E08\x05\u0228\u0115\x02\u0E04\u0E05\x05\u0252\u012A\x02\u0E05\u0E06" +
		"\x05\u0228\u0115\x02\u0E06\u0E08\x03\x02\x02\x02\u0E07\u0E02\x03\x02\x02" +
		"\x02\u0E07\u0E04\x03\x02\x02\x02\u0E08\u0E15\x03\x02\x02\x02\u0E09\u0E0A" +
		"\f\x04\x02\x02\u0E0A\u0E0B\x05\u0254\u012B\x02\u0E0B\u0E0C\x05\u020A\u0106" +
		"\x05\u0E0C\u0E14\x03\x02\x02\x02\u0E0D\u0E0E\f\x03\x02\x02\u0E0E\u0E0F" +
		"\x07\x8F\x02\x02\u0E0F\u0E10\x05\u020A\u0106\x02\u0E10\u0E11\x07\x89\x02" +
		"\x02\u0E11\u0E12\x05\u020A\u0106\x04\u0E12\u0E14\x03\x02\x02\x02\u0E13" +
		"\u0E09\x03\x02\x02\x02\u0E13\u0E0D\x03\x02\x02\x02\u0E14\u0E17\x03\x02" +
		"\x02\x02\u0E15\u0E13\x03\x02\x02\x02\u0E15\u0E16\x03\x02\x02\x02\u0E16" +
		"\u020B\x03\x02\x02\x02\u0E17\u0E15\x03\x02\x02\x02\u0E18\u0E20\x05\u020A" +
		"\u0106\x02\u0E19\u0E1A\x05\u020A\u0106\x02\u0E1A\u0E1B\x07\x89\x02\x02" +
		"\u0E1B\u0E1C\x05\u020A\u0106\x02\u0E1C\u0E1D\x07\x89\x02\x02\u0E1D\u0E1E" +
		"\x05\u020A\u0106\x02\u0E1E\u0E20\x03\x02\x02\x02\u0E1F\u0E18\x03\x02\x02" +
		"\x02\u0E1F\u0E19\x03\x02\x02\x02\u0E20\u020D\x03\x02\x02\x02\u0E21\u0E25" +
		"\x05\u020C\u0107\x02\u0E22\u0E25\x05\xA8U\x02\u0E23\u0E25\x07\x9C\x02" +
		"\x02\u0E24\u0E21\x03\x02\x02\x02\u0E24\u0E22\x03\x02\x02\x02\u0E24\u0E23" +
		"\x03\x02\x02\x02\u0E25\u020F\x03\x02\x02\x02\u0E26\u0E2A\x05\u0220\u0111" +
		"\x02\u0E27\u0E2A\x05\xA8U\x02\u0E28\u0E2A\x07\x9C\x02\x02\u0E29\u0E26" +
		"\x03\x02\x02\x02\u0E29\u0E27\x03\x02\x02\x02\u0E29\u0E28\x03\x02\x02\x02" +
		"\u0E2A\u0211\x03\x02\x02\x02\u0E2B\u0E2E\x05\u020A\u0106\x02\u0E2C\u0E2E" +
		"\x05\u0214\u010B\x02\u0E2D\u0E2B\x03\x02\x02\x02\u0E2D\u0E2C\x03\x02\x02" +
		"\x02\u0E2E\u0213\x03\x02\x02\x02\u0E2F\u0E32\x05\u0216\u010C\x02\u0E30" +
		"\u0E32\x05\u0218\u010D\x02\u0E31\u0E2F\x03\x02\x02\x02\u0E31\u0E30\x03" +
		"\x02\x02\x02\u0E32\u0215\x03\x02\x02\x02\u0E33\u0E34\x05\u020A\u0106\x02" +
		"\u0E34\u0E35\x07\x89\x02\x02\u0E35\u0E36\x05\u020A\u0106\x02\u0E36\u0217" +
		"\x03\x02\x02\x02\u0E37\u0E38\x05\u020A\u0106\x02\u0E38\u0E39\x07\xAA\x02" +
		"\x02\u0E39\u0E3A\x05\u020A\u0106\x02\u0E3A\u0E40\x03\x02\x02\x02\u0E3B" +
		"\u0E3C\x05\u020A\u0106\x02\u0E3C\u0E3D\x07\xAB\x02\x02\u0E3D\u0E3E\x05" +
		"\u020A\u0106\x02\u0E3E\u0E40\x03\x02\x02\x02\u0E3F\u0E37\x03\x02\x02\x02" +
		"\u0E3F\u0E3B\x03\x02\x02\x02\u0E40\u0219\x03\x02\x02\x02\u0E41\u0E42\b" +
		"\u010E\x01\x02\u0E42\u0E4D\x05\u022A\u0116\x02\u0E43\u0E44\x05\u0252\u012A" +
		"\x02\u0E44\u0E45\x05\u022A\u0116\x02\u0E45\u0E4D\x03\x02\x02\x02\u0E46" +
		"\u0E4D\x05\u0208\u0105\x02\u0E47\u0E48\x07\x80\x02\x02\u0E48\u0E49\x05" +
		"\u016E\xB8\x02\u0E49\u0E4A\x07\x81\x02\x02\u0E4A\u0E4D\x03\x02\x02\x02" +
		"\u0E4B\u0E4D\x05\u021C\u010F\x02\u0E4C\u0E41\x03\x02\x02\x02\u0E4C\u0E43" +
		"\x03\x02\x02\x02\u0E4C\u0E46\x03\x02\x02\x02\u0E4C\u0E47\x03\x02\x02\x02" +
		"\u0E4C\u0E4B\x03\x02\x02\x02\u0E4D\u0E60\x03\x02\x02\x02\u0E4E\u0E4F\f" +
		"\x06\x02\x02\u0E4F\u0E50\x05\u0254\u012B\x02\u0E50\u0E51\x05\u021A\u010E" +
		"\x07\u0E51\u0E5F\x03\x02\x02\x02\u0E52\u0E53\f\x04\x02\x02\u0E53\u0E54" +
		"\x07\x8F\x02\x02\u0E54\u0E55\x05\u021A\u010E\x02\u0E55\u0E56\x07\x89\x02" +
		"\x02\u0E56\u0E57\x05\u021A\u010E\x05\u0E57\u0E5F\x03\x02\x02\x02\u0E58" +
		"\u0E59\f\x05\x02\x02\u0E59\u0E5A\x073\x02\x02\u0E5A\u0E5B\x07\x82\x02" +
		"\x02\u0E5B\u0E5C\x05\u01B0\xD9\x02\u0E5C\u0E5D\x07\x83\x02\x02\u0E5D\u0E5F" +
		"\x03\x02\x02\x02\u0E5E\u0E4E\x03\x02\x02\x02\u0E5E\u0E52\x03\x02\x02\x02" +
		"\u0E5E\u0E58\x03\x02\x02\x02\u0E5F\u0E62\x03\x02\x02\x02\u0E60\u0E5E\x03" +
		"\x02\x02\x02\u0E60\u0E61\x03\x02\x02\x02\u0E61\u021B\x03\x02\x02\x02\u0E62" +
		"\u0E60\x03\x02\x02\x02\u0E63\u0E64\x07w\x02\x02\u0E64\u0E66\x05\u025E" +
		"\u0130\x02\u0E65\u0E67\x05\u021A\u010E\x02\u0E66\u0E65\x03\x02\x02\x02" +
		"\u0E66\u0E67\x03\x02\x02\x02\u0E67\u021D\x03\x02\x02\x02\u0E68\u0E70\x05" +
		"\u021A\u010E\x02\u0E69\u0E6A\x07\x84\x02\x02\u0E6A\u0E6B\x05\u021A\u010E" +
		"\x02\u0E6B\u0E6C\x07\x89\x02\x02\u0E6C\u0E6D\x05\u021A\u010E\x02\u0E6D" +
		"\u0E6E\x07\x85\x02\x02\u0E6E\u0E70\x03\x02\x02\x02\u0E6F\u0E68\x03\x02" +
		"\x02\x02\u0E6F\u0E69\x03\x02\x02\x02\u0E70\u021F\x03\x02\x02\x02\u0E71" +
		"\u0E79\x05\u021A\u010E\x02\u0E72\u0E73\x05\u021A\u010E\x02\u0E73\u0E74" +
		"\x07\x89\x02\x02\u0E74\u0E75\x05\u021A\u010E\x02\u0E75\u0E76\x07\x89\x02" +
		"\x02\u0E76\u0E77\x05\u021A\u010E\x02\u0E77\u0E79\x03\x02\x02\x02\u0E78" +
		"\u0E71\x03\x02\x02\x02\u0E78\u0E72\x03\x02\x02\x02\u0E79\u0221\x03\x02" +
		"\x02\x02\u0E7A\u0E7D\x05\u0216\u010C\x02\u0E7B\u0E7D\x05\u0224\u0113\x02" +
		"\u0E7C\u0E7A\x03\x02\x02\x02\u0E7C\u0E7B\x03\x02\x02\x02\u0E7D\u0223\x03" +
		"\x02\x02\x02\u0E7E\u0E7F\x05\u021A\u010E\x02\u0E7F\u0E80\x07\xAA\x02\x02" +
		"\u0E80\u0E81\x05\u020A\u0106\x02\u0E81\u0E87\x03\x02\x02\x02\u0E82\u0E83" +
		"\x05\u021A\u010E\x02\u0E83\u0E84\x07\xAB\x02\x02\u0E84\u0E85\x05\u020A" +
		"\u0106\x02\u0E85\u0E87\x03\x02\x02\x02\u0E86\u0E7E\x03\x02\x02\x02\u0E86" +
		"\u0E82\x03\x02\x02\x02\u0E87\u0225\x03\x02\x02\x02\u0E88\u0E89\x05\u020A" +
		"\u0106\x02\u0E89\u0227\x03\x02\x02\x02\u0E8A\u0EAA\x05\u0230\u0119\x02" +
		"\u0E8B\u0E8C\x05\u0260\u0131\x02\u0E8C\u0E8D\x05\u023E\u0120\x02\u0E8D" +
		"\u0EAA\x03\x02\x02\x02\u0E8E\u0E93\x05\u025E\u0130\x02\u0E8F\u0E90\x07" +
		"\x84\x02\x02\u0E90\u0E91\x05\u0212\u010A\x02\u0E91\u0E92\x07\x85\x02\x02" +
		"\u0E92\u0E94\x03\x02\x02\x02\u0E93\u0E8F\x03\x02\x02\x02\u0E93\u0E94\x03" +
		"\x02\x02\x02\u0E94\u0EAA\x03\x02\x02\x02\u0E95\u0E98\x05\u025C\u012F\x02" +
		"\u0E96\u0E98\x05\xB2Z\x02\u0E97\u0E95\x03\x02\x02\x02\u0E97\u0E96\x03" +
		"\x02\x02\x02\u0E97\u0E98\x03\x02\x02\x02\u0E98\u0E99\x03\x02\x02\x02\u0E99" +
		"\u0E9A\x05\u025E\u0130\x02\u0E9A\u0E9B\x05\u023E\u0120\x02\u0E9B\u0EAA" +
		"\x03\x02\x02\x02\u0E9C\u0EA1\x05\u01E2\xF2\x02\u0E9D\u0E9E\x07\x84\x02" +
		"\x02\u0E9E\u0E9F\x05\u0212\u010A\x02\u0E9F\u0EA0\x07\x85\x02\x02\u0EA0" +
		"\u0EA2\x03\x02\x02\x02\u0EA1\u0E9D\x03\x02\x02\x02\u0EA1\u0EA2\x03\x02" +
		"\x02\x02\u0EA2\u0EAA\x03\x02\x02\x02\u0EA3\u0EAA\x05\u01EC\xF7\x02\u0EA4" +
		"\u0EA5\x07\x80\x02\x02\u0EA5\u0EA6\x05\u020C\u0107\x02\u0EA6\u0EA7\x07" +
		"\x81\x02\x02\u0EA7\u0EAA\x03\x02\x02\x02\u0EA8\u0EAA\x05\u0240\u0121\x02" +
		"\u0EA9\u0E8A\x03\x02\x02\x02\u0EA9\u0E8B\x03\x02\x02\x02\u0EA9\u0E8E\x03" +
		"\x02\x02\x02\u0EA9\u0E97\x03\x02\x02\x02\u0EA9\u0E9C\x03\x02\x02\x02\u0EA9" +
		"\u0EA3\x03\x02\x02\x02\u0EA9\u0EA4\x03\x02\x02\x02\u0EA9\u0EA8\x03\x02" +
		"\x02\x02\u0EAA\u0229\x03\x02\x02\x02\u0EAB\u0ECC\x05\u0230\u0119\x02\u0EAC" +
		"\u0EAF\x05\u022C\u0117\x02\u0EAD\u0EAF\x05\u025C\u012F\x02\u0EAE\u0EAC" +
		"\x03\x02\x02\x02\u0EAE\u0EAD\x03\x02\x02\x02\u0EAF\u0EB0\x03\x02\x02\x02" +
		"\u0EB0\u0EB1\x05\u0262\u0132\x02\u0EB1\u0EB2\x05\u0238\u011D\x02\u0EB2" +
		"\u0ECC\x03\x02\x02\x02\u0EB3\u0ECC\x05\u01EA\xF6\x02\u0EB4\u0EB9\x05\u01E0" +
		"\xF1\x02\u0EB5\u0EB6\x07\x84\x02\x02\u0EB6\u0EB7\x05\u022E\u0118\x02\u0EB7" +
		"\u0EB8\x07\x85\x02\x02\u0EB8\u0EBA\x03\x02\x02\x02\u0EB9\u0EB5\x03\x02" +
		"\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02\u0EBA\u0ECC\x03\x02\x02\x02\u0EBB" +
		"\u0EC0\x05\u01E6\xF4\x02\u0EBC\u0EBD\x07\x84\x02\x02\u0EBD\u0EBE\x05\u022E" +
		"\u0118\x02\u0EBE\u0EBF\x07\x85\x02\x02\u0EBF\u0EC1\x03\x02\x02\x02\u0EC0" +
		"\u0EBC\x03\x02\x02\x02\u0EC0\u0EC1\x03\x02\x02\x02\u0EC1\u0ECC\x03\x02" +
		"\x02\x02\u0EC2\u0ECC\x05\u01F4\xFB\x02\u0EC3\u0EC4\x07\x80\x02\x02\u0EC4" +
		"\u0EC5\x05\u0220\u0111\x02\u0EC5\u0EC6\x07\x81\x02\x02\u0EC6\u0ECC\x03" +
		"\x02\x02\x02\u0EC7\u0ECC\x05\u0242\u0122\x02\u0EC8\u0ECC\x07M\x02\x02" +
		"\u0EC9\u0ECC\x07\x9C\x02\x02\u0ECA\u0ECC\x07t\x02\x02\u0ECB\u0EAB\x03" +
		"\x02\x02\x02\u0ECB\u0EAE\x03\x02\x02\x02\u0ECB\u0EB3\x03\x02\x02\x02\u0ECB" +
		"\u0EB4\x03\x02\x02\x02\u0ECB\u0EBB\x03\x02\x02\x02\u0ECB\u0EC2\x03\x02" +
		"\x02\x02\u0ECB\u0EC3\x03\x02\x02\x02\u0ECB\u0EC7\x03\x02\x02\x02\u0ECB" +
		"\u0EC8\x03\x02\x02\x02\u0ECB\u0EC9\x03\x02\x02\x02\u0ECB\u0ECA\x03\x02" +
		"\x02\x02\u0ECC\u022B\x03\x02\x02\x02\u0ECD\u0ECF\x07U\x02\x02\u0ECE\u0ECD" +
		"\x03\x02\x02\x02\u0ECE\u0ECF\x03\x02\x02\x02\u0ECF\u0ED4\x03\x02\x02\x02" +
		"\u0ED0\u0ED1\x05\u0234\u011B\x02\u0ED1\u0ED2\x07\x8B\x02\x02\u0ED2\u0ED5" +
		"\x03\x02\x02\x02\u0ED3\u0ED5\x05\xB2Z\x02\u0ED4\u0ED0\x03\x02\x02\x02" +
		"\u0ED4\u0ED3\x03\x02\x02\x02\u0ED4\u0ED5\x03\x02\x02\x02\u0ED5\u022D\x03" +
		"\x02\x02\x02\u0ED6\u0ED9\x05\u021A\u010E\x02\u0ED7\u0ED9\x05\u0222\u0112" +
		"\x02\u0ED8\u0ED6\x03\x02\x02\x02\u0ED8\u0ED7\x03\x02\x02\x02\u0ED9\u022F" +
		"\x03\x02\x02\x02\u0EDA\u0EDF\x05\u024A\u0126\x02\u0EDB\u0EDF\x05\u0232" +
		"\u011A\x02\u0EDC\u0EDF\x07\xD5\x02\x02\u0EDD\u0EDF\x07\xD6\x02\x02\u0EDE" +
		"\u0EDA\x03\x02\x02\x02\u0EDE\u0EDB\x03\x02\x02\x02\u0EDE\u0EDC\x03\x02" +
		"\x02\x02\u0EDE\u0EDD\x03\x02\x02\x02\u0EDF\u0231\x03\x02\x02\x02\u0EE0" +
		"\u0EE1\x07\xD4\x02\x02\u0EE1\u0EE5\x07\x7F\x02\x02\u0EE2\u0EE3\x07\xD2" +
		"\x02\x02\u0EE3\u0EE5\x07\x7F\x02\x02\u0EE4\u0EE0\x03\x02\x02\x02\u0EE4" +
		"\u0EE2\x03\x02\x02\x02\u0EE5\u0233\x03\x02\x02\x02\u0EE6\u0EE7\t\v\x02" +
		"\x02\u0EE7\u0235\x03\x02\x02\x02\u0EE8\u0EE9\x07\x84\x02\x02\u0EE9\u0EEA" +
		"\x05\u021A\u010E\x02\u0EEA\u0EEB\x07\x85\x02\x02\u0EEB\u0EED\x03\x02\x02" +
		"\x02\u0EEC\u0EE8\x03\x02\x02\x02\u0EED\u0EF0\x03\x02\x02\x02\u0EEE\u0EEC" +
		"\x03\x02\x02\x02\u0EEE\u0EEF\x03\x02\x02\x02\u0EEF\u0237\x03\x02\x02\x02" +
		"\u0EF0\u0EEE\x03\x02\x02\x02\u0EF1\u0EF2\x07\x8B\x02\x02\u0EF2\u0EF3\x05" +
		"\u025E\u0130\x02\u0EF3\u0EF4\x05\u0236\u011C\x02\u0EF4\u0EF6\x03\x02\x02" +
		"\x02\u0EF5\u0EF1\x03\x02\x02\x02\u0EF6\u0EF9\x03\x02\x02\x02\u0EF7\u0EF5" +
		"\x03\x02\x02\x02\u0EF7\u0EF8\x03\x02\x02\x02\u0EF8\u0EFA\x03\x02\x02\x02" +
		"\u0EF9\u0EF7\x03\x02\x02\x02\u0EFA\u0EFB\x07\x8B\x02\x02\u0EFB\u0EFD\x05" +
		"\u025E\u0130\x02\u0EFC\u0EF7\x03\x02\x02\x02\u0EFC\u0EFD\x03\x02\x02\x02" +
		"\u0EFD\u0EFE\x03\x02\x02\x02\u0EFE\u0F03\x05\u0236\u011C\x02\u0EFF\u0F00" +
		"\x07\x84\x02\x02\u0F00\u0F01\x05\u0222\u0112\x02\u0F01\u0F02\x07\x85\x02" +
		"\x02\u0F02\u0F04\x03\x02\x02\x02\u0F03\u0EFF\x03\x02\x02\x02\u0F03\u0F04" +
		"\x03\x02\x02\x02\u0F04\u0239\x03\x02\x02\x02\u0F05\u0F06\x07\x8B\x02\x02" +
		"\u0F06\u0F07\x05\u025E\u0130\x02\u0F07\u0F08\x05\u0236\u011C\x02\u0F08" +
		"\u0F0A\x03\x02\x02\x02\u0F09\u0F05\x03\x02\x02\x02\u0F0A\u0F0D\x03\x02" +
		"\x02\x02\u0F0B\u0F09\x03\x02\x02\x02\u0F0B\u0F0C\x03\x02\x02\x02\u0F0C" +
		"\u0F0E\x03\x02\x02\x02\u0F0D\u0F0B\x03\x02\x02\x02\u0F0E\u0F0F\x07\x8B" +
		"\x02\x02\u0F0F\u0F11\x05\u025E\u0130\x02\u0F10\u0F0B\x03\x02\x02\x02\u0F10" +
		"\u0F11\x03\x02\x02\x02\u0F11\u0F12\x03\x02\x02\x02\u0F12\u0F13\x05\u0236" +
		"\u011C\x02\u0F13\u023B\x03\x02\x02\x02\u0F14\u0F15\x07\x84\x02\x02\u0F15" +
		"\u0F16\x05\u020A\u0106\x02\u0F16\u0F17\x07\x85\x02\x02\u0F17\u0F19\x03" +
		"\x02\x02\x02\u0F18\u0F14\x03\x02\x02\x02\u0F19\u0F1C\x03\x02\x02\x02\u0F1A" +
		"\u0F18\x03\x02\x02\x02\u0F1A\u0F1B\x03\x02\x02\x02\u0F1B\u023D\x03\x02" +
		"\x02\x02\u0F1C\u0F1A\x03\x02\x02\x02\u0F1D\u0F1E\x07\x8B\x02\x02\u0F1E" +
		"\u0F1F\x05\u025E\u0130\x02\u0F1F\u0F20\x05\u023C\u011F\x02\u0F20\u0F22" +
		"\x03\x02\x02\x02\u0F21\u0F1D\x03\x02\x02\x02\u0F22\u0F25\x03\x02\x02\x02" +
		"\u0F23\u0F21\x03\x02\x02\x02\u0F23\u0F24\x03\x02\x02\x02\u0F24\u0F26\x03" +
		"\x02\x02\x02\u0F25\u0F23\x03\x02\x02\x02\u0F26\u0F27\x07\x8B\x02\x02\u0F27" +
		"\u0F29\x05\u025E\u0130\x02\u0F28\u0F23\x03\x02\x02\x02\u0F28\u0F29\x03" +
		"\x02\x02\x02\u0F29\u0F2A\x03\x02\x02\x02\u0F2A\u0F2B\x05\u023C\u011F\x02" +
		"\u0F2B\u023F\x03\x02\x02\x02\u0F2C\u0F2D\x07\x80\x02\x02\u0F2D\u0F2E\x05" +
		"\xA6T\x02\u0F2E\u0F2F\x07\x81\x02\x02\u0F2F\u0F30\x07\x86\x02\x02\u0F30" +
		"\u0F31\x05\u020A\u0106\x02\u0F31\u0F32\x07\x81\x02\x02\u0F32\u0241\x03" +
		"\x02\x02\x02\u0F33\u0F34\x05\xA6T\x02\u0F34\u0F35\x07\x86\x02\x02\u0F35" +
		"\u0F36\x05\u021A\u010E\x02\u0F36\u0F37\x07\x81\x02\x02\u0F37\u0243\x03" +
		"\x02\x02\x02\u0F38\u0F39\x05\u0264\u0133\x02\u0F39\u0F3A\x05\u023E\u0120" +
		"\x02\u0F3A\u0F43\x03\x02\x02\x02\u0F3B\u0F3C\x07\x82\x02\x02\u0F3C\u0F3D" +
		"\x05\u0244\u0123\x02\u0F3D\u0F3E\x07\x8C\x02\x02\u0F3E\u0F3F\x05\u0244" +
		"\u0123\x02\u0F3F\u0F40\x03\x02\x02\x02\u0F40\u0F41\x07\x83\x02\x02\u0F41" +
		"\u0F43\x03\x02\x02\x02\u0F42\u0F38\x03\x02\x02\x02\u0F42\u0F3B\x03\x02" +
		"\x02\x02\u0F43\u0245\x03\x02\x02\x02\u0F44\u0F45\x05\u0234\u011B\x02\u0F45" +
		"\u0F46\x07\x8B\x02\x02\u0F46\u0F49\x03\x02\x02\x02\u0F47\u0F49\x05\u025C" +
		"\u012F\x02\u0F48\u0F44\x03\x02\x02\x02\u0F48\u0F47\x03\x02\x02\x02\u0F48" +
		"\u0F49\x03\x02\x02\x02\u0F49\u0F4A\x03\x02\x02\x02\u0F4A\u0F4B\x05\u0262" +
		"\u0132\x02\u0F4B\u0F4C\x05\u0238\u011D\x02\u0F4C\u0F59\x03\x02\x02\x02" +
		"\u0F4D\u0F4E\x07\x82\x02\x02\u0F4E\u0F53\x05\u0246\u0124\x02\u0F4F\u0F50" +
		"\x07\x8C\x02\x02\u0F50\u0F52\x05\u0246\u0124\x02\u0F51\u0F4F\x03\x02\x02" +
		"\x02\u0F52\u0F55\x03\x02\x02\x02\u0F53\u0F51\x03\x02\x02\x02\u0F53\u0F54" +
		"\x03\x02\x02\x02\u0F54\u0F56\x03\x02\x02\x02\u0F55\u0F53\x03\x02\x02\x02" +
		"\u0F56\u0F57\x07\x83\x02\x02\u0F57\u0F59\x03\x02\x02\x02\u0F58\u0F48\x03" +
		"\x02\x02\x02\u0F58\u0F4D\x03\x02\x02\x02\u0F59\u0247\x03\x02\x02\x02\u0F5A" +
		"\u0F5B\x05\u0234\u011B\x02\u0F5B\u0F5C\x07\x8B\x02\x02\u0F5C\u0F5F\x03" +
		"\x02\x02\x02\u0F5D";
	private static readonly _serializedATNSegment7: string =
		"\u0F5F\x05\u025C\u012F\x02\u0F5E\u0F5A\x03\x02\x02\x02\u0F5E\u0F5D\x03" +
		"\x02\x02\x02\u0F5E\u0F5F\x03\x02\x02\x02\u0F5F\u0F60\x03\x02\x02\x02\u0F60" +
		"\u0F61\x05\u0262\u0132\x02\u0F61\u0F62\x05\u023A\u011E\x02\u0F62\u0249" +
		"\x03\x02\x02\x02\u0F63\u0F66\x05\u024C\u0127\x02\u0F64\u0F66\x05\u0250" +
		"\u0129\x02\u0F65\u0F63\x03\x02\x02\x02\u0F65\u0F64\x03\x02\x02\x02\u0F66" +
		"\u024B\x03\x02\x02\x02\u0F67\u0F6C\x07\xCE\x02\x02\u0F68\u0F6C\x07\xCF" +
		"\x02\x02\u0F69\u0F6C\x07\xD0\x02\x02\u0F6A\u0F6C\x05\u024E\u0128\x02\u0F6B" +
		"\u0F67\x03\x02\x02\x02\u0F6B\u0F68\x03\x02\x02\x02\u0F6B\u0F69\x03\x02" +
		"\x02\x02\u0F6B\u0F6A\x03\x02\x02\x02\u0F6C\u024D\x03\x02\x02\x02\u0F6D" +
		"\u0F6E\t\f\x02\x02\u0F6E\u024F\x03\x02\x02\x02\u0F6F\u0F70\t\r\x02\x02" +
		"\u0F70\u0251\x03\x02\x02\x02\u0F71\u0F72\t\x0E\x02\x02\u0F72\u0253\x03" +
		"\x02\x02\x02\u0F73\u0F74\t\x0F\x02\x02\u0F74\u0255\x03\x02\x02\x02\u0F75" +
		"\u0F76\t\x10\x02\x02\u0F76\u0257\x03\x02\x02\x02\u0F77\u0F78\t\x11\x02" +
		"\x02\u0F78\u0259\x03\x02\x02\x02\u0F79\u0F7A\t\x12\x02\x02\u0F7A\u025B" +
		"\x03\x02\x02\x02\u0F7B\u0F7C\x05\u025E\u0130\x02\u0F7C\u0F7D\x07\xA8\x02" +
		"\x02\u0F7D\u0F80\x03\x02\x02\x02\u0F7E\u0F80\x07T\x02\x02\u0F7F\u0F7B" +
		"\x03\x02\x02\x02\u0F7F\u0F7E\x03\x02\x02\x02\u0F80\u025D\x03\x02\x02\x02" +
		"\u0F81\u0F82\x07\xD8\x02\x02\u0F82\u025F\x03\x02\x02\x02\u0F83\u0F85\x05" +
		"\u025C\u012F\x02\u0F84\u0F83\x03\x02\x02\x02\u0F84\u0F85\x03\x02\x02\x02" +
		"\u0F85\u0F86\x03\x02\x02\x02\u0F86\u0F87\x05\u025E\u0130\x02\u0F87\u0261" +
		"\x03\x02\x02\x02\u0F88\u0F8A\x07S\x02\x02\u0F89\u0F88\x03\x02\x02\x02" +
		"\u0F89\u0F8A\x03\x02\x02\x02\u0F8A\u0F91\x03\x02\x02\x02\u0F8B\u0F8C\x05" +
		"\u025E\u0130\x02\u0F8C\u0F8D\x05\u023C\u011F\x02\u0F8D\u0F8E\x07\x8B\x02" +
		"\x02\u0F8E\u0F90\x03\x02\x02\x02\u0F8F\u0F8B\x03\x02\x02\x02\u0F90\u0F93" +
		"\x03\x02\x02\x02\u0F91\u0F8F\x03\x02\x02\x02\u0F91\u0F92\x03\x02\x02\x02" +
		"\u0F92\u0F94\x03\x02\x02\x02\u0F93\u0F91\x03\x02\x02\x02\u0F94\u0F95\x05" +
		"\u025E\u0130\x02\u0F95\u0263\x03\x02\x02\x02\u0F96\u0F99\x05\u0260\u0131" +
		"\x02\u0F97\u0F99\x05\u0262\u0132\x02\u0F98\u0F96\x03\x02\x02\x02\u0F98" +
		"\u0F97\x03\x02\x02\x02\u0F99\u0265\x03\x02\x02\x02\u0F9A\u0F9C\x05\u0268" +
		"\u0135\x02\u0F9B\u0F9A\x03\x02\x02\x02\u0F9C\u0F9F\x03\x02\x02\x02\u0F9D" +
		"\u0F9B\x03\x02\x02\x02\u0F9D\u0F9E\x03\x02\x02\x02\u0F9E\u0267\x03\x02" +
		"\x02\x02\u0F9F\u0F9D\x03\x02\x02\x02\u0FA0\u0FAB\x05\u026A\u0136\x02\u0FA1" +
		"\u0FAB\x05\u026C\u0137\x02\u0FA2\u0FAB\x05\u026E\u0138\x02\u0FA3\u0FAB" +
		"\x05\u0270\u0139\x02\u0FA4\u0FAB\x05\u0272\u013A\x02\u0FA5\u0FAB\x05\u0274" +
		"\u013B\x02\u0FA6\u0FAB\x05\u0276\u013C\x02\u0FA7\u0FAB\x05\u0278\u013D" +
		"\x02\u0FA8\u0FAB\x05\u027A\u013E\x02\u0FA9\u0FAB\x05\u027C\u013F\x02\u0FAA" +
		"\u0FA0\x03\x02\x02\x02\u0FAA\u0FA1\x03\x02\x02\x02\u0FAA\u0FA2\x03\x02" +
		"\x02\x02\u0FAA\u0FA3\x03\x02\x02\x02\u0FAA\u0FA4\x03\x02\x02\x02\u0FAA" +
		"\u0FA5\x03\x02\x02\x02\u0FAA\u0FA6\x03\x02\x02\x02\u0FAA\u0FA7\x03\x02" +
		"\x02\x02\u0FAA\u0FA8\x03\x02\x02\x02\u0FAA\u0FA9\x03\x02\x02\x02\u0FAB" +
		"\u0269\x03\x02\x02\x02\u0FAC\u0FAD\x07\xE2\x02\x02\u0FAD\u0FAE\x07\xED" +
		"\x02\x02\u0FAE\u026B\x03\x02\x02\x02\u0FAF\u0FB0\x07\xE1\x02\x02\u0FB0" +
		"\u0FB1\x07\xEF\x02\x02\u0FB1\u0FB2\x07\xF0\x02\x02\u0FB2\u0FB3\x07\xEC" +
		"\x02\x02\u0FB3\u0FB4\x07\xEF\x02\x02\u0FB4\u0FB5\x07\xF0\x02\x02\u0FB5" +
		"\u026D\x03\x02\x02\x02\u0FB6\u0FB7\x07\xE0\x02\x02\u0FB7\u0FB8\x07\xEE" +
		"\x02\x02\u0FB8\u026F\x03\x02\x02\x02\u0FB9\u0FBA\x07\xDE\x02\x02\u0FBA" +
		"\u0FBB\x07\xFC\x02\x02\u0FBB\u0271\x03\x02\x02\x02\u0FBC\u0FBD\x07\xDE" +
		"\x02\x02\u0FBD\u0FBE\x07\xFA\x02\x02\u0FBE\u0FBF\x07\u0103\x02\x02\u0FBF" +
		"\u0273\x03\x02\x02\x02\u0FC0\u0FC1\x07\xDE\x02\x02\u0FC1\u0FC2\x07\xFB" +
		"\x02\x02\u0FC2\u0FC7\x07\u0102\x02\x02\u0FC3\u0FC4\x07\u0100\x02\x02\u0FC4" +
		"\u0FC6\x07\u0102\x02\x02\u0FC5\u0FC3\x03\x02\x02\x02\u0FC6\u0FC9\x03\x02" +
		"\x02\x02\u0FC7\u0FC5\x03\x02\x02\x02\u0FC7\u0FC8\x03\x02\x02\x02\u0FC8" +
		"\u0FCA\x03\x02\x02\x02\u0FC9\u0FC7\x03\x02\x02\x02\u0FCA\u0FCB\x07\xFF" +
		"\x02\x02\u0FCB\u0FCC\x07\u0103\x02\x02\u0FCC\u0275\x03\x02\x02\x02\u0FCD" +
		"\u0FCE\x07\xDF\x02\x02\u0FCE\u0FCF\x07\xF1\x02\x02\u0FCF\u0277\x03\x02" +
		"\x02\x02\u0FD0\u0FD1\x07\xE8\x02\x02\u0FD1\u0279\x03\x02\x02\x02\u0FD2" +
		"\u0FD3\x07\xE9\x02\x02\u0FD3\u0FD8\x07\xF7\x02\x02\u0FD4\u0FD5\x07\xF6" +
		"\x02\x02\u0FD5\u0FD7\x07\xF7\x02\x02\u0FD6\u0FD4\x03\x02\x02\x02\u0FD7" +
		"\u0FDA\x03\x02\x02\x02\u0FD8\u0FD6\x03\x02\x02\x02\u0FD8\u0FD9\x03\x02" +
		"\x02\x02\u0FD9\u0FDB\x03\x02\x02\x02\u0FDA\u0FD8\x03\x02\x02\x02\u0FDB" +
		"\u0FDC\x07\xF5\x02\x02\u0FDC\u027B\x03\x02\x02\x02\u0FDD\u0FDE\t\x13\x02" +
		"\x02\u0FDE\u0FE0\x07\xF1\x02\x02\u0FDF\u0FE1\x05\u027C\u013F\x02\u0FE0" +
		"\u0FDF\x03\x02\x02\x02\u0FE0\u0FE1\x03\x02\x02\x02\u0FE1\u0FE9\x03\x02" +
		"\x02\x02\u0FE2\u0FE3\x07\xE6\x02\x02\u0FE3\u0FE5\x07\xF1\x02\x02\u0FE4" +
		"\u0FE6\x05\u027C\u013F\x02\u0FE5\u0FE4\x03\x02\x02\x02\u0FE5\u0FE6\x03" +
		"\x02\x02\x02\u0FE6\u0FE8\x03\x02\x02\x02\u0FE7\u0FE2\x03\x02\x02\x02\u0FE8" +
		"\u0FEB\x03\x02\x02\x02\u0FE9\u0FE7\x03\x02\x02\x02\u0FE9\u0FEA\x03\x02" +
		"\x02\x02\u0FEA\u0FF0\x03\x02\x02\x02\u0FEB\u0FE9\x03\x02\x02\x02\u0FEC" +
		"\u0FEE\x07\xE5\x02\x02\u0FED\u0FEF\x05\u027C\u013F\x02\u0FEE\u0FED\x03" +
		"\x02\x02\x02\u0FEE\u0FEF\x03\x02\x02\x02\u0FEF\u0FF1\x03\x02\x02\x02\u0FF0" +
		"\u0FEC\x03\x02\x02\x02\u0FF0\u0FF1\x03\x02\x02\x02\u0FF1\u0FF2\x03\x02" +
		"\x02\x02\u0FF2\u0FF3\x07\xE7\x02\x02\u0FF3\u027D\x03\x02\x02\x02\u01E3" +
		"\u027F\u0284\u028D\u0291\u0297\u029B\u02A2\u02A8\u02AC\u02AF\u02B5\u02BA" +
		"\u02C0\u02C4\u02C9\u02CF\u02D3\u02DB\u02E0\u02E6\u02E8\u02EC\u02F1\u02F7" +
		"\u02FB\u0300\u0306\u030A\u0310\u0314\u031B\u0321\u0325\u0328\u032D\u0331" +
		"\u0335\u033D\u033F\u0347\u034A\u0350\u0356\u035A\u0360\u0368\u036B\u0371" +
		"\u0377\u0382\u038B\u0390\u0395\u039B\u03A1\u03B7\u03C0\u03CC\u03D4\u03DA" +
		"\u03E2\u03ED\u03F0\u03F9\u0402\u040A\u040F\u0412\u041F\u0424\u0426\u042A" +
		"\u0430\u0435\u043C\u0440\u0448\u0450\u0458\u045B\u0468\u046E\u0473\u0477" +
		"\u047D\u0486\u0491\u0497\u049D\u04A6\u04AB\u04B3\u04BA\u04BE\u04C3\u04CA" +
		"\u04D3\u04DD\u04E6\u04EE\u04F2\u04F8\u04FB\u0501\u0507\u050A\u050E\u0512" +
		"\u0516\u051B\u051E\u0524\u052E\u0531\u0536\u053C\u053F\u0549\u0555\u055C" +
		"\u0563\u0569\u057C\u0583\u058F\u0593\u059A\u059F\u05A5\u05A8\u05AB\u05B7" +
		"\u05C6\u05CD\u05D6\u05DF\u05ED\u05F7\u0605\u0608\u060B\u0614\u061C\u0629" +
		"\u0635\u0648\u0650\u0654\u065C\u066B\u0670\u0678\u0680\u0684\u068B\u0691" +
		"\u069B\u069F\u06A4\u06A9\u06AF\u06B1\u06B7\u06BD\u06C8\u06CF\u06D6\u06DC" +
		"\u06E1\u06E5\u06EB\u06F2\u06F6\u06F9\u06FE\u0703\u0707\u070A\u070E\u0710" +
		"\u0717\u071B\u071F\u0726\u072B\u072F\u0736\u073B\u0742\u0747\u074C\u074E" +
		"\u0752\u0755\u0765\u076C\u0773\u077B\u0782\u078A\u078F\u0797\u079F\u07A6" +
		"\u07AD\u07B2\u07B9\u07BE\u07C4\u07C9\u07CD\u07D5\u07DD\u07E4\u07EC\u07F1" +
		"\u07F8\u07FD\u0803\u0808\u080C\u0817\u081C\u0822\u0827\u0831\u0836\u083D" +
		"\u0842\u0847\u0849\u084C\u0853\u0857\u0861\u086B\u0872\u087B\u0881\u0887" +
		"\u0890\u0894\u089D\u08A4\u08AA\u08B0\u08B7\u08BC\u08C3\u08C9\u08CF\u08D1" +
		"\u08D8\u08DB\u08DF\u08E7\u08EE\u08F4\u08FA\u0900\u0905\u090C\u0912\u0918" +
		"\u091A\u091E\u0925\u0929\u092C\u0933\u0938\u093D\u0941\u094D\u0956\u095E" +
		"\u096A\u0972\u097D\u0985\u0989\u0992\u0999\u099D\u09A7\u09AB\u09B2\u09BA" +
		"\u09C6\u09CF\u09D2\u09DA\u09DF\u09E4\u09EC\u09F7\u0A00\u0A03\u0A0B\u0A0E" +
		"\u0A11\u0A1F\u0A2F\u0A3F\u0A43\u0A4C\u0A56\u0A60\u0A68\u0A6B\u0A71\u0A76" +
		"\u0A7B\u0A81\u0A83\u0A8D\u0A92\u0A99\u0AA1\u0AAC\u0ACC\u0AD4\u0ADF\u0AEF" +
		"\u0AF7\u0AFB\u0B00\u0B05\u0B0B\u0B11\u0B15\u0B1A\u0B35\u0B3B\u0B42\u0B50" +
		"\u0B59\u0B6A\u0B6E\u0B73\u0B79\u0B81\u0B83\u0B89\u0B8D\u0B94\u0BA6\u0BAC" +
		"\u0BB4\u0BB9\u0BC2\u0BC5\u0BD5\u0BDA\u0BE3\u0BE8\u0BEF\u0BF9\u0BFF\u0C0A" +
		"\u0C0F\u0C18\u0C20\u0C23\u0C2B\u0C2E\u0C37\u0C43\u0C57\u0C5C\u0C6F\u0C73" +
		"\u0C77\u0C8C\u0C94\u0C97\u0C9A\u0CA7\u0CAF\u0CB5\u0CB8\u0CBE\u0CC9\u0CCD" +
		"\u0CD2\u0CDA\u0CDF\u0CF6\u0D06\u0D16\u0D26\u0D31\u0D3B\u0D46\u0D62\u0D6E" +
		"\u0D75\u0D7C\u0D80\u0D86\u0D89\u0D90\u0D94\u0D98\u0DA0\u0DA6\u0DAD\u0DB5" +
		"\u0DBB\u0DBE\u0DC6\u0DCC\u0DD3\u0DD6\u0DDA\u0DE1\u0DE8\u0DEE\u0DF1\u0DF8" +
		"\u0E00\u0E07\u0E13\u0E15\u0E1F\u0E24\u0E29\u0E2D\u0E31\u0E3F\u0E4C\u0E5E" +
		"\u0E60\u0E66\u0E6F\u0E78\u0E7C\u0E86\u0E93\u0E97\u0EA1\u0EA9\u0EAE\u0EB9" +
		"\u0EC0\u0ECB\u0ECE\u0ED4\u0ED8\u0EDE\u0EE4\u0EEE\u0EF7\u0EFC\u0F03\u0F0B" +
		"\u0F10\u0F1A\u0F23\u0F28\u0F42\u0F48\u0F53\u0F58\u0F5E\u0F65\u0F6B\u0F7F" +
		"\u0F84\u0F89\u0F91\u0F98\u0F9D\u0FAA\u0FC7\u0FD8\u0FE0\u0FE5\u0FE9\u0FEE" +
		"\u0FF0";
	public static readonly _serializedATN: string = Utils.join(
		[
			SystemVerilogParser._serializedATNSegment0,
			SystemVerilogParser._serializedATNSegment1,
			SystemVerilogParser._serializedATNSegment2,
			SystemVerilogParser._serializedATNSegment3,
			SystemVerilogParser._serializedATNSegment4,
			SystemVerilogParser._serializedATNSegment5,
			SystemVerilogParser._serializedATNSegment6,
			SystemVerilogParser._serializedATNSegment7,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SystemVerilogParser.__ATN) {
			SystemVerilogParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SystemVerilogParser._serializedATN));
		}

		return SystemVerilogParser.__ATN;
	}

}

export class Source_textContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(SystemVerilogParser.EOF, 0); }
	public timeunits_declaration(): Timeunits_declarationContext | undefined {
		return this.tryGetRuleContext(0, Timeunits_declarationContext);
	}
	public description(): DescriptionContext[];
	public description(i: number): DescriptionContext;
	public description(i?: number): DescriptionContext | DescriptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DescriptionContext);
		} else {
			return this.getRuleContext(i, DescriptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_source_text; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSource_text) {
			listener.enterSource_text(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSource_text) {
			listener.exitSource_text(this);
		}
	}
}


export class DescriptionContext extends ParserRuleContext {
	public module_declaration(): Module_declarationContext | undefined {
		return this.tryGetRuleContext(0, Module_declarationContext);
	}
	public interface_declaration(): Interface_declarationContext | undefined {
		return this.tryGetRuleContext(0, Interface_declarationContext);
	}
	public package_declaration(): Package_declarationContext | undefined {
		return this.tryGetRuleContext(0, Package_declarationContext);
	}
	public package_item(): Package_itemContext | undefined {
		return this.tryGetRuleContext(0, Package_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_description; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDescription) {
			listener.enterDescription(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDescription) {
			listener.exitDescription(this);
		}
	}
}


export class Module_nonansi_headerContext extends ParserRuleContext {
	public MODULE_KEYWORD(): TerminalNode { return this.getToken(SystemVerilogParser.MODULE_KEYWORD, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public list_of_ports(): List_of_portsContext {
		return this.getRuleContext(0, List_of_portsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	public package_import_declaration(): Package_import_declarationContext[];
	public package_import_declaration(i: number): Package_import_declarationContext;
	public package_import_declaration(i?: number): Package_import_declarationContext | Package_import_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_import_declarationContext);
		} else {
			return this.getRuleContext(i, Package_import_declarationContext);
		}
	}
	public parameter_port_list(): Parameter_port_listContext | undefined {
		return this.tryGetRuleContext(0, Parameter_port_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_nonansi_header; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_nonansi_header) {
			listener.enterModule_nonansi_header(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_nonansi_header) {
			listener.exitModule_nonansi_header(this);
		}
	}
}


export class Module_ansi_headerContext extends ParserRuleContext {
	public MODULE_KEYWORD(): TerminalNode { return this.getToken(SystemVerilogParser.MODULE_KEYWORD, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	public package_import_declaration(): Package_import_declarationContext[];
	public package_import_declaration(i: number): Package_import_declarationContext;
	public package_import_declaration(i?: number): Package_import_declarationContext | Package_import_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_import_declarationContext);
		} else {
			return this.getRuleContext(i, Package_import_declarationContext);
		}
	}
	public parameter_port_list(): Parameter_port_listContext | undefined {
		return this.tryGetRuleContext(0, Parameter_port_listContext);
	}
	public list_of_port_declarations(): List_of_port_declarationsContext | undefined {
		return this.tryGetRuleContext(0, List_of_port_declarationsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_ansi_header; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_ansi_header) {
			listener.enterModule_ansi_header(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_ansi_header) {
			listener.exitModule_ansi_header(this);
		}
	}
}


export class Module_declarationContext extends ParserRuleContext {
	public module_ansi_header(): Module_ansi_headerContext | undefined {
		return this.tryGetRuleContext(0, Module_ansi_headerContext);
	}
	public ENDMODULE(): TerminalNode { return this.getToken(SystemVerilogParser.ENDMODULE, 0); }
	public timeunits_declaration(): Timeunits_declarationContext | undefined {
		return this.tryGetRuleContext(0, Timeunits_declarationContext);
	}
	public non_port_module_item(): Non_port_module_itemContext[];
	public non_port_module_item(i: number): Non_port_module_itemContext;
	public non_port_module_item(i?: number): Non_port_module_itemContext | Non_port_module_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Non_port_module_itemContext);
		} else {
			return this.getRuleContext(i, Non_port_module_itemContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public module_nonansi_header(): Module_nonansi_headerContext | undefined {
		return this.tryGetRuleContext(0, Module_nonansi_headerContext);
	}
	public module_item(): Module_itemContext[];
	public module_item(i: number): Module_itemContext;
	public module_item(i?: number): Module_itemContext | Module_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Module_itemContext);
		} else {
			return this.getRuleContext(i, Module_itemContext);
		}
	}
	public MODULE_KEYWORD(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MODULE_KEYWORD, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public FORALL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FORALL, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_declaration) {
			listener.enterModule_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_declaration) {
			listener.exitModule_declaration(this);
		}
	}
}


export class Interface_declarationContext extends ParserRuleContext {
	public interface_nonansi_header(): Interface_nonansi_headerContext {
		return this.getRuleContext(0, Interface_nonansi_headerContext);
	}
	public ENDINTERFACE(): TerminalNode[];
	public ENDINTERFACE(i: number): TerminalNode;
	public ENDINTERFACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.ENDINTERFACE);
		} else {
			return this.getToken(SystemVerilogParser.ENDINTERFACE, i);
		}
	}
	public interface_ansi_header(): Interface_ansi_headerContext {
		return this.getRuleContext(0, Interface_ansi_headerContext);
	}
	public timeunits_declaration(): Timeunits_declarationContext[];
	public timeunits_declaration(i: number): Timeunits_declarationContext;
	public timeunits_declaration(i?: number): Timeunits_declarationContext | Timeunits_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Timeunits_declarationContext);
		} else {
			return this.getRuleContext(i, Timeunits_declarationContext);
		}
	}
	public interface_item(): Interface_itemContext[];
	public interface_item(i: number): Interface_itemContext;
	public interface_item(i?: number): Interface_itemContext | Interface_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Interface_itemContext);
		} else {
			return this.getRuleContext(i, Interface_itemContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COLON);
		} else {
			return this.getToken(SystemVerilogParser.COLON, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public non_port_interface_item(): Non_port_interface_itemContext[];
	public non_port_interface_item(i: number): Non_port_interface_itemContext;
	public non_port_interface_item(i?: number): Non_port_interface_itemContext | Non_port_interface_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Non_port_interface_itemContext);
		} else {
			return this.getRuleContext(i, Non_port_interface_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_declaration) {
			listener.enterInterface_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_declaration) {
			listener.exitInterface_declaration(this);
		}
	}
}


export class Interface_nonansi_headerContext extends ParserRuleContext {
	public INTERFACE(): TerminalNode { return this.getToken(SystemVerilogParser.INTERFACE, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public list_of_ports(): List_of_portsContext {
		return this.getRuleContext(0, List_of_portsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	public package_import_declaration(): Package_import_declarationContext[];
	public package_import_declaration(i: number): Package_import_declarationContext;
	public package_import_declaration(i?: number): Package_import_declarationContext | Package_import_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_import_declarationContext);
		} else {
			return this.getRuleContext(i, Package_import_declarationContext);
		}
	}
	public parameter_port_list(): Parameter_port_listContext | undefined {
		return this.tryGetRuleContext(0, Parameter_port_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_nonansi_header; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_nonansi_header) {
			listener.enterInterface_nonansi_header(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_nonansi_header) {
			listener.exitInterface_nonansi_header(this);
		}
	}
}


export class Interface_ansi_headerContext extends ParserRuleContext {
	public INTERFACE(): TerminalNode { return this.getToken(SystemVerilogParser.INTERFACE, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	public package_import_declaration(): Package_import_declarationContext[];
	public package_import_declaration(i: number): Package_import_declarationContext;
	public package_import_declaration(i?: number): Package_import_declarationContext | Package_import_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_import_declarationContext);
		} else {
			return this.getRuleContext(i, Package_import_declarationContext);
		}
	}
	public parameter_port_list(): Parameter_port_listContext | undefined {
		return this.tryGetRuleContext(0, Parameter_port_listContext);
	}
	public list_of_port_declarations(): List_of_port_declarationsContext | undefined {
		return this.tryGetRuleContext(0, List_of_port_declarationsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_ansi_header; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_ansi_header) {
			listener.enterInterface_ansi_header(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_ansi_header) {
			listener.exitInterface_ansi_header(this);
		}
	}
}


export class Class_declarationContext extends ParserRuleContext {
	public CLASS(): TerminalNode { return this.getToken(SystemVerilogParser.CLASS, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public ENDCLASS(): TerminalNode { return this.getToken(SystemVerilogParser.ENDCLASS, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VIRTUAL, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	public parameter_port_list(): Parameter_port_listContext | undefined {
		return this.tryGetRuleContext(0, Parameter_port_listContext);
	}
	public EXTENDS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EXTENDS, 0); }
	public class_type(): Class_typeContext | undefined {
		return this.tryGetRuleContext(0, Class_typeContext);
	}
	public IMPLEMENTS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.IMPLEMENTS, 0); }
	public interface_class_type(): Interface_class_typeContext[];
	public interface_class_type(i: number): Interface_class_typeContext;
	public interface_class_type(i?: number): Interface_class_typeContext | Interface_class_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Interface_class_typeContext);
		} else {
			return this.getRuleContext(i, Interface_class_typeContext);
		}
	}
	public class_item(): Class_itemContext[];
	public class_item(i: number): Class_itemContext;
	public class_item(i?: number): Class_itemContext | Class_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Class_itemContext);
		} else {
			return this.getRuleContext(i, Class_itemContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_declaration) {
			listener.enterClass_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_declaration) {
			listener.exitClass_declaration(this);
		}
	}
}


export class Interface_class_typeContext extends ParserRuleContext {
	public ps_ident(): Ps_identContext {
		return this.getRuleContext(0, Ps_identContext);
	}
	public parameter_value_assignment(): Parameter_value_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Parameter_value_assignmentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_class_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_class_type) {
			listener.enterInterface_class_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_class_type) {
			listener.exitInterface_class_type(this);
		}
	}
}


export class Interface_class_declarationContext extends ParserRuleContext {
	public INTERFACE(): TerminalNode { return this.getToken(SystemVerilogParser.INTERFACE, 0); }
	public CLASS(): TerminalNode { return this.getToken(SystemVerilogParser.CLASS, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public ENDCLASS(): TerminalNode { return this.getToken(SystemVerilogParser.ENDCLASS, 0); }
	public parameter_port_list(): Parameter_port_listContext | undefined {
		return this.tryGetRuleContext(0, Parameter_port_listContext);
	}
	public EXTENDS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EXTENDS, 0); }
	public interface_class_type(): Interface_class_typeContext[];
	public interface_class_type(i: number): Interface_class_typeContext;
	public interface_class_type(i?: number): Interface_class_typeContext | Interface_class_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Interface_class_typeContext);
		} else {
			return this.getRuleContext(i, Interface_class_typeContext);
		}
	}
	public interface_class_item(): Interface_class_itemContext[];
	public interface_class_item(i: number): Interface_class_itemContext;
	public interface_class_item(i?: number): Interface_class_itemContext | Interface_class_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Interface_class_itemContext);
		} else {
			return this.getRuleContext(i, Interface_class_itemContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_class_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_class_declaration) {
			listener.enterInterface_class_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_class_declaration) {
			listener.exitInterface_class_declaration(this);
		}
	}
}


export class Interface_class_itemContext extends ParserRuleContext {
	public type_declaration(): Type_declarationContext | undefined {
		return this.tryGetRuleContext(0, Type_declarationContext);
	}
	public interface_class_method(): Interface_class_methodContext | undefined {
		return this.tryGetRuleContext(0, Interface_class_methodContext);
	}
	public local_parameter_declaration(): Local_parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Local_parameter_declarationContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public parameter_declaration(): Parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Parameter_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_class_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_class_item) {
			listener.enterInterface_class_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_class_item) {
			listener.exitInterface_class_item(this);
		}
	}
}


export class Interface_class_methodContext extends ParserRuleContext {
	public PURE(): TerminalNode { return this.getToken(SystemVerilogParser.PURE, 0); }
	public VIRTUAL(): TerminalNode { return this.getToken(SystemVerilogParser.VIRTUAL, 0); }
	public method_prototype(): Method_prototypeContext {
		return this.getRuleContext(0, Method_prototypeContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_class_method; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_class_method) {
			listener.enterInterface_class_method(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_class_method) {
			listener.exitInterface_class_method(this);
		}
	}
}


export class Package_declarationContext extends ParserRuleContext {
	public PACKAGE(): TerminalNode { return this.getToken(SystemVerilogParser.PACKAGE, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public ENDPACKAGE(): TerminalNode { return this.getToken(SystemVerilogParser.ENDPACKAGE, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	public timeunits_declaration(): Timeunits_declarationContext | undefined {
		return this.tryGetRuleContext(0, Timeunits_declarationContext);
	}
	public package_item(): Package_itemContext[];
	public package_item(i: number): Package_itemContext;
	public package_item(i?: number): Package_itemContext | Package_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_itemContext);
		} else {
			return this.getRuleContext(i, Package_itemContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_package_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPackage_declaration) {
			listener.enterPackage_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPackage_declaration) {
			listener.exitPackage_declaration(this);
		}
	}
}


export class Timeunits_declarationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_timeunits_declaration; }
	public copyFrom(ctx: Timeunits_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class Timeunits_declaration_0Context extends Timeunits_declarationContext {
	public TIMEUNIT(): TerminalNode { return this.getToken(SystemVerilogParser.TIMEUNIT, 0); }
	public time_literal(): Time_literalContext[];
	public time_literal(i: number): Time_literalContext;
	public time_literal(i?: number): Time_literalContext | Time_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Time_literalContext);
		} else {
			return this.getRuleContext(i, Time_literalContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public DIV(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DIV, 0); }
	constructor(ctx: Timeunits_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTimeunits_declaration_0) {
			listener.enterTimeunits_declaration_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTimeunits_declaration_0) {
			listener.exitTimeunits_declaration_0(this);
		}
	}
}
export class Timeunits_declaration_1Context extends Timeunits_declarationContext {
	public TIMEPRECISION(): TerminalNode { return this.getToken(SystemVerilogParser.TIMEPRECISION, 0); }
	public time_literal(): Time_literalContext {
		return this.getRuleContext(0, Time_literalContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(ctx: Timeunits_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTimeunits_declaration_1) {
			listener.enterTimeunits_declaration_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTimeunits_declaration_1) {
			listener.exitTimeunits_declaration_1(this);
		}
	}
}
export class Timeunits_declaration_2Context extends Timeunits_declarationContext {
	public TIMEUNIT(): TerminalNode { return this.getToken(SystemVerilogParser.TIMEUNIT, 0); }
	public time_literal(): Time_literalContext[];
	public time_literal(i: number): Time_literalContext;
	public time_literal(i?: number): Time_literalContext | Time_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Time_literalContext);
		} else {
			return this.getRuleContext(i, Time_literalContext);
		}
	}
	public SEMIC(): TerminalNode[];
	public SEMIC(i: number): TerminalNode;
	public SEMIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.SEMIC);
		} else {
			return this.getToken(SystemVerilogParser.SEMIC, i);
		}
	}
	public TIMEPRECISION(): TerminalNode { return this.getToken(SystemVerilogParser.TIMEPRECISION, 0); }
	constructor(ctx: Timeunits_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTimeunits_declaration_2) {
			listener.enterTimeunits_declaration_2(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTimeunits_declaration_2) {
			listener.exitTimeunits_declaration_2(this);
		}
	}
}
export class Timeunits_declaration_3Context extends Timeunits_declarationContext {
	public TIMEPRECISION(): TerminalNode { return this.getToken(SystemVerilogParser.TIMEPRECISION, 0); }
	public time_literal(): Time_literalContext[];
	public time_literal(i: number): Time_literalContext;
	public time_literal(i?: number): Time_literalContext | Time_literalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Time_literalContext);
		} else {
			return this.getRuleContext(i, Time_literalContext);
		}
	}
	public SEMIC(): TerminalNode[];
	public SEMIC(i: number): TerminalNode;
	public SEMIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.SEMIC);
		} else {
			return this.getToken(SystemVerilogParser.SEMIC, i);
		}
	}
	public TIMEUNIT(): TerminalNode { return this.getToken(SystemVerilogParser.TIMEUNIT, 0); }
	constructor(ctx: Timeunits_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTimeunits_declaration_3) {
			listener.enterTimeunits_declaration_3(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTimeunits_declaration_3) {
			listener.exitTimeunits_declaration_3(this);
		}
	}
}


export class Parameter_port_listContext extends ParserRuleContext {
	public SHP(): TerminalNode { return this.getToken(SystemVerilogParser.SHP, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public list_of_param_assignments(): List_of_param_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_param_assignmentsContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	public parameter_port_declaration(): Parameter_port_declarationContext[];
	public parameter_port_declaration(i: number): Parameter_port_declarationContext;
	public parameter_port_declaration(i?: number): Parameter_port_declarationContext | Parameter_port_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Parameter_port_declarationContext);
		} else {
			return this.getRuleContext(i, Parameter_port_declarationContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_parameter_port_list; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParameter_port_list) {
			listener.enterParameter_port_list(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParameter_port_list) {
			listener.exitParameter_port_list(this);
		}
	}
}


export class Parameter_port_declarationContext extends ParserRuleContext {
	public parameter_declaration(): Parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Parameter_declarationContext);
	}
	public local_parameter_declaration(): Local_parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Local_parameter_declarationContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.TYPE, 0); }
	public list_of_type_assignments(): List_of_type_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_type_assignmentsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_parameter_port_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParameter_port_declaration) {
			listener.enterParameter_port_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParameter_port_declaration) {
			listener.exitParameter_port_declaration(this);
		}
	}
}


export class List_of_portsContext extends ParserRuleContext {
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public port(): PortContext[];
	public port(i: number): PortContext;
	public port(i?: number): PortContext | PortContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PortContext);
		} else {
			return this.getRuleContext(i, PortContext);
		}
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_ports; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_ports) {
			listener.enterList_of_ports(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_ports) {
			listener.exitList_of_ports(this);
		}
	}
}


export class List_of_port_declarationsContext extends ParserRuleContext {
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public ansi_port_declaration(): Ansi_port_declarationContext[];
	public ansi_port_declaration(i: number): Ansi_port_declarationContext;
	public ansi_port_declaration(i?: number): Ansi_port_declarationContext | Ansi_port_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ansi_port_declarationContext);
		} else {
			return this.getRuleContext(i, Ansi_port_declarationContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_port_declarations; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_port_declarations) {
			listener.enterList_of_port_declarations(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_port_declarations) {
			listener.exitList_of_port_declarations(this);
		}
	}
}


export class Port_declarationContext extends ParserRuleContext {
	public inout_declaration(): Inout_declarationContext | undefined {
		return this.tryGetRuleContext(0, Inout_declarationContext);
	}
	public input_declaration(): Input_declarationContext | undefined {
		return this.tryGetRuleContext(0, Input_declarationContext);
	}
	public output_declaration(): Output_declarationContext | undefined {
		return this.tryGetRuleContext(0, Output_declarationContext);
	}
	public ref_declaration(): Ref_declarationContext | undefined {
		return this.tryGetRuleContext(0, Ref_declarationContext);
	}
	public interface_port_declaration(): Interface_port_declarationContext | undefined {
		return this.tryGetRuleContext(0, Interface_port_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_port_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPort_declaration) {
			listener.enterPort_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPort_declaration) {
			listener.exitPort_declaration(this);
		}
	}
}


export class PortContext extends ParserRuleContext {
	public port_expression(): Port_expressionContext {
		return this.getRuleContext(0, Port_expressionContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_port; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPort) {
			listener.enterPort(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPort) {
			listener.exitPort(this);
		}
	}
}


export class Port_expressionContext extends ParserRuleContext {
	public port_reference(): Port_referenceContext[];
	public port_reference(i: number): Port_referenceContext;
	public port_reference(i?: number): Port_referenceContext | Port_referenceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Port_referenceContext);
		} else {
			return this.getRuleContext(i, Port_referenceContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_port_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPort_expression) {
			listener.enterPort_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPort_expression) {
			listener.exitPort_expression(this);
		}
	}
}


export class Port_referenceContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public constant_select(): Constant_selectContext {
		return this.getRuleContext(0, Constant_selectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_port_reference; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPort_reference) {
			listener.enterPort_reference(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPort_reference) {
			listener.exitPort_reference(this);
		}
	}
}


export class Port_directionContext extends ParserRuleContext {
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INPUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OUTPUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INOUT, 0); }
	public REF(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.REF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_port_direction; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPort_direction) {
			listener.enterPort_direction(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPort_direction) {
			listener.exitPort_direction(this);
		}
	}
}


export class Net_port_headerContext extends ParserRuleContext {
	public port_direction(): Port_directionContext {
		return this.getRuleContext(0, Port_directionContext);
	}
	public net_port_type(): Net_port_typeContext {
		return this.getRuleContext(0, Net_port_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_port_header; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_port_header) {
			listener.enterNet_port_header(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_port_header) {
			listener.exitNet_port_header(this);
		}
	}
}


export class Interface_port_headerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_port_header; }
	public copyFrom(ctx: Interface_port_headerContext): void {
		super.copyFrom(ctx);
	}
}
export class Interface_port_header_0Context extends Interface_port_headerContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	constructor(ctx: Interface_port_headerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_port_header_0) {
			listener.enterInterface_port_header_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_port_header_0) {
			listener.exitInterface_port_header_0(this);
		}
	}
}
export class Interface_port_header_1Context extends Interface_port_headerContext {
	public INTERFACE(): TerminalNode { return this.getToken(SystemVerilogParser.INTERFACE, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	constructor(ctx: Interface_port_headerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_port_header_1) {
			listener.enterInterface_port_header_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_port_header_1) {
			listener.exitInterface_port_header_1(this);
		}
	}
}


export class Ansi_port_declarationContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public net_port_header(): Net_port_headerContext | undefined {
		return this.tryGetRuleContext(0, Net_port_headerContext);
	}
	public interface_port_header(): Interface_port_headerContext | undefined {
		return this.tryGetRuleContext(0, Interface_port_headerContext);
	}
	public unpacked_dimension(): Unpacked_dimensionContext[];
	public unpacked_dimension(i: number): Unpacked_dimensionContext;
	public unpacked_dimension(i?: number): Unpacked_dimensionContext | Unpacked_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unpacked_dimensionContext);
		} else {
			return this.getRuleContext(i, Unpacked_dimensionContext);
		}
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_ansi_port_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterAnsi_port_declaration) {
			listener.enterAnsi_port_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitAnsi_port_declaration) {
			listener.exitAnsi_port_declaration(this);
		}
	}
}


export class Elaboration_system_taskContext extends ParserRuleContext {
	public DOL_FATAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOL_FATAL, 0); }
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public finish_number(): Finish_numberContext | undefined {
		return this.tryGetRuleContext(0, Finish_numberContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public COM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COM, 0); }
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	public DOL_ERROR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOL_ERROR, 0); }
	public DOL_WARNING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOL_WARNING, 0); }
	public DOL_INFO(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOL_INFO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_elaboration_system_task; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterElaboration_system_task) {
			listener.enterElaboration_system_task(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitElaboration_system_task) {
			listener.exitElaboration_system_task(this);
		}
	}
}


export class Finish_numberContext extends ParserRuleContext {
	public UNSIGNED_NUMBER(): TerminalNode { return this.getToken(SystemVerilogParser.UNSIGNED_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_finish_number; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFinish_number) {
			listener.enterFinish_number(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFinish_number) {
			listener.exitFinish_number(this);
		}
	}
}


export class Module_common_itemContext extends ParserRuleContext {
	public module_or_generate_item_declaration(): Module_or_generate_item_declarationContext | undefined {
		return this.tryGetRuleContext(0, Module_or_generate_item_declarationContext);
	}
	public always_construct(): Always_constructContext | undefined {
		return this.tryGetRuleContext(0, Always_constructContext);
	}
	public continuous_assign(): Continuous_assignContext | undefined {
		return this.tryGetRuleContext(0, Continuous_assignContext);
	}
	public initial_construct(): Initial_constructContext | undefined {
		return this.tryGetRuleContext(0, Initial_constructContext);
	}
	public final_construct(): Final_constructContext | undefined {
		return this.tryGetRuleContext(0, Final_constructContext);
	}
	public loop_generate_construct(): Loop_generate_constructContext | undefined {
		return this.tryGetRuleContext(0, Loop_generate_constructContext);
	}
	public conditional_generate_construct(): Conditional_generate_constructContext | undefined {
		return this.tryGetRuleContext(0, Conditional_generate_constructContext);
	}
	public net_alias(): Net_aliasContext | undefined {
		return this.tryGetRuleContext(0, Net_aliasContext);
	}
	public elaboration_system_task(): Elaboration_system_taskContext | undefined {
		return this.tryGetRuleContext(0, Elaboration_system_taskContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_common_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_common_item) {
			listener.enterModule_common_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_common_item) {
			listener.exitModule_common_item(this);
		}
	}
}


export class Module_itemContext extends ParserRuleContext {
	public port_declaration(): Port_declarationContext | undefined {
		return this.tryGetRuleContext(0, Port_declarationContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public non_port_module_item(): Non_port_module_itemContext | undefined {
		return this.tryGetRuleContext(0, Non_port_module_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_item) {
			listener.enterModule_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_item) {
			listener.exitModule_item(this);
		}
	}
}


export class Module_or_generate_itemContext extends ParserRuleContext {
	public module_common_item(): Module_common_itemContext | undefined {
		return this.tryGetRuleContext(0, Module_common_itemContext);
	}
	public module_instantiation(): Module_instantiationContext | undefined {
		return this.tryGetRuleContext(0, Module_instantiationContext);
	}
	public parameter_override(): Parameter_overrideContext | undefined {
		return this.tryGetRuleContext(0, Parameter_overrideContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_or_generate_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_or_generate_item) {
			listener.enterModule_or_generate_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_or_generate_item) {
			listener.exitModule_or_generate_item(this);
		}
	}
}


export class Module_or_generate_item_declarationContext extends ParserRuleContext {
	public package_or_generate_item_declaration(): Package_or_generate_item_declarationContext | undefined {
		return this.tryGetRuleContext(0, Package_or_generate_item_declarationContext);
	}
	public genvar_declaration(): Genvar_declarationContext | undefined {
		return this.tryGetRuleContext(0, Genvar_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_or_generate_item_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_or_generate_item_declaration) {
			listener.enterModule_or_generate_item_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_or_generate_item_declaration) {
			listener.exitModule_or_generate_item_declaration(this);
		}
	}
}


export class Non_port_module_itemContext extends ParserRuleContext {
	public module_or_generate_item(): Module_or_generate_itemContext | undefined {
		return this.tryGetRuleContext(0, Module_or_generate_itemContext);
	}
	public generate_region(): Generate_regionContext | undefined {
		return this.tryGetRuleContext(0, Generate_regionContext);
	}
	public module_declaration(): Module_declarationContext | undefined {
		return this.tryGetRuleContext(0, Module_declarationContext);
	}
	public timeunits_declaration(): Timeunits_declarationContext | undefined {
		return this.tryGetRuleContext(0, Timeunits_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_non_port_module_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNon_port_module_item) {
			listener.enterNon_port_module_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNon_port_module_item) {
			listener.exitNon_port_module_item(this);
		}
	}
}


export class Parameter_overrideContext extends ParserRuleContext {
	public DEFPARAM(): TerminalNode { return this.getToken(SystemVerilogParser.DEFPARAM, 0); }
	public list_of_defparam_assignments(): List_of_defparam_assignmentsContext {
		return this.getRuleContext(0, List_of_defparam_assignmentsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_parameter_override; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParameter_override) {
			listener.enterParameter_override(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParameter_override) {
			listener.exitParameter_override(this);
		}
	}
}


export class Interface_or_generate_itemContext extends ParserRuleContext {
	public module_common_item(): Module_common_itemContext | undefined {
		return this.tryGetRuleContext(0, Module_common_itemContext);
	}
	public modport_declaration(): Modport_declarationContext | undefined {
		return this.tryGetRuleContext(0, Modport_declarationContext);
	}
	public extern_tf_declaration(): Extern_tf_declarationContext | undefined {
		return this.tryGetRuleContext(0, Extern_tf_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_or_generate_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_or_generate_item) {
			listener.enterInterface_or_generate_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_or_generate_item) {
			listener.exitInterface_or_generate_item(this);
		}
	}
}


export class Extern_tf_declarationContext extends ParserRuleContext {
	public EXTERN(): TerminalNode { return this.getToken(SystemVerilogParser.EXTERN, 0); }
	public method_prototype(): Method_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Method_prototypeContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public FORKJOIN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FORKJOIN, 0); }
	public task_prototype(): Task_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Task_prototypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_extern_tf_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterExtern_tf_declaration) {
			listener.enterExtern_tf_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitExtern_tf_declaration) {
			listener.exitExtern_tf_declaration(this);
		}
	}
}


export class Interface_itemContext extends ParserRuleContext {
	public port_declaration(): Port_declarationContext | undefined {
		return this.tryGetRuleContext(0, Port_declarationContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public non_port_interface_item(): Non_port_interface_itemContext | undefined {
		return this.tryGetRuleContext(0, Non_port_interface_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_item) {
			listener.enterInterface_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_item) {
			listener.exitInterface_item(this);
		}
	}
}


export class Non_port_interface_itemContext extends ParserRuleContext {
	public generate_region(): Generate_regionContext | undefined {
		return this.tryGetRuleContext(0, Generate_regionContext);
	}
	public interface_or_generate_item(): Interface_or_generate_itemContext | undefined {
		return this.tryGetRuleContext(0, Interface_or_generate_itemContext);
	}
	public interface_declaration(): Interface_declarationContext | undefined {
		return this.tryGetRuleContext(0, Interface_declarationContext);
	}
	public timeunits_declaration(): Timeunits_declarationContext | undefined {
		return this.tryGetRuleContext(0, Timeunits_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_non_port_interface_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNon_port_interface_item) {
			listener.enterNon_port_interface_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNon_port_interface_item) {
			listener.exitNon_port_interface_item(this);
		}
	}
}


export class Class_itemContext extends ParserRuleContext {
	public class_property(): Class_propertyContext | undefined {
		return this.tryGetRuleContext(0, Class_propertyContext);
	}
	public class_method(): Class_methodContext | undefined {
		return this.tryGetRuleContext(0, Class_methodContext);
	}
	public class_constraint(): Class_constraintContext | undefined {
		return this.tryGetRuleContext(0, Class_constraintContext);
	}
	public class_declaration(): Class_declarationContext | undefined {
		return this.tryGetRuleContext(0, Class_declarationContext);
	}
	public local_parameter_declaration(): Local_parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Local_parameter_declarationContext);
	}
	public parameter_declaration(): Parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Parameter_declarationContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_item) {
			listener.enterClass_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_item) {
			listener.exitClass_item(this);
		}
	}
}


export class Class_propertyContext extends ParserRuleContext {
	public data_declaration(): Data_declarationContext | undefined {
		return this.tryGetRuleContext(0, Data_declarationContext);
	}
	public property_qualifier(): Property_qualifierContext[];
	public property_qualifier(i: number): Property_qualifierContext;
	public property_qualifier(i?: number): Property_qualifierContext | Property_qualifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Property_qualifierContext);
		} else {
			return this.getRuleContext(i, Property_qualifierContext);
		}
	}
	public CONST(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CONST, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public class_item_qualifier(): Class_item_qualifierContext[];
	public class_item_qualifier(i: number): Class_item_qualifierContext;
	public class_item_qualifier(i?: number): Class_item_qualifierContext | Class_item_qualifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Class_item_qualifierContext);
		} else {
			return this.getRuleContext(i, Class_item_qualifierContext);
		}
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_property; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_property) {
			listener.enterClass_property(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_property) {
			listener.exitClass_property(this);
		}
	}
}


export class Class_methodContext extends ParserRuleContext {
	public task_declaration(): Task_declarationContext | undefined {
		return this.tryGetRuleContext(0, Task_declarationContext);
	}
	public method_qualifier(): Method_qualifierContext[];
	public method_qualifier(i: number): Method_qualifierContext;
	public method_qualifier(i?: number): Method_qualifierContext | Method_qualifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Method_qualifierContext);
		} else {
			return this.getRuleContext(i, Method_qualifierContext);
		}
	}
	public function_declaration(): Function_declarationContext | undefined {
		return this.tryGetRuleContext(0, Function_declarationContext);
	}
	public PURE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PURE, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VIRTUAL, 0); }
	public method_prototype(): Method_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Method_prototypeContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public class_item_qualifier(): Class_item_qualifierContext[];
	public class_item_qualifier(i: number): Class_item_qualifierContext;
	public class_item_qualifier(i?: number): Class_item_qualifierContext | Class_item_qualifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Class_item_qualifierContext);
		} else {
			return this.getRuleContext(i, Class_item_qualifierContext);
		}
	}
	public EXTERN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EXTERN, 0); }
	public class_constructor_declaration(): Class_constructor_declarationContext | undefined {
		return this.tryGetRuleContext(0, Class_constructor_declarationContext);
	}
	public class_constructor_prototype(): Class_constructor_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Class_constructor_prototypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_method; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_method) {
			listener.enterClass_method(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_method) {
			listener.exitClass_method(this);
		}
	}
}


export class Class_constructor_prototypeContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode { return this.getToken(SystemVerilogParser.FUNCTION, 0); }
	public NEW(): TerminalNode { return this.getToken(SystemVerilogParser.NEW, 0); }
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public tf_port_list(): Tf_port_listContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_constructor_prototype; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_constructor_prototype) {
			listener.enterClass_constructor_prototype(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_constructor_prototype) {
			listener.exitClass_constructor_prototype(this);
		}
	}
}


export class Class_constraintContext extends ParserRuleContext {
	public constraint_prototype(): Constraint_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Constraint_prototypeContext);
	}
	public constraint_declaration(): Constraint_declarationContext | undefined {
		return this.tryGetRuleContext(0, Constraint_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_constraint; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_constraint) {
			listener.enterClass_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_constraint) {
			listener.exitClass_constraint(this);
		}
	}
}


export class Class_item_qualifierContext extends ParserRuleContext {
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STATIC, 0); }
	public PROTECTED(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PROTECTED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_item_qualifier; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_item_qualifier) {
			listener.enterClass_item_qualifier(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_item_qualifier) {
			listener.exitClass_item_qualifier(this);
		}
	}
}


export class Property_qualifierContext extends ParserRuleContext {
	public RANDOM_QUALIFIER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.RANDOM_QUALIFIER, 0); }
	public class_item_qualifier(): Class_item_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Class_item_qualifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_property_qualifier; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterProperty_qualifier) {
			listener.enterProperty_qualifier(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitProperty_qualifier) {
			listener.exitProperty_qualifier(this);
		}
	}
}


export class Method_qualifierContext extends ParserRuleContext {
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VIRTUAL, 0); }
	public PURE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PURE, 0); }
	public class_item_qualifier(): Class_item_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Class_item_qualifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_method_qualifier; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterMethod_qualifier) {
			listener.enterMethod_qualifier(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitMethod_qualifier) {
			listener.exitMethod_qualifier(this);
		}
	}
}


export class Method_prototypeContext extends ParserRuleContext {
	public task_prototype(): Task_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Task_prototypeContext);
	}
	public function_prototype(): Function_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Function_prototypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_method_prototype; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterMethod_prototype) {
			listener.enterMethod_prototype(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitMethod_prototype) {
			listener.exitMethod_prototype(this);
		}
	}
}


export class Class_constructor_declarationContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode { return this.getToken(SystemVerilogParser.FUNCTION, 0); }
	public NEW(): TerminalNode[];
	public NEW(i: number): TerminalNode;
	public NEW(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.NEW);
		} else {
			return this.getToken(SystemVerilogParser.NEW, i);
		}
	}
	public SEMIC(): TerminalNode[];
	public SEMIC(i: number): TerminalNode;
	public SEMIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.SEMIC);
		} else {
			return this.getToken(SystemVerilogParser.SEMIC, i);
		}
	}
	public ENDFUNCTION(): TerminalNode { return this.getToken(SystemVerilogParser.ENDFUNCTION, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public OP_PRN(): TerminalNode[];
	public OP_PRN(i: number): TerminalNode;
	public OP_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.OP_PRN);
		} else {
			return this.getToken(SystemVerilogParser.OP_PRN, i);
		}
	}
	public CL_PRN(): TerminalNode[];
	public CL_PRN(i: number): TerminalNode;
	public CL_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.CL_PRN);
		} else {
			return this.getToken(SystemVerilogParser.CL_PRN, i);
		}
	}
	public block_item_declaration(): Block_item_declarationContext[];
	public block_item_declaration(i: number): Block_item_declarationContext;
	public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Block_item_declarationContext);
		} else {
			return this.getRuleContext(i, Block_item_declarationContext);
		}
	}
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SUPER, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public function_statement_or_null(): Function_statement_or_nullContext[];
	public function_statement_or_null(i: number): Function_statement_or_nullContext;
	public function_statement_or_null(i?: number): Function_statement_or_nullContext | Function_statement_or_nullContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_statement_or_nullContext);
		} else {
			return this.getRuleContext(i, Function_statement_or_nullContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public tf_port_list(): Tf_port_listContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_listContext);
	}
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_constructor_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_constructor_declaration) {
			listener.enterClass_constructor_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_constructor_declaration) {
			listener.exitClass_constructor_declaration(this);
		}
	}
}


export class Constraint_declarationContext extends ParserRuleContext {
	public CONSTRAINT(): TerminalNode { return this.getToken(SystemVerilogParser.CONSTRAINT, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public constraint_block(): Constraint_blockContext {
		return this.getRuleContext(0, Constraint_blockContext);
	}
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STATIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_declaration) {
			listener.enterConstraint_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_declaration) {
			listener.exitConstraint_declaration(this);
		}
	}
}


export class Constraint_blockContext extends ParserRuleContext {
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	public constraint_block_item(): Constraint_block_itemContext[];
	public constraint_block_item(i: number): Constraint_block_itemContext;
	public constraint_block_item(i?: number): Constraint_block_itemContext | Constraint_block_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constraint_block_itemContext);
		} else {
			return this.getRuleContext(i, Constraint_block_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_block; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_block) {
			listener.enterConstraint_block(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_block) {
			listener.exitConstraint_block(this);
		}
	}
}


export class Constraint_block_itemContext extends ParserRuleContext {
	public SOLVE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SOLVE, 0); }
	public solve_before_list(): Solve_before_listContext[];
	public solve_before_list(i: number): Solve_before_listContext;
	public solve_before_list(i?: number): Solve_before_listContext | Solve_before_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Solve_before_listContext);
		} else {
			return this.getRuleContext(i, Solve_before_listContext);
		}
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.BEFORE, 0); }
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public constraint_expression(): Constraint_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constraint_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_block_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_block_item) {
			listener.enterConstraint_block_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_block_item) {
			listener.exitConstraint_block_item(this);
		}
	}
}


export class Solve_before_listContext extends ParserRuleContext {
	public constraint_primary(): Constraint_primaryContext[];
	public constraint_primary(i: number): Constraint_primaryContext;
	public constraint_primary(i?: number): Constraint_primaryContext | Constraint_primaryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constraint_primaryContext);
		} else {
			return this.getRuleContext(i, Constraint_primaryContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_solve_before_list; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSolve_before_list) {
			listener.enterSolve_before_list(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSolve_before_list) {
			listener.exitSolve_before_list(this);
		}
	}
}


export class Constraint_primaryContext extends ParserRuleContext {
	public hier_ident(): Hier_identContext {
		return this.getRuleContext(0, Hier_identContext);
	}
	public select(): SelectContext {
		return this.getRuleContext(0, SelectContext);
	}
	public implicit_class_handle(): Implicit_class_handleContext | undefined {
		return this.tryGetRuleContext(0, Implicit_class_handleContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_primary; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_primary) {
			listener.enterConstraint_primary(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_primary) {
			listener.exitConstraint_primary(this);
		}
	}
}


export class Constraint_expressionContext extends ParserRuleContext {
	public expression_or_dist(): Expression_or_distContext | undefined {
		return this.tryGetRuleContext(0, Expression_or_distContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public SOFT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SOFT, 0); }
	public uniqueness_constraint(): Uniqueness_constraintContext | undefined {
		return this.tryGetRuleContext(0, Uniqueness_constraintContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EVENT, 0); }
	public constraint_set(): Constraint_setContext[];
	public constraint_set(i: number): Constraint_setContext;
	public constraint_set(i?: number): Constraint_setContext | Constraint_setContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constraint_setContext);
		} else {
			return this.getRuleContext(i, Constraint_setContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.IF, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ELSE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DISABLE, 0); }
	public constraint_primary(): Constraint_primaryContext | undefined {
		return this.tryGetRuleContext(0, Constraint_primaryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_expression) {
			listener.enterConstraint_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_expression) {
			listener.exitConstraint_expression(this);
		}
	}
}


export class Uniqueness_constraintContext extends ParserRuleContext {
	public UNIQUE(): TerminalNode { return this.getToken(SystemVerilogParser.UNIQUE, 0); }
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public open_range_list(): Open_range_listContext {
		return this.getRuleContext(0, Open_range_listContext);
	}
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_uniqueness_constraint; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterUniqueness_constraint) {
			listener.enterUniqueness_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitUniqueness_constraint) {
			listener.exitUniqueness_constraint(this);
		}
	}
}


export class Constraint_setContext extends ParserRuleContext {
	public constraint_expression(): Constraint_expressionContext[];
	public constraint_expression(i: number): Constraint_expressionContext;
	public constraint_expression(i?: number): Constraint_expressionContext | Constraint_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constraint_expressionContext);
		} else {
			return this.getRuleContext(i, Constraint_expressionContext);
		}
	}
	public OP_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRC, 0); }
	public CL_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_set; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_set) {
			listener.enterConstraint_set(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_set) {
			listener.exitConstraint_set(this);
		}
	}
}


export class Dist_listContext extends ParserRuleContext {
	public dist_item(): Dist_itemContext[];
	public dist_item(i: number): Dist_itemContext;
	public dist_item(i?: number): Dist_itemContext | Dist_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dist_itemContext);
		} else {
			return this.getRuleContext(i, Dist_itemContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_dist_list; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDist_list) {
			listener.enterDist_list(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDist_list) {
			listener.exitDist_list(this);
		}
	}
}


export class Dist_itemContext extends ParserRuleContext {
	public value_range(): Value_rangeContext {
		return this.getRuleContext(0, Value_rangeContext);
	}
	public dist_weight(): Dist_weightContext | undefined {
		return this.tryGetRuleContext(0, Dist_weightContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_dist_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDist_item) {
			listener.enterDist_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDist_item) {
			listener.exitDist_item(this);
		}
	}
}


export class Dist_weightContext extends ParserRuleContext {
	public DISTW_EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DISTW_EQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DISTW_SL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DISTW_SL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_dist_weight; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDist_weight) {
			listener.enterDist_weight(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDist_weight) {
			listener.exitDist_weight(this);
		}
	}
}


export class Constraint_prototypeContext extends ParserRuleContext {
	public CONSTRAINT(): TerminalNode { return this.getToken(SystemVerilogParser.CONSTRAINT, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public constraint_prototype_qualifier(): Constraint_prototype_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Constraint_prototype_qualifierContext);
	}
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STATIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_prototype; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_prototype) {
			listener.enterConstraint_prototype(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_prototype) {
			listener.exitConstraint_prototype(this);
		}
	}
}


export class Constraint_prototype_qualifierContext extends ParserRuleContext {
	public EXTERN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EXTERN, 0); }
	public PURE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PURE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constraint_prototype_qualifier; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstraint_prototype_qualifier) {
			listener.enterConstraint_prototype_qualifier(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstraint_prototype_qualifier) {
			listener.exitConstraint_prototype_qualifier(this);
		}
	}
}


export class Package_itemContext extends ParserRuleContext {
	public package_or_generate_item_declaration(): Package_or_generate_item_declarationContext | undefined {
		return this.tryGetRuleContext(0, Package_or_generate_item_declarationContext);
	}
	public anonymous_program(): Anonymous_programContext | undefined {
		return this.tryGetRuleContext(0, Anonymous_programContext);
	}
	public package_export_declaration(): Package_export_declarationContext | undefined {
		return this.tryGetRuleContext(0, Package_export_declarationContext);
	}
	public timeunits_declaration(): Timeunits_declarationContext | undefined {
		return this.tryGetRuleContext(0, Timeunits_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_package_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPackage_item) {
			listener.enterPackage_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPackage_item) {
			listener.exitPackage_item(this);
		}
	}
}


export class Package_or_generate_item_declarationContext extends ParserRuleContext {
	public net_declaration(): Net_declarationContext | undefined {
		return this.tryGetRuleContext(0, Net_declarationContext);
	}
	public data_declaration(): Data_declarationContext | undefined {
		return this.tryGetRuleContext(0, Data_declarationContext);
	}
	public task_declaration(): Task_declarationContext | undefined {
		return this.tryGetRuleContext(0, Task_declarationContext);
	}
	public function_declaration(): Function_declarationContext | undefined {
		return this.tryGetRuleContext(0, Function_declarationContext);
	}
	public class_declaration(): Class_declarationContext | undefined {
		return this.tryGetRuleContext(0, Class_declarationContext);
	}
	public class_constructor_declaration(): Class_constructor_declarationContext | undefined {
		return this.tryGetRuleContext(0, Class_constructor_declarationContext);
	}
	public local_parameter_declaration(): Local_parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Local_parameter_declarationContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public parameter_declaration(): Parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Parameter_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_package_or_generate_item_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPackage_or_generate_item_declaration) {
			listener.enterPackage_or_generate_item_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPackage_or_generate_item_declaration) {
			listener.exitPackage_or_generate_item_declaration(this);
		}
	}
}


export class Anonymous_programContext extends ParserRuleContext {
	public task_declaration(): Task_declarationContext | undefined {
		return this.tryGetRuleContext(0, Task_declarationContext);
	}
	public function_declaration(): Function_declarationContext | undefined {
		return this.tryGetRuleContext(0, Function_declarationContext);
	}
	public class_declaration(): Class_declarationContext | undefined {
		return this.tryGetRuleContext(0, Class_declarationContext);
	}
	public class_constructor_declaration(): Class_constructor_declarationContext | undefined {
		return this.tryGetRuleContext(0, Class_constructor_declarationContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_anonymous_program; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterAnonymous_program) {
			listener.enterAnonymous_program(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitAnonymous_program) {
			listener.exitAnonymous_program(this);
		}
	}
}


export class Local_parameter_declarationContext extends ParserRuleContext {
	public LOCALPARAM(): TerminalNode { return this.getToken(SystemVerilogParser.LOCALPARAM, 0); }
	public data_type_or_implicit(): Data_type_or_implicitContext | undefined {
		return this.tryGetRuleContext(0, Data_type_or_implicitContext);
	}
	public list_of_param_assignments(): List_of_param_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_param_assignmentsContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.TYPE, 0); }
	public list_of_type_assignments(): List_of_type_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_type_assignmentsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_local_parameter_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterLocal_parameter_declaration) {
			listener.enterLocal_parameter_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitLocal_parameter_declaration) {
			listener.exitLocal_parameter_declaration(this);
		}
	}
}


export class Parameter_declarationContext extends ParserRuleContext {
	public PARAMETER(): TerminalNode { return this.getToken(SystemVerilogParser.PARAMETER, 0); }
	public data_type_or_implicit(): Data_type_or_implicitContext | undefined {
		return this.tryGetRuleContext(0, Data_type_or_implicitContext);
	}
	public list_of_param_assignments(): List_of_param_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_param_assignmentsContext);
	}
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.TYPE, 0); }
	public list_of_type_assignments(): List_of_type_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_type_assignmentsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_parameter_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParameter_declaration) {
			listener.enterParameter_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParameter_declaration) {
			listener.exitParameter_declaration(this);
		}
	}
}


export class Inout_declarationContext extends ParserRuleContext {
	public INOUT(): TerminalNode { return this.getToken(SystemVerilogParser.INOUT, 0); }
	public net_port_type(): Net_port_typeContext {
		return this.getRuleContext(0, Net_port_typeContext);
	}
	public list_of_port_identifiers(): List_of_port_identifiersContext {
		return this.getRuleContext(0, List_of_port_identifiersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_inout_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInout_declaration) {
			listener.enterInout_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInout_declaration) {
			listener.exitInout_declaration(this);
		}
	}
}


export class Input_declarationContext extends ParserRuleContext {
	public INPUT(): TerminalNode { return this.getToken(SystemVerilogParser.INPUT, 0); }
	public net_port_type(): Net_port_typeContext | undefined {
		return this.tryGetRuleContext(0, Net_port_typeContext);
	}
	public list_of_port_identifiers(): List_of_port_identifiersContext | undefined {
		return this.tryGetRuleContext(0, List_of_port_identifiersContext);
	}
	public variable_port_type(): Variable_port_typeContext | undefined {
		return this.tryGetRuleContext(0, Variable_port_typeContext);
	}
	public list_of_variable_port_identifiers(): List_of_variable_port_identifiersContext | undefined {
		return this.tryGetRuleContext(0, List_of_variable_port_identifiersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_input_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInput_declaration) {
			listener.enterInput_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInput_declaration) {
			listener.exitInput_declaration(this);
		}
	}
}


export class Output_declarationContext extends ParserRuleContext {
	public OUTPUT(): TerminalNode { return this.getToken(SystemVerilogParser.OUTPUT, 0); }
	public net_port_type(): Net_port_typeContext | undefined {
		return this.tryGetRuleContext(0, Net_port_typeContext);
	}
	public list_of_port_identifiers(): List_of_port_identifiersContext | undefined {
		return this.tryGetRuleContext(0, List_of_port_identifiersContext);
	}
	public variable_port_type(): Variable_port_typeContext | undefined {
		return this.tryGetRuleContext(0, Variable_port_typeContext);
	}
	public list_of_variable_port_identifiers(): List_of_variable_port_identifiersContext | undefined {
		return this.tryGetRuleContext(0, List_of_variable_port_identifiersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_output_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterOutput_declaration) {
			listener.enterOutput_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitOutput_declaration) {
			listener.exitOutput_declaration(this);
		}
	}
}


export class Interface_port_declarationContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public list_of_interface_identifiers(): List_of_interface_identifiersContext[];
	public list_of_interface_identifiers(i: number): List_of_interface_identifiersContext;
	public list_of_interface_identifiers(i?: number): List_of_interface_identifiersContext | List_of_interface_identifiersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(List_of_interface_identifiersContext);
		} else {
			return this.getRuleContext(i, List_of_interface_identifiersContext);
		}
	}
	public DOT(): TerminalNode { return this.getToken(SystemVerilogParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_interface_port_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInterface_port_declaration) {
			listener.enterInterface_port_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInterface_port_declaration) {
			listener.exitInterface_port_declaration(this);
		}
	}
}


export class Ref_declarationContext extends ParserRuleContext {
	public REF(): TerminalNode { return this.getToken(SystemVerilogParser.REF, 0); }
	public variable_port_type(): Variable_port_typeContext {
		return this.getRuleContext(0, Variable_port_typeContext);
	}
	public list_of_variable_identifiers(): List_of_variable_identifiersContext {
		return this.getRuleContext(0, List_of_variable_identifiersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_ref_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterRef_declaration) {
			listener.enterRef_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitRef_declaration) {
			listener.exitRef_declaration(this);
		}
	}
}


export class Data_declarationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_data_declaration; }
	public copyFrom(ctx: Data_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class Data_declaration_0Context extends Data_declarationContext {
	public _c!: Token;
	public _v!: Token;
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public list_of_variable_decl_assignments(): List_of_variable_decl_assignmentsContext {
		return this.getRuleContext(0, List_of_variable_decl_assignmentsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	public CONST(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CONST, 0); }
	public VAR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VAR, 0); }
	constructor(ctx: Data_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_declaration_0) {
			listener.enterData_declaration_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_declaration_0) {
			listener.exitData_declaration_0(this);
		}
	}
}
export class Data_declaration_1Context extends Data_declarationContext {
	public type_declaration(): Type_declarationContext {
		return this.getRuleContext(0, Type_declarationContext);
	}
	constructor(ctx: Data_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_declaration_1) {
			listener.enterData_declaration_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_declaration_1) {
			listener.exitData_declaration_1(this);
		}
	}
}
export class Data_declaration_2Context extends Data_declarationContext {
	public package_import_declaration(): Package_import_declarationContext {
		return this.getRuleContext(0, Package_import_declarationContext);
	}
	constructor(ctx: Data_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_declaration_2) {
			listener.enterData_declaration_2(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_declaration_2) {
			listener.exitData_declaration_2(this);
		}
	}
}
export class Data_declaration_3Context extends Data_declarationContext {
	public net_type_declaration(): Net_type_declarationContext {
		return this.getRuleContext(0, Net_type_declarationContext);
	}
	constructor(ctx: Data_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_declaration_3) {
			listener.enterData_declaration_3(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_declaration_3) {
			listener.exitData_declaration_3(this);
		}
	}
}


export class Package_import_declarationContext extends ParserRuleContext {
	public IMPORT(): TerminalNode { return this.getToken(SystemVerilogParser.IMPORT, 0); }
	public package_import_item(): Package_import_itemContext[];
	public package_import_item(i: number): Package_import_itemContext;
	public package_import_item(i?: number): Package_import_itemContext | Package_import_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_import_itemContext);
		} else {
			return this.getRuleContext(i, Package_import_itemContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_package_import_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPackage_import_declaration) {
			listener.enterPackage_import_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPackage_import_declaration) {
			listener.exitPackage_import_declaration(this);
		}
	}
}


export class Package_import_itemContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public SCOPE(): TerminalNode { return this.getToken(SystemVerilogParser.SCOPE, 0); }
	public MULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_package_import_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPackage_import_item) {
			listener.enterPackage_import_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPackage_import_item) {
			listener.exitPackage_import_item(this);
		}
	}
}


export class Package_export_declarationContext extends ParserRuleContext {
	public EXPORT(): TerminalNode { return this.getToken(SystemVerilogParser.EXPORT, 0); }
	public SCOPE_FORALL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SCOPE_FORALL, 0); }
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public package_import_item(): Package_import_itemContext[];
	public package_import_item(i: number): Package_import_itemContext;
	public package_import_item(i?: number): Package_import_itemContext | Package_import_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_import_itemContext);
		} else {
			return this.getRuleContext(i, Package_import_itemContext);
		}
	}
	public COM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_package_export_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPackage_export_declaration) {
			listener.enterPackage_export_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPackage_export_declaration) {
			listener.exitPackage_export_declaration(this);
		}
	}
}


export class Genvar_declarationContext extends ParserRuleContext {
	public GENVAR(): TerminalNode { return this.getToken(SystemVerilogParser.GENVAR, 0); }
	public list_of_genvar_identifiers(): List_of_genvar_identifiersContext {
		return this.getRuleContext(0, List_of_genvar_identifiersContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_genvar_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterGenvar_declaration) {
			listener.enterGenvar_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitGenvar_declaration) {
			listener.exitGenvar_declaration(this);
		}
	}
}


export class Net_declarationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_declaration; }
	public copyFrom(ctx: Net_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class Net_declaration_0Context extends Net_declarationContext {
	public NET_TYPE(): TerminalNode { return this.getToken(SystemVerilogParser.NET_TYPE, 0); }
	public data_type_or_implicit(): Data_type_or_implicitContext {
		return this.getRuleContext(0, Data_type_or_implicitContext);
	}
	public list_of_net_decl_assignments(): List_of_net_decl_assignmentsContext {
		return this.getRuleContext(0, List_of_net_decl_assignmentsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(ctx: Net_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_declaration_0) {
			listener.enterNet_declaration_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_declaration_0) {
			listener.exitNet_declaration_0(this);
		}
	}
}
export class Net_declaration_1Context extends Net_declarationContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public list_of_net_decl_assignments(): List_of_net_decl_assignmentsContext {
		return this.getRuleContext(0, List_of_net_decl_assignmentsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(ctx: Net_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_declaration_1) {
			listener.enterNet_declaration_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_declaration_1) {
			listener.exitNet_declaration_1(this);
		}
	}
}
export class Net_declaration_2Context extends Net_declarationContext {
	public INTERCONNECT(): TerminalNode { return this.getToken(SystemVerilogParser.INTERCONNECT, 0); }
	public implicit_data_type(): Implicit_data_typeContext {
		return this.getRuleContext(0, Implicit_data_typeContext);
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public unpacked_dimension(): Unpacked_dimensionContext[];
	public unpacked_dimension(i: number): Unpacked_dimensionContext;
	public unpacked_dimension(i?: number): Unpacked_dimensionContext | Unpacked_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unpacked_dimensionContext);
		} else {
			return this.getRuleContext(i, Unpacked_dimensionContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public SHP(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SHP, 0); }
	public delay_value(): Delay_valueContext | undefined {
		return this.tryGetRuleContext(0, Delay_valueContext);
	}
	public COM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COM, 0); }
	constructor(ctx: Net_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_declaration_2) {
			listener.enterNet_declaration_2(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_declaration_2) {
			listener.exitNet_declaration_2(this);
		}
	}
}


export class Type_declarationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_type_declaration; }
	public copyFrom(ctx: Type_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class Type_declaration_0Context extends Type_declarationContext {
	public TYPEDEF(): TerminalNode { return this.getToken(SystemVerilogParser.TYPEDEF, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public variable_dimension(): Variable_dimensionContext[];
	public variable_dimension(i: number): Variable_dimensionContext;
	public variable_dimension(i?: number): Variable_dimensionContext | Variable_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_dimensionContext);
		} else {
			return this.getRuleContext(i, Variable_dimensionContext);
		}
	}
	constructor(ctx: Type_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterType_declaration_0) {
			listener.enterType_declaration_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitType_declaration_0) {
			listener.exitType_declaration_0(this);
		}
	}
}
export class Type_declaration_1Context extends Type_declarationContext {
	public TYPEDEF(): TerminalNode { return this.getToken(SystemVerilogParser.TYPEDEF, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public constant_bit_select(): Constant_bit_selectContext {
		return this.getRuleContext(0, Constant_bit_selectContext);
	}
	public DOT(): TerminalNode { return this.getToken(SystemVerilogParser.DOT, 0); }
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(ctx: Type_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterType_declaration_1) {
			listener.enterType_declaration_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitType_declaration_1) {
			listener.exitType_declaration_1(this);
		}
	}
}
export class Type_declaration_2Context extends Type_declarationContext {
	public TYPEDEF(): TerminalNode { return this.getToken(SystemVerilogParser.TYPEDEF, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public type_declaration_type(): Type_declaration_typeContext | undefined {
		return this.tryGetRuleContext(0, Type_declaration_typeContext);
	}
	constructor(ctx: Type_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterType_declaration_2) {
			listener.enterType_declaration_2(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitType_declaration_2) {
			listener.exitType_declaration_2(this);
		}
	}
}


export class Type_declaration_typeContext extends ParserRuleContext {
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ENUM, 0); }
	public STRUCT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STRUCT, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNION, 0); }
	public CLASS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CLASS, 0); }
	public INTERFACE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INTERFACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_type_declaration_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterType_declaration_type) {
			listener.enterType_declaration_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitType_declaration_type) {
			listener.exitType_declaration_type(this);
		}
	}
}


export class Net_type_declarationContext extends ParserRuleContext {
	public NETTYPE(): TerminalNode { return this.getToken(SystemVerilogParser.NETTYPE, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.WITH, 0); }
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_type_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_type_declaration) {
			listener.enterNet_type_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_type_declaration) {
			listener.exitNet_type_declaration(this);
		}
	}
}


export class LifetimeContext extends ParserRuleContext {
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STATIC, 0); }
	public AUTOMATIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.AUTOMATIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_lifetime; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterLifetime) {
			listener.enterLifetime(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitLifetime) {
			listener.exitLifetime(this);
		}
	}
}


export class Casting_typeContext extends ParserRuleContext {
	public simple_type(): Simple_typeContext | undefined {
		return this.tryGetRuleContext(0, Simple_typeContext);
	}
	public constant_primary(): Constant_primaryContext | undefined {
		return this.tryGetRuleContext(0, Constant_primaryContext);
	}
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public SIGNING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SIGNING, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STRING, 0); }
	public CONST(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CONST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_casting_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCasting_type) {
			listener.enterCasting_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCasting_type) {
			listener.exitCasting_type(this);
		}
	}
}


export class Data_typeContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_data_type; }
	public copyFrom(ctx: Data_typeContext): void {
		super.copyFrom(ctx);
	}
}
export class Data_type_0Context extends Data_typeContext {
	public INTEGER_VECTOR_TYPE(): TerminalNode { return this.getToken(SystemVerilogParser.INTEGER_VECTOR_TYPE, 0); }
	public SIGNING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SIGNING, 0); }
	public packed_dimension(): Packed_dimensionContext[];
	public packed_dimension(i: number): Packed_dimensionContext;
	public packed_dimension(i?: number): Packed_dimensionContext | Packed_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Packed_dimensionContext);
		} else {
			return this.getRuleContext(i, Packed_dimensionContext);
		}
	}
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_0) {
			listener.enterData_type_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_0) {
			listener.exitData_type_0(this);
		}
	}
}
export class Data_type_1Context extends Data_typeContext {
	public INTEGER_ATOM_TYPE(): TerminalNode { return this.getToken(SystemVerilogParser.INTEGER_ATOM_TYPE, 0); }
	public SIGNING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SIGNING, 0); }
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_1) {
			listener.enterData_type_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_1) {
			listener.exitData_type_1(this);
		}
	}
}
export class Data_type_2Context extends Data_typeContext {
	public NON_INTEGER_TYPE(): TerminalNode { return this.getToken(SystemVerilogParser.NON_INTEGER_TYPE, 0); }
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_2) {
			listener.enterData_type_2(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_2) {
			listener.exitData_type_2(this);
		}
	}
}
export class Data_type_3Context extends Data_typeContext {
	public _p!: Token;
	public struct_union(): Struct_unionContext {
		return this.getRuleContext(0, Struct_unionContext);
	}
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	public struct_union_member(): Struct_union_memberContext[];
	public struct_union_member(i: number): Struct_union_memberContext;
	public struct_union_member(i?: number): Struct_union_memberContext | Struct_union_memberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Struct_union_memberContext);
		} else {
			return this.getRuleContext(i, Struct_union_memberContext);
		}
	}
	public packed_dimension(): Packed_dimensionContext[];
	public packed_dimension(i: number): Packed_dimensionContext;
	public packed_dimension(i?: number): Packed_dimensionContext | Packed_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Packed_dimensionContext);
		} else {
			return this.getRuleContext(i, Packed_dimensionContext);
		}
	}
	public PACKED(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PACKED, 0); }
	public SIGNING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SIGNING, 0); }
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_3) {
			listener.enterData_type_3(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_3) {
			listener.exitData_type_3(this);
		}
	}
}
export class Data_type_4Context extends Data_typeContext {
	public ENUM(): TerminalNode { return this.getToken(SystemVerilogParser.ENUM, 0); }
	public enum_base_type(): Enum_base_typeContext {
		return this.getRuleContext(0, Enum_base_typeContext);
	}
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public enum_name_declaration(): Enum_name_declarationContext[];
	public enum_name_declaration(i: number): Enum_name_declarationContext;
	public enum_name_declaration(i?: number): Enum_name_declarationContext | Enum_name_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Enum_name_declarationContext);
		} else {
			return this.getRuleContext(i, Enum_name_declarationContext);
		}
	}
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	public packed_dimension(): Packed_dimensionContext[];
	public packed_dimension(i: number): Packed_dimensionContext;
	public packed_dimension(i?: number): Packed_dimensionContext | Packed_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Packed_dimensionContext);
		} else {
			return this.getRuleContext(i, Packed_dimensionContext);
		}
	}
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_4) {
			listener.enterData_type_4(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_4) {
			listener.exitData_type_4(this);
		}
	}
}
export class Data_type_5Context extends Data_typeContext {
	public STRING(): TerminalNode { return this.getToken(SystemVerilogParser.STRING, 0); }
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_5) {
			listener.enterData_type_5(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_5) {
			listener.exitData_type_5(this);
		}
	}
}
export class Data_type_6Context extends Data_typeContext {
	public CHANDLE(): TerminalNode { return this.getToken(SystemVerilogParser.CHANDLE, 0); }
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_6) {
			listener.enterData_type_6(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_6) {
			listener.exitData_type_6(this);
		}
	}
}
export class Data_type_7Context extends Data_typeContext {
	public VIRTUAL(): TerminalNode { return this.getToken(SystemVerilogParser.VIRTUAL, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public INTERFACE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INTERFACE, 0); }
	public parameter_value_assignment(): Parameter_value_assignmentContext[];
	public parameter_value_assignment(i: number): Parameter_value_assignmentContext;
	public parameter_value_assignment(i?: number): Parameter_value_assignmentContext | Parameter_value_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Parameter_value_assignmentContext);
		} else {
			return this.getRuleContext(i, Parameter_value_assignmentContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_7) {
			listener.enterData_type_7(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_7) {
			listener.exitData_type_7(this);
		}
	}
}
export class Data_type_8Context extends Data_typeContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	public packed_dimension(): Packed_dimensionContext[];
	public packed_dimension(i: number): Packed_dimensionContext;
	public packed_dimension(i?: number): Packed_dimensionContext | Packed_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Packed_dimensionContext);
		} else {
			return this.getRuleContext(i, Packed_dimensionContext);
		}
	}
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_8) {
			listener.enterData_type_8(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_8) {
			listener.exitData_type_8(this);
		}
	}
}
export class Data_type_9Context extends Data_typeContext {
	public class_type(): Class_typeContext {
		return this.getRuleContext(0, Class_typeContext);
	}
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_9) {
			listener.enterData_type_9(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_9) {
			listener.exitData_type_9(this);
		}
	}
}
export class Data_type_10Context extends Data_typeContext {
	public EVENT(): TerminalNode { return this.getToken(SystemVerilogParser.EVENT, 0); }
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_10) {
			listener.enterData_type_10(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_10) {
			listener.exitData_type_10(this);
		}
	}
}
export class Data_type_11Context extends Data_typeContext {
	public ps_ident(): Ps_identContext {
		return this.getRuleContext(0, Ps_identContext);
	}
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_11) {
			listener.enterData_type_11(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_11) {
			listener.exitData_type_11(this);
		}
	}
}
export class Data_type_12Context extends Data_typeContext {
	public type_reference(): Type_referenceContext {
		return this.getRuleContext(0, Type_referenceContext);
	}
	constructor(ctx: Data_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_12) {
			listener.enterData_type_12(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_12) {
			listener.exitData_type_12(this);
		}
	}
}


export class Data_type_or_implicitContext extends ParserRuleContext {
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public implicit_data_type(): Implicit_data_typeContext | undefined {
		return this.tryGetRuleContext(0, Implicit_data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_data_type_or_implicit; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_or_implicit) {
			listener.enterData_type_or_implicit(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_or_implicit) {
			listener.exitData_type_or_implicit(this);
		}
	}
}


export class Implicit_data_typeContext extends ParserRuleContext {
	public SIGNING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SIGNING, 0); }
	public packed_dimension(): Packed_dimensionContext[];
	public packed_dimension(i: number): Packed_dimensionContext;
	public packed_dimension(i?: number): Packed_dimensionContext | Packed_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Packed_dimensionContext);
		} else {
			return this.getRuleContext(i, Packed_dimensionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_implicit_data_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterImplicit_data_type) {
			listener.enterImplicit_data_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitImplicit_data_type) {
			listener.exitImplicit_data_type(this);
		}
	}
}


export class Enum_base_typeContext extends ParserRuleContext {
	public INTEGER_ATOM_TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INTEGER_ATOM_TYPE, 0); }
	public SIGNING(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SIGNING, 0); }
	public INTEGER_VECTOR_TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INTEGER_VECTOR_TYPE, 0); }
	public packed_dimension(): Packed_dimensionContext | undefined {
		return this.tryGetRuleContext(0, Packed_dimensionContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_enum_base_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterEnum_base_type) {
			listener.enterEnum_base_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitEnum_base_type) {
			listener.exitEnum_base_type(this);
		}
	}
}


export class Enum_name_declarationContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public OP_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRK, 0); }
	public integral_number(): Integral_numberContext[];
	public integral_number(i: number): Integral_numberContext;
	public integral_number(i?: number): Integral_numberContext | Integral_numberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Integral_numberContext);
		} else {
			return this.getRuleContext(i, Integral_numberContext);
		}
	}
	public CL_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRK, 0); }
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_enum_name_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterEnum_name_declaration) {
			listener.enterEnum_name_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitEnum_name_declaration) {
			listener.exitEnum_name_declaration(this);
		}
	}
}


export class Class_scopeContext extends ParserRuleContext {
	public class_type(): Class_typeContext {
		return this.getRuleContext(0, Class_typeContext);
	}
	public SCOPE(): TerminalNode { return this.getToken(SystemVerilogParser.SCOPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_scope; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_scope) {
			listener.enterClass_scope(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_scope) {
			listener.exitClass_scope(this);
		}
	}
}


export class Class_typeContext extends ParserRuleContext {
	public ps_ident(): Ps_identContext {
		return this.getRuleContext(0, Ps_identContext);
	}
	public parameter_value_assignment(): Parameter_value_assignmentContext[];
	public parameter_value_assignment(i: number): Parameter_value_assignmentContext;
	public parameter_value_assignment(i?: number): Parameter_value_assignmentContext | Parameter_value_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Parameter_value_assignmentContext);
		} else {
			return this.getRuleContext(i, Parameter_value_assignmentContext);
		}
	}
	public SCOPE(): TerminalNode[];
	public SCOPE(i: number): TerminalNode;
	public SCOPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.SCOPE);
		} else {
			return this.getToken(SystemVerilogParser.SCOPE, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_type) {
			listener.enterClass_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_type) {
			listener.exitClass_type(this);
		}
	}
}


export class Integer_typeContext extends ParserRuleContext {
	public INTEGER_VECTOR_TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INTEGER_VECTOR_TYPE, 0); }
	public INTEGER_ATOM_TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INTEGER_ATOM_TYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_integer_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInteger_type) {
			listener.enterInteger_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInteger_type) {
			listener.exitInteger_type(this);
		}
	}
}


export class Net_port_typeContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_port_type; }
	public copyFrom(ctx: Net_port_typeContext): void {
		super.copyFrom(ctx);
	}
}
export class Net_port_type_0Context extends Net_port_typeContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	constructor(ctx: Net_port_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_port_type_0) {
			listener.enterNet_port_type_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_port_type_0) {
			listener.exitNet_port_type_0(this);
		}
	}
}
export class Net_port_type_1Context extends Net_port_typeContext {
	public data_type_or_implicit(): Data_type_or_implicitContext {
		return this.getRuleContext(0, Data_type_or_implicitContext);
	}
	public NET_TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NET_TYPE, 0); }
	constructor(ctx: Net_port_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_port_type_1) {
			listener.enterNet_port_type_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_port_type_1) {
			listener.exitNet_port_type_1(this);
		}
	}
}
export class Net_port_type_2Context extends Net_port_typeContext {
	public INTERCONNECT(): TerminalNode { return this.getToken(SystemVerilogParser.INTERCONNECT, 0); }
	public implicit_data_type(): Implicit_data_typeContext {
		return this.getRuleContext(0, Implicit_data_typeContext);
	}
	constructor(ctx: Net_port_typeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_port_type_2) {
			listener.enterNet_port_type_2(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_port_type_2) {
			listener.exitNet_port_type_2(this);
		}
	}
}


export class Variable_port_typeContext extends ParserRuleContext {
	public var_data_type(): Var_data_typeContext {
		return this.getRuleContext(0, Var_data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_variable_port_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterVariable_port_type) {
			listener.enterVariable_port_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitVariable_port_type) {
			listener.exitVariable_port_type(this);
		}
	}
}


export class Var_data_typeContext extends ParserRuleContext {
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public VAR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VAR, 0); }
	public data_type_or_implicit(): Data_type_or_implicitContext | undefined {
		return this.tryGetRuleContext(0, Data_type_or_implicitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_var_data_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterVar_data_type) {
			listener.enterVar_data_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitVar_data_type) {
			listener.exitVar_data_type(this);
		}
	}
}


export class Simple_typeContext extends ParserRuleContext {
	public integer_type(): Integer_typeContext | undefined {
		return this.tryGetRuleContext(0, Integer_typeContext);
	}
	public NON_INTEGER_TYPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NON_INTEGER_TYPE, 0); }
	public ps_ident(): Ps_identContext | undefined {
		return this.tryGetRuleContext(0, Ps_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_simple_type; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSimple_type) {
			listener.enterSimple_type(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSimple_type) {
			listener.exitSimple_type(this);
		}
	}
}


export class Struct_unionContext extends ParserRuleContext {
	public STRUCT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STRUCT, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNION, 0); }
	public TAGGED(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.TAGGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_struct_union; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterStruct_union) {
			listener.enterStruct_union(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitStruct_union) {
			listener.exitStruct_union(this);
		}
	}
}


export class Data_type_or_voidContext extends ParserRuleContext {
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public VOID(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VOID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_data_type_or_void; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterData_type_or_void) {
			listener.enterData_type_or_void(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitData_type_or_void) {
			listener.exitData_type_or_void(this);
		}
	}
}


export class Struct_union_memberContext extends ParserRuleContext {
	public data_type_or_void(): Data_type_or_voidContext {
		return this.getRuleContext(0, Data_type_or_voidContext);
	}
	public list_of_variable_decl_assignments(): List_of_variable_decl_assignmentsContext {
		return this.getRuleContext(0, List_of_variable_decl_assignmentsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public RANDOM_QUALIFIER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.RANDOM_QUALIFIER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_struct_union_member; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterStruct_union_member) {
			listener.enterStruct_union_member(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitStruct_union_member) {
			listener.exitStruct_union_member(this);
		}
	}
}


export class Type_referenceContext extends ParserRuleContext {
	public TYPE(): TerminalNode { return this.getToken(SystemVerilogParser.TYPE, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_type_reference; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterType_reference) {
			listener.enterType_reference(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitType_reference) {
			listener.exitType_reference(this);
		}
	}
}


export class Delay_valueContext extends ParserRuleContext {
	public UNSIGNED_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNSIGNED_NUMBER, 0); }
	public real_number(): Real_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_numberContext);
	}
	public ps_ident(): Ps_identContext | undefined {
		return this.tryGetRuleContext(0, Ps_identContext);
	}
	public time_literal(): Time_literalContext | undefined {
		return this.tryGetRuleContext(0, Time_literalContext);
	}
	public ONESTEP(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ONESTEP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_delay_value; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDelay_value) {
			listener.enterDelay_value(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDelay_value) {
			listener.exitDelay_value(this);
		}
	}
}


export class List_of_defparam_assignmentsContext extends ParserRuleContext {
	public defparam_assignment(): Defparam_assignmentContext[];
	public defparam_assignment(i: number): Defparam_assignmentContext;
	public defparam_assignment(i?: number): Defparam_assignmentContext | Defparam_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Defparam_assignmentContext);
		} else {
			return this.getRuleContext(i, Defparam_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_defparam_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_defparam_assignments) {
			listener.enterList_of_defparam_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_defparam_assignments) {
			listener.exitList_of_defparam_assignments(this);
		}
	}
}


export class List_of_genvar_identifiersContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_genvar_identifiers; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_genvar_identifiers) {
			listener.enterList_of_genvar_identifiers(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_genvar_identifiers) {
			listener.exitList_of_genvar_identifiers(this);
		}
	}
}


export class List_of_interface_identifiersContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public unpacked_dimension(): Unpacked_dimensionContext[];
	public unpacked_dimension(i: number): Unpacked_dimensionContext;
	public unpacked_dimension(i?: number): Unpacked_dimensionContext | Unpacked_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unpacked_dimensionContext);
		} else {
			return this.getRuleContext(i, Unpacked_dimensionContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_interface_identifiers; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_interface_identifiers) {
			listener.enterList_of_interface_identifiers(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_interface_identifiers) {
			listener.exitList_of_interface_identifiers(this);
		}
	}
}


export class List_of_net_decl_assignmentsContext extends ParserRuleContext {
	public net_decl_assignment(): Net_decl_assignmentContext[];
	public net_decl_assignment(i: number): Net_decl_assignmentContext;
	public net_decl_assignment(i?: number): Net_decl_assignmentContext | Net_decl_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Net_decl_assignmentContext);
		} else {
			return this.getRuleContext(i, Net_decl_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_net_decl_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_net_decl_assignments) {
			listener.enterList_of_net_decl_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_net_decl_assignments) {
			listener.exitList_of_net_decl_assignments(this);
		}
	}
}


export class List_of_param_assignmentsContext extends ParserRuleContext {
	public param_assignment(): Param_assignmentContext[];
	public param_assignment(i: number): Param_assignmentContext;
	public param_assignment(i?: number): Param_assignmentContext | Param_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Param_assignmentContext);
		} else {
			return this.getRuleContext(i, Param_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_param_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_param_assignments) {
			listener.enterList_of_param_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_param_assignments) {
			listener.exitList_of_param_assignments(this);
		}
	}
}


export class List_of_port_identifiersContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public unpacked_dimension(): Unpacked_dimensionContext[];
	public unpacked_dimension(i: number): Unpacked_dimensionContext;
	public unpacked_dimension(i?: number): Unpacked_dimensionContext | Unpacked_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unpacked_dimensionContext);
		} else {
			return this.getRuleContext(i, Unpacked_dimensionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_port_identifiers; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_port_identifiers) {
			listener.enterList_of_port_identifiers(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_port_identifiers) {
			listener.exitList_of_port_identifiers(this);
		}
	}
}


export class List_of_tf_variable_identifiersContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public variable_dimension(): Variable_dimensionContext[];
	public variable_dimension(i: number): Variable_dimensionContext;
	public variable_dimension(i?: number): Variable_dimensionContext | Variable_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_dimensionContext);
		} else {
			return this.getRuleContext(i, Variable_dimensionContext);
		}
	}
	public EQ(): TerminalNode[];
	public EQ(i: number): TerminalNode;
	public EQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.EQ);
		} else {
			return this.getToken(SystemVerilogParser.EQ, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_tf_variable_identifiers; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_tf_variable_identifiers) {
			listener.enterList_of_tf_variable_identifiers(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_tf_variable_identifiers) {
			listener.exitList_of_tf_variable_identifiers(this);
		}
	}
}


export class List_of_type_assignmentsContext extends ParserRuleContext {
	public type_assignment(): Type_assignmentContext[];
	public type_assignment(i: number): Type_assignmentContext;
	public type_assignment(i?: number): Type_assignmentContext | Type_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Type_assignmentContext);
		} else {
			return this.getRuleContext(i, Type_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_type_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_type_assignments) {
			listener.enterList_of_type_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_type_assignments) {
			listener.exitList_of_type_assignments(this);
		}
	}
}


export class List_of_variable_decl_assignmentsContext extends ParserRuleContext {
	public variable_decl_assignment(): Variable_decl_assignmentContext[];
	public variable_decl_assignment(i: number): Variable_decl_assignmentContext;
	public variable_decl_assignment(i?: number): Variable_decl_assignmentContext | Variable_decl_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_decl_assignmentContext);
		} else {
			return this.getRuleContext(i, Variable_decl_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_variable_decl_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_variable_decl_assignments) {
			listener.enterList_of_variable_decl_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_variable_decl_assignments) {
			listener.exitList_of_variable_decl_assignments(this);
		}
	}
}


export class List_of_variable_identifiersContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public variable_dimension(): Variable_dimensionContext[];
	public variable_dimension(i: number): Variable_dimensionContext;
	public variable_dimension(i?: number): Variable_dimensionContext | Variable_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_dimensionContext);
		} else {
			return this.getRuleContext(i, Variable_dimensionContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_variable_identifiers; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_variable_identifiers) {
			listener.enterList_of_variable_identifiers(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_variable_identifiers) {
			listener.exitList_of_variable_identifiers(this);
		}
	}
}


export class List_of_variable_port_identifiersContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public variable_dimension(): Variable_dimensionContext[];
	public variable_dimension(i: number): Variable_dimensionContext;
	public variable_dimension(i?: number): Variable_dimensionContext | Variable_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_dimensionContext);
		} else {
			return this.getRuleContext(i, Variable_dimensionContext);
		}
	}
	public EQ(): TerminalNode[];
	public EQ(i: number): TerminalNode;
	public EQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.EQ);
		} else {
			return this.getToken(SystemVerilogParser.EQ, i);
		}
	}
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_variable_port_identifiers; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_variable_port_identifiers) {
			listener.enterList_of_variable_port_identifiers(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_variable_port_identifiers) {
			listener.exitList_of_variable_port_identifiers(this);
		}
	}
}


export class Defparam_assignmentContext extends ParserRuleContext {
	public hier_ident(): Hier_identContext {
		return this.getRuleContext(0, Hier_identContext);
	}
	public EQ(): TerminalNode { return this.getToken(SystemVerilogParser.EQ, 0); }
	public constant_mintypmax_expression(): Constant_mintypmax_expressionContext {
		return this.getRuleContext(0, Constant_mintypmax_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_defparam_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDefparam_assignment) {
			listener.enterDefparam_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDefparam_assignment) {
			listener.exitDefparam_assignment(this);
		}
	}
}


export class Net_decl_assignmentContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public unpacked_dimension(): Unpacked_dimensionContext[];
	public unpacked_dimension(i: number): Unpacked_dimensionContext;
	public unpacked_dimension(i?: number): Unpacked_dimensionContext | Unpacked_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unpacked_dimensionContext);
		} else {
			return this.getRuleContext(i, Unpacked_dimensionContext);
		}
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_decl_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_decl_assignment) {
			listener.enterNet_decl_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_decl_assignment) {
			listener.exitNet_decl_assignment(this);
		}
	}
}


export class Param_assignmentContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public unpacked_dimension(): Unpacked_dimensionContext[];
	public unpacked_dimension(i: number): Unpacked_dimensionContext;
	public unpacked_dimension(i?: number): Unpacked_dimensionContext | Unpacked_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unpacked_dimensionContext);
		} else {
			return this.getRuleContext(i, Unpacked_dimensionContext);
		}
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public constant_param_expression(): Constant_param_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_param_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_param_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParam_assignment) {
			listener.enterParam_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParam_assignment) {
			listener.exitParam_assignment(this);
		}
	}
}


export class Type_assignmentContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_type_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterType_assignment) {
			listener.enterType_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitType_assignment) {
			listener.exitType_assignment(this);
		}
	}
}


export class Variable_decl_assignmentContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public variable_dimension(): Variable_dimensionContext[];
	public variable_dimension(i: number): Variable_dimensionContext;
	public variable_dimension(i?: number): Variable_dimensionContext | Variable_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_dimensionContext);
		} else {
			return this.getRuleContext(i, Variable_dimensionContext);
		}
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public unsized_dimension(): Unsized_dimensionContext | undefined {
		return this.tryGetRuleContext(0, Unsized_dimensionContext);
	}
	public dynamic_array_new(): Dynamic_array_newContext | undefined {
		return this.tryGetRuleContext(0, Dynamic_array_newContext);
	}
	public class_new(): Class_newContext | undefined {
		return this.tryGetRuleContext(0, Class_newContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_variable_decl_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterVariable_decl_assignment) {
			listener.enterVariable_decl_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitVariable_decl_assignment) {
			listener.exitVariable_decl_assignment(this);
		}
	}
}


export class Class_newContext extends ParserRuleContext {
	public NEW(): TerminalNode { return this.getToken(SystemVerilogParser.NEW, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_new; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_new) {
			listener.enterClass_new(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_new) {
			listener.exitClass_new(this);
		}
	}
}


export class Dynamic_array_newContext extends ParserRuleContext {
	public NEW(): TerminalNode { return this.getToken(SystemVerilogParser.NEW, 0); }
	public OP_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRK, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public CL_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRK, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_dynamic_array_new; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDynamic_array_new) {
			listener.enterDynamic_array_new(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDynamic_array_new) {
			listener.exitDynamic_array_new(this);
		}
	}
}


export class Unpacked_dimensionContext extends ParserRuleContext {
	public OP_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRK, 0); }
	public constant_range(): Constant_rangeContext | undefined {
		return this.tryGetRuleContext(0, Constant_rangeContext);
	}
	public CL_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRK, 0); }
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_unpacked_dimension; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterUnpacked_dimension) {
			listener.enterUnpacked_dimension(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitUnpacked_dimension) {
			listener.exitUnpacked_dimension(this);
		}
	}
}


export class Packed_dimensionContext extends ParserRuleContext {
	public OP_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRK, 0); }
	public constant_range(): Constant_rangeContext | undefined {
		return this.tryGetRuleContext(0, Constant_rangeContext);
	}
	public CL_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRK, 0); }
	public unsized_dimension(): Unsized_dimensionContext | undefined {
		return this.tryGetRuleContext(0, Unsized_dimensionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_packed_dimension; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPacked_dimension) {
			listener.enterPacked_dimension(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPacked_dimension) {
			listener.exitPacked_dimension(this);
		}
	}
}


export class Assosiative_dimensionContext extends ParserRuleContext {
	public OP_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRK, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public CL_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRK, 0); }
	public MULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_assosiative_dimension; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterAssosiative_dimension) {
			listener.enterAssosiative_dimension(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitAssosiative_dimension) {
			listener.exitAssosiative_dimension(this);
		}
	}
}


export class Variable_dimensionContext extends ParserRuleContext {
	public unsized_dimension(): Unsized_dimensionContext | undefined {
		return this.tryGetRuleContext(0, Unsized_dimensionContext);
	}
	public unpacked_dimension(): Unpacked_dimensionContext | undefined {
		return this.tryGetRuleContext(0, Unpacked_dimensionContext);
	}
	public assosiative_dimension(): Assosiative_dimensionContext | undefined {
		return this.tryGetRuleContext(0, Assosiative_dimensionContext);
	}
	public queue_dimension(): Queue_dimensionContext | undefined {
		return this.tryGetRuleContext(0, Queue_dimensionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_variable_dimension; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterVariable_dimension) {
			listener.enterVariable_dimension(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitVariable_dimension) {
			listener.exitVariable_dimension(this);
		}
	}
}


export class Queue_dimensionContext extends ParserRuleContext {
	public OP_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRK, 0); }
	public DOL(): TerminalNode { return this.getToken(SystemVerilogParser.DOL, 0); }
	public CL_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRK, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_queue_dimension; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterQueue_dimension) {
			listener.enterQueue_dimension(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitQueue_dimension) {
			listener.exitQueue_dimension(this);
		}
	}
}


export class Unsized_dimensionContext extends ParserRuleContext {
	public OP_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRK, 0); }
	public CL_BRK(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_unsized_dimension; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterUnsized_dimension) {
			listener.enterUnsized_dimension(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitUnsized_dimension) {
			listener.exitUnsized_dimension(this);
		}
	}
}


export class Function_data_type_or_implicitContext extends ParserRuleContext {
	public data_type_or_void(): Data_type_or_voidContext | undefined {
		return this.tryGetRuleContext(0, Data_type_or_voidContext);
	}
	public implicit_data_type(): Implicit_data_typeContext | undefined {
		return this.tryGetRuleContext(0, Implicit_data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_function_data_type_or_implicit; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_data_type_or_implicit) {
			listener.enterFunction_data_type_or_implicit(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_data_type_or_implicit) {
			listener.exitFunction_data_type_or_implicit(this);
		}
	}
}


export class Function_declarationContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode { return this.getToken(SystemVerilogParser.FUNCTION, 0); }
	public function_body_declaration(): Function_body_declarationContext {
		return this.getRuleContext(0, Function_body_declarationContext);
	}
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_function_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_declaration) {
			listener.enterFunction_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_declaration) {
			listener.exitFunction_declaration(this);
		}
	}
}


export class Function_body_declarationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_function_body_declaration; }
	public copyFrom(ctx: Function_body_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class Function_body_declaration_0Context extends Function_body_declarationContext {
	public function_data_type_or_implicit(): Function_data_type_or_implicitContext {
		return this.getRuleContext(0, Function_data_type_or_implicitContext);
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public ENDFUNCTION(): TerminalNode { return this.getToken(SystemVerilogParser.ENDFUNCTION, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public tf_item_declaration(): Tf_item_declarationContext[];
	public tf_item_declaration(i: number): Tf_item_declarationContext;
	public tf_item_declaration(i?: number): Tf_item_declarationContext | Tf_item_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tf_item_declarationContext);
		} else {
			return this.getRuleContext(i, Tf_item_declarationContext);
		}
	}
	public function_statement_or_null(): Function_statement_or_nullContext[];
	public function_statement_or_null(i: number): Function_statement_or_nullContext;
	public function_statement_or_null(i?: number): Function_statement_or_nullContext | Function_statement_or_nullContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_statement_or_nullContext);
		} else {
			return this.getRuleContext(i, Function_statement_or_nullContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(ctx: Function_body_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_body_declaration_0) {
			listener.enterFunction_body_declaration_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_body_declaration_0) {
			listener.exitFunction_body_declaration_0(this);
		}
	}
}
export class Function_body_declaration_1Context extends Function_body_declarationContext {
	public function_data_type_or_implicit(): Function_data_type_or_implicitContext {
		return this.getRuleContext(0, Function_data_type_or_implicitContext);
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public ENDFUNCTION(): TerminalNode { return this.getToken(SystemVerilogParser.ENDFUNCTION, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public tf_port_list(): Tf_port_listContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_listContext);
	}
	public block_item_declaration(): Block_item_declarationContext[];
	public block_item_declaration(i: number): Block_item_declarationContext;
	public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Block_item_declarationContext);
		} else {
			return this.getRuleContext(i, Block_item_declarationContext);
		}
	}
	public function_statement_or_null(): Function_statement_or_nullContext[];
	public function_statement_or_null(i: number): Function_statement_or_nullContext;
	public function_statement_or_null(i?: number): Function_statement_or_nullContext | Function_statement_or_nullContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_statement_or_nullContext);
		} else {
			return this.getRuleContext(i, Function_statement_or_nullContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(ctx: Function_body_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_body_declaration_1) {
			listener.enterFunction_body_declaration_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_body_declaration_1) {
			listener.exitFunction_body_declaration_1(this);
		}
	}
}


export class Function_prototypeContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode { return this.getToken(SystemVerilogParser.FUNCTION, 0); }
	public data_type_or_void(): Data_type_or_voidContext {
		return this.getRuleContext(0, Data_type_or_voidContext);
	}
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public tf_port_list(): Tf_port_listContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_function_prototype; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_prototype) {
			listener.enterFunction_prototype(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_prototype) {
			listener.exitFunction_prototype(this);
		}
	}
}


export class Task_declarationContext extends ParserRuleContext {
	public TASK(): TerminalNode { return this.getToken(SystemVerilogParser.TASK, 0); }
	public task_body_declaration(): Task_body_declarationContext {
		return this.getRuleContext(0, Task_body_declarationContext);
	}
	public lifetime(): LifetimeContext | undefined {
		return this.tryGetRuleContext(0, LifetimeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_task_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTask_declaration) {
			listener.enterTask_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTask_declaration) {
			listener.exitTask_declaration(this);
		}
	}
}


export class Task_body_declarationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_task_body_declaration; }
	public copyFrom(ctx: Task_body_declarationContext): void {
		super.copyFrom(ctx);
	}
}
export class Task_body_declaration_0Context extends Task_body_declarationContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public ENDTASK(): TerminalNode { return this.getToken(SystemVerilogParser.ENDTASK, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public tf_item_declaration(): Tf_item_declarationContext[];
	public tf_item_declaration(i: number): Tf_item_declarationContext;
	public tf_item_declaration(i?: number): Tf_item_declarationContext | Tf_item_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tf_item_declarationContext);
		} else {
			return this.getRuleContext(i, Tf_item_declarationContext);
		}
	}
	public statement_or_null(): Statement_or_nullContext[];
	public statement_or_null(i: number): Statement_or_nullContext;
	public statement_or_null(i?: number): Statement_or_nullContext | Statement_or_nullContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Statement_or_nullContext);
		} else {
			return this.getRuleContext(i, Statement_or_nullContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(ctx: Task_body_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTask_body_declaration_0) {
			listener.enterTask_body_declaration_0(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTask_body_declaration_0) {
			listener.exitTask_body_declaration_0(this);
		}
	}
}
export class Task_body_declaration_1Context extends Task_body_declarationContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public ENDTASK(): TerminalNode { return this.getToken(SystemVerilogParser.ENDTASK, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public tf_port_list(): Tf_port_listContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_listContext);
	}
	public block_item_declaration(): Block_item_declarationContext[];
	public block_item_declaration(i: number): Block_item_declarationContext;
	public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Block_item_declarationContext);
		} else {
			return this.getRuleContext(i, Block_item_declarationContext);
		}
	}
	public statement_or_null(): Statement_or_nullContext[];
	public statement_or_null(i: number): Statement_or_nullContext;
	public statement_or_null(i?: number): Statement_or_nullContext | Statement_or_nullContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Statement_or_nullContext);
		} else {
			return this.getRuleContext(i, Statement_or_nullContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(ctx: Task_body_declarationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTask_body_declaration_1) {
			listener.enterTask_body_declaration_1(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTask_body_declaration_1) {
			listener.exitTask_body_declaration_1(this);
		}
	}
}


export class Tf_item_declarationContext extends ParserRuleContext {
	public block_item_declaration(): Block_item_declarationContext | undefined {
		return this.tryGetRuleContext(0, Block_item_declarationContext);
	}
	public tf_port_declaration(): Tf_port_declarationContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_tf_item_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTf_item_declaration) {
			listener.enterTf_item_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTf_item_declaration) {
			listener.exitTf_item_declaration(this);
		}
	}
}


export class Tf_port_listContext extends ParserRuleContext {
	public tf_port_item(): Tf_port_itemContext[];
	public tf_port_item(i: number): Tf_port_itemContext;
	public tf_port_item(i?: number): Tf_port_itemContext | Tf_port_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Tf_port_itemContext);
		} else {
			return this.getRuleContext(i, Tf_port_itemContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_tf_port_list; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTf_port_list) {
			listener.enterTf_port_list(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTf_port_list) {
			listener.exitTf_port_list(this);
		}
	}
}


export class Tf_port_itemContext extends ParserRuleContext {
	public data_type_or_implicit(): Data_type_or_implicitContext {
		return this.getRuleContext(0, Data_type_or_implicitContext);
	}
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public tf_port_direction(): Tf_port_directionContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_directionContext);
	}
	public VAR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VAR, 0); }
	public variable_dimension(): Variable_dimensionContext[];
	public variable_dimension(i: number): Variable_dimensionContext;
	public variable_dimension(i?: number): Variable_dimensionContext | Variable_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_dimensionContext);
		} else {
			return this.getRuleContext(i, Variable_dimensionContext);
		}
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_tf_port_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTf_port_item) {
			listener.enterTf_port_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTf_port_item) {
			listener.exitTf_port_item(this);
		}
	}
}


export class Tf_port_directionContext extends ParserRuleContext {
	public port_direction(): Port_directionContext | undefined {
		return this.tryGetRuleContext(0, Port_directionContext);
	}
	public CONST(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CONST, 0); }
	public REF(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.REF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_tf_port_direction; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTf_port_direction) {
			listener.enterTf_port_direction(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTf_port_direction) {
			listener.exitTf_port_direction(this);
		}
	}
}


export class Tf_port_declarationContext extends ParserRuleContext {
	public tf_port_direction(): Tf_port_directionContext {
		return this.getRuleContext(0, Tf_port_directionContext);
	}
	public data_type_or_implicit(): Data_type_or_implicitContext {
		return this.getRuleContext(0, Data_type_or_implicitContext);
	}
	public list_of_tf_variable_identifiers(): List_of_tf_variable_identifiersContext {
		return this.getRuleContext(0, List_of_tf_variable_identifiersContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public VAR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_tf_port_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTf_port_declaration) {
			listener.enterTf_port_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTf_port_declaration) {
			listener.exitTf_port_declaration(this);
		}
	}
}


export class Task_prototypeContext extends ParserRuleContext {
	public TASK(): TerminalNode { return this.getToken(SystemVerilogParser.TASK, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public tf_port_list(): Tf_port_listContext | undefined {
		return this.tryGetRuleContext(0, Tf_port_listContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_task_prototype; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTask_prototype) {
			listener.enterTask_prototype(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTask_prototype) {
			listener.exitTask_prototype(this);
		}
	}
}


export class Block_item_declarationContext extends ParserRuleContext {
	public data_declaration(): Data_declarationContext | undefined {
		return this.tryGetRuleContext(0, Data_declarationContext);
	}
	public local_parameter_declaration(): Local_parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Local_parameter_declarationContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public parameter_declaration(): Parameter_declarationContext | undefined {
		return this.tryGetRuleContext(0, Parameter_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_block_item_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterBlock_item_declaration) {
			listener.enterBlock_item_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitBlock_item_declaration) {
			listener.exitBlock_item_declaration(this);
		}
	}
}


export class Modport_declarationContext extends ParserRuleContext {
	public MODPORT(): TerminalNode { return this.getToken(SystemVerilogParser.MODPORT, 0); }
	public modport_item(): Modport_itemContext[];
	public modport_item(i: number): Modport_itemContext;
	public modport_item(i?: number): Modport_itemContext | Modport_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Modport_itemContext);
		} else {
			return this.getRuleContext(i, Modport_itemContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_declaration) {
			listener.enterModport_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_declaration) {
			listener.exitModport_declaration(this);
		}
	}
}


export class Modport_itemContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public modport_ports_declaration(): Modport_ports_declarationContext[];
	public modport_ports_declaration(i: number): Modport_ports_declarationContext;
	public modport_ports_declaration(i?: number): Modport_ports_declarationContext | Modport_ports_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Modport_ports_declarationContext);
		} else {
			return this.getRuleContext(i, Modport_ports_declarationContext);
		}
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_item) {
			listener.enterModport_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_item) {
			listener.exitModport_item(this);
		}
	}
}


export class Modport_ports_declarationContext extends ParserRuleContext {
	public modport_simple_ports_declaration(): Modport_simple_ports_declarationContext | undefined {
		return this.tryGetRuleContext(0, Modport_simple_ports_declarationContext);
	}
	public modport_tf_ports_declaration(): Modport_tf_ports_declarationContext | undefined {
		return this.tryGetRuleContext(0, Modport_tf_ports_declarationContext);
	}
	public modport_clocking_declaration(): Modport_clocking_declarationContext | undefined {
		return this.tryGetRuleContext(0, Modport_clocking_declarationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_ports_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_ports_declaration) {
			listener.enterModport_ports_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_ports_declaration) {
			listener.exitModport_ports_declaration(this);
		}
	}
}


export class Modport_clocking_declarationContext extends ParserRuleContext {
	public CLOCKING(): TerminalNode { return this.getToken(SystemVerilogParser.CLOCKING, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_clocking_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_clocking_declaration) {
			listener.enterModport_clocking_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_clocking_declaration) {
			listener.exitModport_clocking_declaration(this);
		}
	}
}


export class Modport_simple_ports_declarationContext extends ParserRuleContext {
	public port_direction(): Port_directionContext {
		return this.getRuleContext(0, Port_directionContext);
	}
	public modport_simple_port(): Modport_simple_portContext[];
	public modport_simple_port(i: number): Modport_simple_portContext;
	public modport_simple_port(i?: number): Modport_simple_portContext | Modport_simple_portContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Modport_simple_portContext);
		} else {
			return this.getRuleContext(i, Modport_simple_portContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_simple_ports_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_simple_ports_declaration) {
			listener.enterModport_simple_ports_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_simple_ports_declaration) {
			listener.exitModport_simple_ports_declaration(this);
		}
	}
}


export class Modport_simple_portContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_simple_port; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_simple_port) {
			listener.enterModport_simple_port(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_simple_port) {
			listener.exitModport_simple_port(this);
		}
	}
}


export class Modport_tf_ports_declarationContext extends ParserRuleContext {
	public import_export(): Import_exportContext {
		return this.getRuleContext(0, Import_exportContext);
	}
	public modport_tf_port(): Modport_tf_portContext[];
	public modport_tf_port(i: number): Modport_tf_portContext;
	public modport_tf_port(i?: number): Modport_tf_portContext | Modport_tf_portContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Modport_tf_portContext);
		} else {
			return this.getRuleContext(i, Modport_tf_portContext);
		}
	}
	public COM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_tf_ports_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_tf_ports_declaration) {
			listener.enterModport_tf_ports_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_tf_ports_declaration) {
			listener.exitModport_tf_ports_declaration(this);
		}
	}
}


export class Modport_tf_portContext extends ParserRuleContext {
	public method_prototype(): Method_prototypeContext | undefined {
		return this.tryGetRuleContext(0, Method_prototypeContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_modport_tf_port; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModport_tf_port) {
			listener.enterModport_tf_port(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModport_tf_port) {
			listener.exitModport_tf_port(this);
		}
	}
}


export class Import_exportContext extends ParserRuleContext {
	public IMPORT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.IMPORT, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EXPORT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_import_export; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterImport_export) {
			listener.enterImport_export(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitImport_export) {
			listener.exitImport_export(this);
		}
	}
}


export class Concurrent_assertion_itemContext extends ParserRuleContext {
	public concurrent_assertion_statement(): Concurrent_assertion_statementContext | undefined {
		return this.tryGetRuleContext(0, Concurrent_assertion_statementContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public checker_instantiation(): Checker_instantiationContext | undefined {
		return this.tryGetRuleContext(0, Checker_instantiationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_concurrent_assertion_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConcurrent_assertion_item) {
			listener.enterConcurrent_assertion_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConcurrent_assertion_item) {
			listener.exitConcurrent_assertion_item(this);
		}
	}
}


export class Concurrent_assertion_statementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_concurrent_assertion_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConcurrent_assertion_statement) {
			listener.enterConcurrent_assertion_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConcurrent_assertion_statement) {
			listener.exitConcurrent_assertion_statement(this);
		}
	}
}


export class Expression_or_distContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DIST(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DIST, 0); }
	public OP_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRC, 0); }
	public dist_list(): Dist_listContext | undefined {
		return this.tryGetRuleContext(0, Dist_listContext);
	}
	public CL_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_expression_or_dist; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterExpression_or_dist) {
			listener.enterExpression_or_dist(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitExpression_or_dist) {
			listener.exitExpression_or_dist(this);
		}
	}
}


export class Module_instantiationContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public hierarchical_instance(): Hierarchical_instanceContext[];
	public hierarchical_instance(i: number): Hierarchical_instanceContext;
	public hierarchical_instance(i?: number): Hierarchical_instanceContext | Hierarchical_instanceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Hierarchical_instanceContext);
		} else {
			return this.getRuleContext(i, Hierarchical_instanceContext);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public parameter_value_assignment(): Parameter_value_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Parameter_value_assignmentContext);
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_module_instantiation; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterModule_instantiation) {
			listener.enterModule_instantiation(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitModule_instantiation) {
			listener.exitModule_instantiation(this);
		}
	}
}


export class Parameter_value_assignmentContext extends ParserRuleContext {
	public SHP(): TerminalNode { return this.getToken(SystemVerilogParser.SHP, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public list_of_parameter_assignments(): List_of_parameter_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_parameter_assignmentsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_parameter_value_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParameter_value_assignment) {
			listener.enterParameter_value_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParameter_value_assignment) {
			listener.exitParameter_value_assignment(this);
		}
	}
}


export class Parameter_assign_commaContext extends ParserRuleContext {
	public COM(): TerminalNode { return this.getToken(SystemVerilogParser.COM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_parameter_assign_comma; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParameter_assign_comma) {
			listener.enterParameter_assign_comma(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParameter_assign_comma) {
			listener.exitParameter_assign_comma(this);
		}
	}
}


export class List_of_parameter_assignmentsContext extends ParserRuleContext {
	public ordered_parameter_assignment(): Ordered_parameter_assignmentContext[];
	public ordered_parameter_assignment(i: number): Ordered_parameter_assignmentContext;
	public ordered_parameter_assignment(i?: number): Ordered_parameter_assignmentContext | Ordered_parameter_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ordered_parameter_assignmentContext);
		} else {
			return this.getRuleContext(i, Ordered_parameter_assignmentContext);
		}
	}
	public parameter_assign_comma(): Parameter_assign_commaContext[];
	public parameter_assign_comma(i: number): Parameter_assign_commaContext;
	public parameter_assign_comma(i?: number): Parameter_assign_commaContext | Parameter_assign_commaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Parameter_assign_commaContext);
		} else {
			return this.getRuleContext(i, Parameter_assign_commaContext);
		}
	}
	public named_parameter_assignment(): Named_parameter_assignmentContext[];
	public named_parameter_assignment(i: number): Named_parameter_assignmentContext;
	public named_parameter_assignment(i?: number): Named_parameter_assignmentContext | Named_parameter_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Named_parameter_assignmentContext);
		} else {
			return this.getRuleContext(i, Named_parameter_assignmentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_parameter_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_parameter_assignments) {
			listener.enterList_of_parameter_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_parameter_assignments) {
			listener.exitList_of_parameter_assignments(this);
		}
	}
}


export class Ordered_parameter_assignmentContext extends ParserRuleContext {
	public param_expression(): Param_expressionContext {
		return this.getRuleContext(0, Param_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_ordered_parameter_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterOrdered_parameter_assignment) {
			listener.enterOrdered_parameter_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitOrdered_parameter_assignment) {
			listener.exitOrdered_parameter_assignment(this);
		}
	}
}


export class Named_parameter_assignmentContext extends ParserRuleContext {
	public DOT(): TerminalNode { return this.getToken(SystemVerilogParser.DOT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public param_expression(): Param_expressionContext | undefined {
		return this.tryGetRuleContext(0, Param_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_named_parameter_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNamed_parameter_assignment) {
			listener.enterNamed_parameter_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNamed_parameter_assignment) {
			listener.exitNamed_parameter_assignment(this);
		}
	}
}


export class Hierarchical_instanceContext extends ParserRuleContext {
	public name_of_instance(): Name_of_instanceContext {
		return this.getRuleContext(0, Name_of_instanceContext);
	}
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public list_of_port_connections(): List_of_port_connectionsContext | undefined {
		return this.tryGetRuleContext(0, List_of_port_connectionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_hierarchical_instance; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterHierarchical_instance) {
			listener.enterHierarchical_instance(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitHierarchical_instance) {
			listener.exitHierarchical_instance(this);
		}
	}
}


export class Name_of_instanceContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public unpacked_dimension(): Unpacked_dimensionContext[];
	public unpacked_dimension(i: number): Unpacked_dimensionContext;
	public unpacked_dimension(i?: number): Unpacked_dimensionContext | Unpacked_dimensionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Unpacked_dimensionContext);
		} else {
			return this.getRuleContext(i, Unpacked_dimensionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_name_of_instance; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterName_of_instance) {
			listener.enterName_of_instance(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitName_of_instance) {
			listener.exitName_of_instance(this);
		}
	}
}


export class Port_conn_commaContext extends ParserRuleContext {
	public COM(): TerminalNode { return this.getToken(SystemVerilogParser.COM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_port_conn_comma; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPort_conn_comma) {
			listener.enterPort_conn_comma(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPort_conn_comma) {
			listener.exitPort_conn_comma(this);
		}
	}
}


export class List_of_port_connectionsContext extends ParserRuleContext {
	public ordered_port_connection(): Ordered_port_connectionContext[];
	public ordered_port_connection(i: number): Ordered_port_connectionContext;
	public ordered_port_connection(i?: number): Ordered_port_connectionContext | Ordered_port_connectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Ordered_port_connectionContext);
		} else {
			return this.getRuleContext(i, Ordered_port_connectionContext);
		}
	}
	public port_conn_comma(): Port_conn_commaContext[];
	public port_conn_comma(i: number): Port_conn_commaContext;
	public port_conn_comma(i?: number): Port_conn_commaContext | Port_conn_commaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Port_conn_commaContext);
		} else {
			return this.getRuleContext(i, Port_conn_commaContext);
		}
	}
	public named_port_connection(): Named_port_connectionContext[];
	public named_port_connection(i: number): Named_port_connectionContext;
	public named_port_connection(i?: number): Named_port_connectionContext | Named_port_connectionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Named_port_connectionContext);
		} else {
			return this.getRuleContext(i, Named_port_connectionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_port_connections; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_port_connections) {
			listener.enterList_of_port_connections(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_port_connections) {
			listener.exitList_of_port_connections(this);
		}
	}
}


export class Ordered_port_connectionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_ordered_port_connection; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterOrdered_port_connection) {
			listener.enterOrdered_port_connection(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitOrdered_port_connection) {
			listener.exitOrdered_port_connection(this);
		}
	}
}


export class Named_port_connectionContext extends ParserRuleContext {
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public FORALL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FORALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_named_port_connection; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNamed_port_connection) {
			listener.enterNamed_port_connection(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNamed_port_connection) {
			listener.exitNamed_port_connection(this);
		}
	}
}


export class Checker_instantiationContext extends ParserRuleContext {
	public ps_ident(): Ps_identContext {
		return this.getRuleContext(0, Ps_identContext);
	}
	public name_of_instance(): Name_of_instanceContext {
		return this.getRuleContext(0, Name_of_instanceContext);
	}
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public list_of_checker_port_connections(): List_of_checker_port_connectionsContext {
		return this.getRuleContext(0, List_of_checker_port_connectionsContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_checker_instantiation; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterChecker_instantiation) {
			listener.enterChecker_instantiation(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitChecker_instantiation) {
			listener.exitChecker_instantiation(this);
		}
	}
}


export class List_of_checker_port_connectionsContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_checker_port_connections; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_checker_port_connections) {
			listener.enterList_of_checker_port_connections(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_checker_port_connections) {
			listener.exitList_of_checker_port_connections(this);
		}
	}
}


export class Generate_regionContext extends ParserRuleContext {
	public GENERATE(): TerminalNode { return this.getToken(SystemVerilogParser.GENERATE, 0); }
	public ENDGENERATE(): TerminalNode { return this.getToken(SystemVerilogParser.ENDGENERATE, 0); }
	public generate_item(): Generate_itemContext[];
	public generate_item(i: number): Generate_itemContext;
	public generate_item(i?: number): Generate_itemContext | Generate_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Generate_itemContext);
		} else {
			return this.getRuleContext(i, Generate_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_generate_region; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterGenerate_region) {
			listener.enterGenerate_region(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitGenerate_region) {
			listener.exitGenerate_region(this);
		}
	}
}


export class Loop_generate_constructContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(SystemVerilogParser.FOR, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public genvar_initialization(): Genvar_initializationContext {
		return this.getRuleContext(0, Genvar_initializationContext);
	}
	public SEMIC(): TerminalNode[];
	public SEMIC(i: number): TerminalNode;
	public SEMIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.SEMIC);
		} else {
			return this.getToken(SystemVerilogParser.SEMIC, i);
		}
	}
	public genvar_expression(): Genvar_expressionContext {
		return this.getRuleContext(0, Genvar_expressionContext);
	}
	public genvar_iteration(): Genvar_iterationContext {
		return this.getRuleContext(0, Genvar_iterationContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public generate_block(): Generate_blockContext {
		return this.getRuleContext(0, Generate_blockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_loop_generate_construct; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterLoop_generate_construct) {
			listener.enterLoop_generate_construct(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitLoop_generate_construct) {
			listener.exitLoop_generate_construct(this);
		}
	}
}


export class Genvar_initializationContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public EQ(): TerminalNode { return this.getToken(SystemVerilogParser.EQ, 0); }
	public constant_expression(): Constant_expressionContext {
		return this.getRuleContext(0, Constant_expressionContext);
	}
	public GENVAR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.GENVAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_genvar_initialization; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterGenvar_initialization) {
			listener.enterGenvar_initialization(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitGenvar_initialization) {
			listener.exitGenvar_initialization(this);
		}
	}
}


export class Genvar_iterationContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public assignment_operator(): Assignment_operatorContext | undefined {
		return this.tryGetRuleContext(0, Assignment_operatorContext);
	}
	public genvar_expression(): Genvar_expressionContext | undefined {
		return this.tryGetRuleContext(0, Genvar_expressionContext);
	}
	public inc_or_dec_operator(): Inc_or_dec_operatorContext | undefined {
		return this.tryGetRuleContext(0, Inc_or_dec_operatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_genvar_iteration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterGenvar_iteration) {
			listener.enterGenvar_iteration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitGenvar_iteration) {
			listener.exitGenvar_iteration(this);
		}
	}
}


export class Conditional_generate_constructContext extends ParserRuleContext {
	public if_generate_construct(): If_generate_constructContext | undefined {
		return this.tryGetRuleContext(0, If_generate_constructContext);
	}
	public case_generate_construct(): Case_generate_constructContext | undefined {
		return this.tryGetRuleContext(0, Case_generate_constructContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_conditional_generate_construct; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConditional_generate_construct) {
			listener.enterConditional_generate_construct(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConditional_generate_construct) {
			listener.exitConditional_generate_construct(this);
		}
	}
}


export class If_generate_constructContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(SystemVerilogParser.IF, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public constant_expression(): Constant_expressionContext {
		return this.getRuleContext(0, Constant_expressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public generate_block(): Generate_blockContext[];
	public generate_block(i: number): Generate_blockContext;
	public generate_block(i?: number): Generate_blockContext | Generate_blockContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Generate_blockContext);
		} else {
			return this.getRuleContext(i, Generate_blockContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_if_generate_construct; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterIf_generate_construct) {
			listener.enterIf_generate_construct(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitIf_generate_construct) {
			listener.exitIf_generate_construct(this);
		}
	}
}


export class Case_generate_constructContext extends ParserRuleContext {
	public CASE_KEYWORD(): TerminalNode { return this.getToken(SystemVerilogParser.CASE_KEYWORD, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public constant_expression(): Constant_expressionContext {
		return this.getRuleContext(0, Constant_expressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public case_generate_item(): Case_generate_itemContext[];
	public case_generate_item(i: number): Case_generate_itemContext;
	public case_generate_item(i?: number): Case_generate_itemContext | Case_generate_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Case_generate_itemContext);
		} else {
			return this.getRuleContext(i, Case_generate_itemContext);
		}
	}
	public ENDCASE(): TerminalNode { return this.getToken(SystemVerilogParser.ENDCASE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_case_generate_construct; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCase_generate_construct) {
			listener.enterCase_generate_construct(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCase_generate_construct) {
			listener.exitCase_generate_construct(this);
		}
	}
}


export class Case_generate_itemContext extends ParserRuleContext {
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public generate_block(): Generate_blockContext {
		return this.getRuleContext(0, Generate_blockContext);
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_case_generate_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCase_generate_item) {
			listener.enterCase_generate_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCase_generate_item) {
			listener.exitCase_generate_item(this);
		}
	}
}


export class Generate_blockContext extends ParserRuleContext {
	public generate_item(): Generate_itemContext[];
	public generate_item(i: number): Generate_itemContext;
	public generate_item(i?: number): Generate_itemContext | Generate_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Generate_itemContext);
		} else {
			return this.getRuleContext(i, Generate_itemContext);
		}
	}
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.BEGIN, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.END, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COLON);
		} else {
			return this.getToken(SystemVerilogParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_generate_block; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterGenerate_block) {
			listener.enterGenerate_block(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitGenerate_block) {
			listener.exitGenerate_block(this);
		}
	}
}


export class Generate_itemContext extends ParserRuleContext {
	public module_or_generate_item(): Module_or_generate_itemContext {
		return this.getRuleContext(0, Module_or_generate_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_generate_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterGenerate_item) {
			listener.enterGenerate_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitGenerate_item) {
			listener.exitGenerate_item(this);
		}
	}
}


export class Continuous_assignContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode { return this.getToken(SystemVerilogParser.ASSIGN, 0); }
	public list_of_net_assignments(): List_of_net_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_net_assignmentsContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public list_of_variable_assignments(): List_of_variable_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_variable_assignmentsContext);
	}
	public delay_control(): Delay_controlContext | undefined {
		return this.tryGetRuleContext(0, Delay_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_continuous_assign; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterContinuous_assign) {
			listener.enterContinuous_assign(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitContinuous_assign) {
			listener.exitContinuous_assign(this);
		}
	}
}


export class List_of_net_assignmentsContext extends ParserRuleContext {
	public net_assignment(): Net_assignmentContext[];
	public net_assignment(i: number): Net_assignmentContext;
	public net_assignment(i?: number): Net_assignmentContext | Net_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Net_assignmentContext);
		} else {
			return this.getRuleContext(i, Net_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_net_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_net_assignments) {
			listener.enterList_of_net_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_net_assignments) {
			listener.exitList_of_net_assignments(this);
		}
	}
}


export class List_of_variable_assignmentsContext extends ParserRuleContext {
	public variable_assignment(): Variable_assignmentContext[];
	public variable_assignment(i: number): Variable_assignmentContext;
	public variable_assignment(i?: number): Variable_assignmentContext | Variable_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_assignmentContext);
		} else {
			return this.getRuleContext(i, Variable_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_variable_assignments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_variable_assignments) {
			listener.enterList_of_variable_assignments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_variable_assignments) {
			listener.exitList_of_variable_assignments(this);
		}
	}
}


export class Net_aliasContext extends ParserRuleContext {
	public ALIAS(): TerminalNode { return this.getToken(SystemVerilogParser.ALIAS, 0); }
	public net_lvalue(): Net_lvalueContext[];
	public net_lvalue(i: number): Net_lvalueContext;
	public net_lvalue(i?: number): Net_lvalueContext | Net_lvalueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Net_lvalueContext);
		} else {
			return this.getRuleContext(i, Net_lvalueContext);
		}
	}
	public EQ(): TerminalNode[];
	public EQ(i: number): TerminalNode;
	public EQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.EQ);
		} else {
			return this.getToken(SystemVerilogParser.EQ, i);
		}
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_alias; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_alias) {
			listener.enterNet_alias(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_alias) {
			listener.exitNet_alias(this);
		}
	}
}


export class Net_assignmentContext extends ParserRuleContext {
	public net_lvalue(): Net_lvalueContext {
		return this.getRuleContext(0, Net_lvalueContext);
	}
	public EQ(): TerminalNode { return this.getToken(SystemVerilogParser.EQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_assignment) {
			listener.enterNet_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_assignment) {
			listener.exitNet_assignment(this);
		}
	}
}


export class Initial_constructContext extends ParserRuleContext {
	public INITIAL(): TerminalNode { return this.getToken(SystemVerilogParser.INITIAL, 0); }
	public statement_or_null(): Statement_or_nullContext {
		return this.getRuleContext(0, Statement_or_nullContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_initial_construct; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInitial_construct) {
			listener.enterInitial_construct(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInitial_construct) {
			listener.exitInitial_construct(this);
		}
	}
}


export class Always_constructContext extends ParserRuleContext {
	public ALWAYS_KEYWORD(): TerminalNode { return this.getToken(SystemVerilogParser.ALWAYS_KEYWORD, 0); }
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_always_construct; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterAlways_construct) {
			listener.enterAlways_construct(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitAlways_construct) {
			listener.exitAlways_construct(this);
		}
	}
}


export class Final_constructContext extends ParserRuleContext {
	public FINAL(): TerminalNode { return this.getToken(SystemVerilogParser.FINAL, 0); }
	public function_statement(): Function_statementContext {
		return this.getRuleContext(0, Function_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_final_construct; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFinal_construct) {
			listener.enterFinal_construct(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFinal_construct) {
			listener.exitFinal_construct(this);
		}
	}
}


export class Blocking_assignmentContext extends ParserRuleContext {
	public variable_lvalue(): Variable_lvalueContext | undefined {
		return this.tryGetRuleContext(0, Variable_lvalueContext);
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	public delay_or_event_control(): Delay_or_event_controlContext | undefined {
		return this.tryGetRuleContext(0, Delay_or_event_controlContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public non_range_variable_lvalue(): Non_range_variable_lvalueContext | undefined {
		return this.tryGetRuleContext(0, Non_range_variable_lvalueContext);
	}
	public dynamic_array_new(): Dynamic_array_newContext | undefined {
		return this.tryGetRuleContext(0, Dynamic_array_newContext);
	}
	public hier_ident(): Hier_identContext | undefined {
		return this.tryGetRuleContext(0, Hier_identContext);
	}
	public select(): SelectContext | undefined {
		return this.tryGetRuleContext(0, SelectContext);
	}
	public class_new(): Class_newContext | undefined {
		return this.tryGetRuleContext(0, Class_newContext);
	}
	public implicit_class_handle(): Implicit_class_handleContext | undefined {
		return this.tryGetRuleContext(0, Implicit_class_handleContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	public operator_assignment(): Operator_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Operator_assignmentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_blocking_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterBlocking_assignment) {
			listener.enterBlocking_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitBlocking_assignment) {
			listener.exitBlocking_assignment(this);
		}
	}
}


export class Operator_assignmentContext extends ParserRuleContext {
	public variable_lvalue(): Variable_lvalueContext {
		return this.getRuleContext(0, Variable_lvalueContext);
	}
	public assignment_operator(): Assignment_operatorContext {
		return this.getRuleContext(0, Assignment_operatorContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_operator_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterOperator_assignment) {
			listener.enterOperator_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitOperator_assignment) {
			listener.exitOperator_assignment(this);
		}
	}
}


export class Assignment_operatorContext extends ParserRuleContext {
	public LTLTLTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LTLTLTEQ, 0); }
	public GTGTGTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.GTGTGTEQ, 0); }
	public LTLTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LTLTEQ, 0); }
	public GTGTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.GTGTEQ, 0); }
	public PLUSEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PLUSEQ, 0); }
	public MINUSEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSEQ, 0); }
	public MULTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MULTEQ, 0); }
	public DIVEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DIVEQ, 0); }
	public MODEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MODEQ, 0); }
	public ANDEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ANDEQ, 0); }
	public OREQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OREQ, 0); }
	public XOREQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XOREQ, 0); }
	public EQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQ, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_assignment_operator; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterAssignment_operator) {
			listener.enterAssignment_operator(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitAssignment_operator) {
			listener.exitAssignment_operator(this);
		}
	}
}


export class Nonblocking_assignmentContext extends ParserRuleContext {
	public variable_lvalue(): Variable_lvalueContext {
		return this.getRuleContext(0, Variable_lvalueContext);
	}
	public LTEQ(): TerminalNode { return this.getToken(SystemVerilogParser.LTEQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public delay_or_event_control(): Delay_or_event_controlContext | undefined {
		return this.tryGetRuleContext(0, Delay_or_event_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_nonblocking_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNonblocking_assignment) {
			listener.enterNonblocking_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNonblocking_assignment) {
			listener.exitNonblocking_assignment(this);
		}
	}
}


export class Procedural_continuous_assignmentContext extends ParserRuleContext {
	public ASSIGN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ASSIGN, 0); }
	public variable_assignment(): Variable_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Variable_assignmentContext);
	}
	public DEASSIGN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DEASSIGN, 0); }
	public variable_lvalue(): Variable_lvalueContext | undefined {
		return this.tryGetRuleContext(0, Variable_lvalueContext);
	}
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FORCE, 0); }
	public net_assignment(): Net_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Net_assignmentContext);
	}
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.RELEASE, 0); }
	public net_lvalue(): Net_lvalueContext | undefined {
		return this.tryGetRuleContext(0, Net_lvalueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_procedural_continuous_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterProcedural_continuous_assignment) {
			listener.enterProcedural_continuous_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitProcedural_continuous_assignment) {
			listener.exitProcedural_continuous_assignment(this);
		}
	}
}


export class Variable_assignmentContext extends ParserRuleContext {
	public variable_lvalue(): Variable_lvalueContext {
		return this.getRuleContext(0, Variable_lvalueContext);
	}
	public EQ(): TerminalNode { return this.getToken(SystemVerilogParser.EQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_variable_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterVariable_assignment) {
			listener.enterVariable_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitVariable_assignment) {
			listener.exitVariable_assignment(this);
		}
	}
}


export class Action_blockContext extends ParserRuleContext {
	public statement_or_null(): Statement_or_nullContext {
		return this.getRuleContext(0, Statement_or_nullContext);
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ELSE, 0); }
	public statement(): StatementContext | undefined {
		return this.tryGetRuleContext(0, StatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_action_block; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterAction_block) {
			listener.enterAction_block(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitAction_block) {
			listener.exitAction_block(this);
		}
	}
}


export class Seq_blockContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(SystemVerilogParser.BEGIN, 0); }
	public END(): TerminalNode { return this.getToken(SystemVerilogParser.END, 0); }
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COLON);
		} else {
			return this.getToken(SystemVerilogParser.COLON, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public block_item_declaration(): Block_item_declarationContext[];
	public block_item_declaration(i: number): Block_item_declarationContext;
	public block_item_declaration(i?: number): Block_item_declarationContext | Block_item_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Block_item_declarationContext);
		} else {
			return this.getRuleContext(i, Block_item_declarationContext);
		}
	}
	public statement_or_null(): Statement_or_nullContext[];
	public statement_or_null(i: number): Statement_or_nullContext;
	public statement_or_null(i?: number): Statement_or_nullContext | Statement_or_nullContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Statement_or_nullContext);
		} else {
			return this.getRuleContext(i, Statement_or_nullContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_seq_block; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSeq_block) {
			listener.enterSeq_block(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSeq_block) {
			listener.exitSeq_block(this);
		}
	}
}


export class Statement_or_nullContext extends ParserRuleContext {
	public statement(): StatementContext | undefined {
		return this.tryGetRuleContext(0, StatementContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_statement_or_null; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterStatement_or_null) {
			listener.enterStatement_or_null(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitStatement_or_null) {
			listener.exitStatement_or_null(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public statement_item(): Statement_itemContext {
		return this.getRuleContext(0, Statement_itemContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
}


export class Statement_itemContext extends ParserRuleContext {
	public seq_block(): Seq_blockContext | undefined {
		return this.tryGetRuleContext(0, Seq_blockContext);
	}
	public loop_statement(): Loop_statementContext | undefined {
		return this.tryGetRuleContext(0, Loop_statementContext);
	}
	public jump_statement(): Jump_statementContext | undefined {
		return this.tryGetRuleContext(0, Jump_statementContext);
	}
	public case_statement(): Case_statementContext | undefined {
		return this.tryGetRuleContext(0, Case_statementContext);
	}
	public blocking_assignment(): Blocking_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Blocking_assignmentContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public nonblocking_assignment(): Nonblocking_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Nonblocking_assignmentContext);
	}
	public procedural_continuous_assignment(): Procedural_continuous_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Procedural_continuous_assignmentContext);
	}
	public conditional_statement(): Conditional_statementContext | undefined {
		return this.tryGetRuleContext(0, Conditional_statementContext);
	}
	public inc_or_dec_expression(): Inc_or_dec_expressionContext | undefined {
		return this.tryGetRuleContext(0, Inc_or_dec_expressionContext);
	}
	public subroutine_call_statement(): Subroutine_call_statementContext | undefined {
		return this.tryGetRuleContext(0, Subroutine_call_statementContext);
	}
	public disable_statement(): Disable_statementContext | undefined {
		return this.tryGetRuleContext(0, Disable_statementContext);
	}
	public event_trigger(): Event_triggerContext | undefined {
		return this.tryGetRuleContext(0, Event_triggerContext);
	}
	public procedural_timing_control_statement(): Procedural_timing_control_statementContext | undefined {
		return this.tryGetRuleContext(0, Procedural_timing_control_statementContext);
	}
	public wait_statement(): Wait_statementContext | undefined {
		return this.tryGetRuleContext(0, Wait_statementContext);
	}
	public procedural_assertion_statement(): Procedural_assertion_statementContext | undefined {
		return this.tryGetRuleContext(0, Procedural_assertion_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_statement_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterStatement_item) {
			listener.enterStatement_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitStatement_item) {
			listener.exitStatement_item(this);
		}
	}
}


export class Function_statementContext extends ParserRuleContext {
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_function_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_statement) {
			listener.enterFunction_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_statement) {
			listener.exitFunction_statement(this);
		}
	}
}


export class Function_statement_or_nullContext extends ParserRuleContext {
	public function_statement(): Function_statementContext | undefined {
		return this.tryGetRuleContext(0, Function_statementContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_function_statement_or_null; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_statement_or_null) {
			listener.enterFunction_statement_or_null(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_statement_or_null) {
			listener.exitFunction_statement_or_null(this);
		}
	}
}


export class Variable_identifier_listContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_variable_identifier_list; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterVariable_identifier_list) {
			listener.enterVariable_identifier_list(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitVariable_identifier_list) {
			listener.exitVariable_identifier_list(this);
		}
	}
}


export class Procedural_timing_control_statementContext extends ParserRuleContext {
	public procedural_timing_control(): Procedural_timing_controlContext {
		return this.getRuleContext(0, Procedural_timing_controlContext);
	}
	public statement_or_null(): Statement_or_nullContext {
		return this.getRuleContext(0, Statement_or_nullContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_procedural_timing_control_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterProcedural_timing_control_statement) {
			listener.enterProcedural_timing_control_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitProcedural_timing_control_statement) {
			listener.exitProcedural_timing_control_statement(this);
		}
	}
}


export class Delay_or_event_controlContext extends ParserRuleContext {
	public delay_control(): Delay_controlContext | undefined {
		return this.tryGetRuleContext(0, Delay_controlContext);
	}
	public event_control(): Event_controlContext | undefined {
		return this.tryGetRuleContext(0, Event_controlContext);
	}
	public REPEAT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.REPEAT, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_delay_or_event_control; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDelay_or_event_control) {
			listener.enterDelay_or_event_control(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDelay_or_event_control) {
			listener.exitDelay_or_event_control(this);
		}
	}
}


export class Delay_controlContext extends ParserRuleContext {
	public SHP(): TerminalNode { return this.getToken(SystemVerilogParser.SHP, 0); }
	public delay_value(): Delay_valueContext | undefined {
		return this.tryGetRuleContext(0, Delay_valueContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public mintypmax_expression(): Mintypmax_expressionContext | undefined {
		return this.tryGetRuleContext(0, Mintypmax_expressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_delay_control; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDelay_control) {
			listener.enterDelay_control(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDelay_control) {
			listener.exitDelay_control(this);
		}
	}
}


export class Event_controlContext extends ParserRuleContext {
	public AT(): TerminalNode { return this.getToken(SystemVerilogParser.AT, 0); }
	public hier_ident(): Hier_identContext | undefined {
		return this.tryGetRuleContext(0, Hier_identContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public event_expression(): Event_expressionContext | undefined {
		return this.tryGetRuleContext(0, Event_expressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public MULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MULT, 0); }
	public ps_or_hier_ident(): Ps_or_hier_identContext | undefined {
		return this.tryGetRuleContext(0, Ps_or_hier_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_event_control; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterEvent_control) {
			listener.enterEvent_control(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitEvent_control) {
			listener.exitEvent_control(this);
		}
	}
}


export class Event_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public edge_ident(): Edge_identContext | undefined {
		return this.tryGetRuleContext(0, Edge_identContext);
	}
	public IFF(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.IFF, 0); }
	public event_expression(): Event_expressionContext[];
	public event_expression(i: number): Event_expressionContext;
	public event_expression(i?: number): Event_expressionContext | Event_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Event_expressionContext);
		} else {
			return this.getRuleContext(i, Event_expressionContext);
		}
	}
	public ARR_OR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ARR_OR, 0); }
	public COM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COM, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_event_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterEvent_expression) {
			listener.enterEvent_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitEvent_expression) {
			listener.exitEvent_expression(this);
		}
	}
}


export class Procedural_timing_controlContext extends ParserRuleContext {
	public delay_control(): Delay_controlContext | undefined {
		return this.tryGetRuleContext(0, Delay_controlContext);
	}
	public event_control(): Event_controlContext | undefined {
		return this.tryGetRuleContext(0, Event_controlContext);
	}
	public cycle_delay(): Cycle_delayContext | undefined {
		return this.tryGetRuleContext(0, Cycle_delayContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_procedural_timing_control; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterProcedural_timing_control) {
			listener.enterProcedural_timing_control(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitProcedural_timing_control) {
			listener.exitProcedural_timing_control(this);
		}
	}
}


export class Jump_statementContext extends ParserRuleContext {
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.RETURN, 0); }
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public BREAK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.BREAK, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_jump_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterJump_statement) {
			listener.enterJump_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitJump_statement) {
			listener.exitJump_statement(this);
		}
	}
}


export class Wait_statementContext extends ParserRuleContext {
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.WAIT, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public statement_or_null(): Statement_or_nullContext | undefined {
		return this.tryGetRuleContext(0, Statement_or_nullContext);
	}
	public FORK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FORK, 0); }
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public WAITORDER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.WAITORDER, 0); }
	public hier_ident(): Hier_identContext[];
	public hier_ident(i: number): Hier_identContext;
	public hier_ident(i?: number): Hier_identContext | Hier_identContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Hier_identContext);
		} else {
			return this.getRuleContext(i, Hier_identContext);
		}
	}
	public action_block(): Action_blockContext | undefined {
		return this.tryGetRuleContext(0, Action_blockContext);
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_wait_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterWait_statement) {
			listener.enterWait_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitWait_statement) {
			listener.exitWait_statement(this);
		}
	}
}


export class Event_triggerContext extends ParserRuleContext {
	public MINUSGT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSGT, 0); }
	public hier_ident(): Hier_identContext {
		return this.getRuleContext(0, Hier_identContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public MINUSGTGT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSGTGT, 0); }
	public delay_or_event_control(): Delay_or_event_controlContext | undefined {
		return this.tryGetRuleContext(0, Delay_or_event_controlContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_event_trigger; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterEvent_trigger) {
			listener.enterEvent_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitEvent_trigger) {
			listener.exitEvent_trigger(this);
		}
	}
}


export class Disable_statementContext extends ParserRuleContext {
	public DISABLE(): TerminalNode { return this.getToken(SystemVerilogParser.DISABLE, 0); }
	public hier_ident(): Hier_identContext | undefined {
		return this.tryGetRuleContext(0, Hier_identContext);
	}
	public SEMIC(): TerminalNode { return this.getToken(SystemVerilogParser.SEMIC, 0); }
	public FORK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_disable_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDisable_statement) {
			listener.enterDisable_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDisable_statement) {
			listener.exitDisable_statement(this);
		}
	}
}


export class Conditional_statementContext extends ParserRuleContext {
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.IF);
		} else {
			return this.getToken(SystemVerilogParser.IF, i);
		}
	}
	public OP_PRN(): TerminalNode[];
	public OP_PRN(i: number): TerminalNode;
	public OP_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.OP_PRN);
		} else {
			return this.getToken(SystemVerilogParser.OP_PRN, i);
		}
	}
	public cond_predicate(): Cond_predicateContext[];
	public cond_predicate(i: number): Cond_predicateContext;
	public cond_predicate(i?: number): Cond_predicateContext | Cond_predicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Cond_predicateContext);
		} else {
			return this.getRuleContext(i, Cond_predicateContext);
		}
	}
	public CL_PRN(): TerminalNode[];
	public CL_PRN(i: number): TerminalNode;
	public CL_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.CL_PRN);
		} else {
			return this.getToken(SystemVerilogParser.CL_PRN, i);
		}
	}
	public statement_or_null(): Statement_or_nullContext[];
	public statement_or_null(i: number): Statement_or_nullContext;
	public statement_or_null(i?: number): Statement_or_nullContext | Statement_or_nullContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Statement_or_nullContext);
		} else {
			return this.getRuleContext(i, Statement_or_nullContext);
		}
	}
	public unique_priority(): Unique_priorityContext | undefined {
		return this.tryGetRuleContext(0, Unique_priorityContext);
	}
	public ELSE(): TerminalNode[];
	public ELSE(i: number): TerminalNode;
	public ELSE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.ELSE);
		} else {
			return this.getToken(SystemVerilogParser.ELSE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_conditional_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConditional_statement) {
			listener.enterConditional_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConditional_statement) {
			listener.exitConditional_statement(this);
		}
	}
}


export class Unique_priorityContext extends ParserRuleContext {
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNIQUE, 0); }
	public UNIQUE0(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNIQUE0, 0); }
	public PRIORITY(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_unique_priority; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterUnique_priority) {
			listener.enterUnique_priority(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitUnique_priority) {
			listener.exitUnique_priority(this);
		}
	}
}


export class Cond_predicateContext extends ParserRuleContext {
	public expression_or_cond_pattern(): Expression_or_cond_patternContext[];
	public expression_or_cond_pattern(i: number): Expression_or_cond_patternContext;
	public expression_or_cond_pattern(i?: number): Expression_or_cond_patternContext | Expression_or_cond_patternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression_or_cond_patternContext);
		} else {
			return this.getRuleContext(i, Expression_or_cond_patternContext);
		}
	}
	public ANDANDAND(): TerminalNode[];
	public ANDANDAND(i: number): TerminalNode;
	public ANDANDAND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.ANDANDAND);
		} else {
			return this.getToken(SystemVerilogParser.ANDANDAND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_cond_predicate; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCond_predicate) {
			listener.enterCond_predicate(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCond_predicate) {
			listener.exitCond_predicate(this);
		}
	}
}


export class Expression_or_cond_patternContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public cond_pattern(): Cond_patternContext | undefined {
		return this.tryGetRuleContext(0, Cond_patternContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_expression_or_cond_pattern; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterExpression_or_cond_pattern) {
			listener.enterExpression_or_cond_pattern(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitExpression_or_cond_pattern) {
			listener.exitExpression_or_cond_pattern(this);
		}
	}
}


export class Cond_patternContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public MATCHES(): TerminalNode { return this.getToken(SystemVerilogParser.MATCHES, 0); }
	public pattern(): PatternContext {
		return this.getRuleContext(0, PatternContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_cond_pattern; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCond_pattern) {
			listener.enterCond_pattern(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCond_pattern) {
			listener.exitCond_pattern(this);
		}
	}
}


export class Case_statementContext extends ParserRuleContext {
	public CASE_KEYWORD(): TerminalNode { return this.getToken(SystemVerilogParser.CASE_KEYWORD, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public case_expression(): Case_expressionContext {
		return this.getRuleContext(0, Case_expressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public case_item(): Case_itemContext[];
	public case_item(i: number): Case_itemContext;
	public case_item(i?: number): Case_itemContext | Case_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Case_itemContext);
		} else {
			return this.getRuleContext(i, Case_itemContext);
		}
	}
	public ENDCASE(): TerminalNode { return this.getToken(SystemVerilogParser.ENDCASE, 0); }
	public unique_priority(): Unique_priorityContext | undefined {
		return this.tryGetRuleContext(0, Unique_priorityContext);
	}
	public INSIDE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INSIDE, 0); }
	public case_inside_item(): Case_inside_itemContext[];
	public case_inside_item(i: number): Case_inside_itemContext;
	public case_inside_item(i?: number): Case_inside_itemContext | Case_inside_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Case_inside_itemContext);
		} else {
			return this.getRuleContext(i, Case_inside_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_case_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCase_statement) {
			listener.enterCase_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCase_statement) {
			listener.exitCase_statement(this);
		}
	}
}


export class Case_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_case_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCase_expression) {
			listener.enterCase_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCase_expression) {
			listener.exitCase_expression(this);
		}
	}
}


export class Case_itemContext extends ParserRuleContext {
	public case_item_expression(): Case_item_expressionContext[];
	public case_item_expression(i: number): Case_item_expressionContext;
	public case_item_expression(i?: number): Case_item_expressionContext | Case_item_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Case_item_expressionContext);
		} else {
			return this.getRuleContext(i, Case_item_expressionContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public statement_or_null(): Statement_or_nullContext {
		return this.getRuleContext(0, Statement_or_nullContext);
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_case_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCase_item) {
			listener.enterCase_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCase_item) {
			listener.exitCase_item(this);
		}
	}
}


export class Case_inside_itemContext extends ParserRuleContext {
	public open_range_list(): Open_range_listContext | undefined {
		return this.tryGetRuleContext(0, Open_range_listContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public statement_or_null(): Statement_or_nullContext {
		return this.getRuleContext(0, Statement_or_nullContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_case_inside_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCase_inside_item) {
			listener.enterCase_inside_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCase_inside_item) {
			listener.exitCase_inside_item(this);
		}
	}
}


export class Case_item_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_case_item_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCase_item_expression) {
			listener.enterCase_item_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCase_item_expression) {
			listener.exitCase_item_expression(this);
		}
	}
}


export class Open_range_listContext extends ParserRuleContext {
	public open_value_range(): Open_value_rangeContext[];
	public open_value_range(i: number): Open_value_rangeContext;
	public open_value_range(i?: number): Open_value_rangeContext | Open_value_rangeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Open_value_rangeContext);
		} else {
			return this.getRuleContext(i, Open_value_rangeContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_open_range_list; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterOpen_range_list) {
			listener.enterOpen_range_list(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitOpen_range_list) {
			listener.exitOpen_range_list(this);
		}
	}
}


export class Open_value_rangeContext extends ParserRuleContext {
	public value_range(): Value_rangeContext {
		return this.getRuleContext(0, Value_rangeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_open_value_range; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterOpen_value_range) {
			listener.enterOpen_value_range(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitOpen_value_range) {
			listener.exitOpen_value_range(this);
		}
	}
}


export class PatternContext extends ParserRuleContext {
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public FORALL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FORALL, 0); }
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	public TAGGED(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.TAGGED, 0); }
	public pattern(): PatternContext[];
	public pattern(i: number): PatternContext;
	public pattern(i?: number): PatternContext | PatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PatternContext);
		} else {
			return this.getRuleContext(i, PatternContext);
		}
	}
	public OP_PATTERN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PATTERN, 0); }
	public CL_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRC, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COLON);
		} else {
			return this.getToken(SystemVerilogParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pattern; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPattern) {
			listener.enterPattern(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPattern) {
			listener.exitPattern(this);
		}
	}
}


export class Loop_statementContext extends ParserRuleContext {
	public FOREVER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FOREVER, 0); }
	public statement_or_null(): Statement_or_nullContext | undefined {
		return this.tryGetRuleContext(0, Statement_or_nullContext);
	}
	public REPEAT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.REPEAT, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public WHILE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.WHILE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FOR, 0); }
	public SEMIC(): TerminalNode[];
	public SEMIC(i: number): TerminalNode;
	public SEMIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.SEMIC);
		} else {
			return this.getToken(SystemVerilogParser.SEMIC, i);
		}
	}
	public for_initialization(): For_initializationContext | undefined {
		return this.tryGetRuleContext(0, For_initializationContext);
	}
	public for_step(): For_stepContext | undefined {
		return this.tryGetRuleContext(0, For_stepContext);
	}
	public DO(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DO, 0); }
	public FOREACH(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FOREACH, 0); }
	public ps_or_hier_ident(): Ps_or_hier_identContext | undefined {
		return this.tryGetRuleContext(0, Ps_or_hier_identContext);
	}
	public OP_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRK, 0); }
	public loop_variables(): Loop_variablesContext | undefined {
		return this.tryGetRuleContext(0, Loop_variablesContext);
	}
	public CL_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRK, 0); }
	public statement(): StatementContext | undefined {
		return this.tryGetRuleContext(0, StatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_loop_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterLoop_statement) {
			listener.enterLoop_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitLoop_statement) {
			listener.exitLoop_statement(this);
		}
	}
}


export class For_initializationContext extends ParserRuleContext {
	public list_of_variable_assignments(): List_of_variable_assignmentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_variable_assignmentsContext);
	}
	public for_variable_declaration(): For_variable_declarationContext[];
	public for_variable_declaration(i: number): For_variable_declarationContext;
	public for_variable_declaration(i?: number): For_variable_declarationContext | For_variable_declarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(For_variable_declarationContext);
		} else {
			return this.getRuleContext(i, For_variable_declarationContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_for_initialization; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFor_initialization) {
			listener.enterFor_initialization(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFor_initialization) {
			listener.exitFor_initialization(this);
		}
	}
}


export class For_variable_declarationContext extends ParserRuleContext {
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public EQ(): TerminalNode[];
	public EQ(i: number): TerminalNode;
	public EQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.EQ);
		} else {
			return this.getToken(SystemVerilogParser.EQ, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public VAR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VAR, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_for_variable_declaration; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFor_variable_declaration) {
			listener.enterFor_variable_declaration(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFor_variable_declaration) {
			listener.exitFor_variable_declaration(this);
		}
	}
}


export class For_stepContext extends ParserRuleContext {
	public for_step_assignment(): For_step_assignmentContext[];
	public for_step_assignment(i: number): For_step_assignmentContext;
	public for_step_assignment(i?: number): For_step_assignmentContext | For_step_assignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(For_step_assignmentContext);
		} else {
			return this.getRuleContext(i, For_step_assignmentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_for_step; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFor_step) {
			listener.enterFor_step(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFor_step) {
			listener.exitFor_step(this);
		}
	}
}


export class For_step_assignmentContext extends ParserRuleContext {
	public operator_assignment(): Operator_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Operator_assignmentContext);
	}
	public inc_or_dec_expression(): Inc_or_dec_expressionContext | undefined {
		return this.tryGetRuleContext(0, Inc_or_dec_expressionContext);
	}
	public function_subroutine_call(): Function_subroutine_callContext | undefined {
		return this.tryGetRuleContext(0, Function_subroutine_callContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_for_step_assignment; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFor_step_assignment) {
			listener.enterFor_step_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFor_step_assignment) {
			listener.exitFor_step_assignment(this);
		}
	}
}


export class Loop_variablesContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_loop_variables; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterLoop_variables) {
			listener.enterLoop_variables(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitLoop_variables) {
			listener.exitLoop_variables(this);
		}
	}
}


export class Subroutine_call_statementContext extends ParserRuleContext {
	public subroutine_call(): Subroutine_callContext | undefined {
		return this.tryGetRuleContext(0, Subroutine_callContext);
	}
	public SEMIC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SEMIC, 0); }
	public VOID(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.VOID, 0); }
	public OP_CAST(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_CAST, 0); }
	public function_subroutine_call(): Function_subroutine_callContext | undefined {
		return this.tryGetRuleContext(0, Function_subroutine_callContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_subroutine_call_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSubroutine_call_statement) {
			listener.enterSubroutine_call_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSubroutine_call_statement) {
			listener.exitSubroutine_call_statement(this);
		}
	}
}


export class Assertion_itemContext extends ParserRuleContext {
	public concurrent_assertion_item(): Concurrent_assertion_itemContext | undefined {
		return this.tryGetRuleContext(0, Concurrent_assertion_itemContext);
	}
	public deferred_immediate_assertion_item(): Deferred_immediate_assertion_itemContext | undefined {
		return this.tryGetRuleContext(0, Deferred_immediate_assertion_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_assertion_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterAssertion_item) {
			listener.enterAssertion_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitAssertion_item) {
			listener.exitAssertion_item(this);
		}
	}
}


export class Deferred_immediate_assertion_itemContext extends ParserRuleContext {
	public deferred_immediate_assertion_statement(): Deferred_immediate_assertion_statementContext {
		return this.getRuleContext(0, Deferred_immediate_assertion_statementContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_deferred_immediate_assertion_item; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDeferred_immediate_assertion_item) {
			listener.enterDeferred_immediate_assertion_item(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDeferred_immediate_assertion_item) {
			listener.exitDeferred_immediate_assertion_item(this);
		}
	}
}


export class Procedural_assertion_statementContext extends ParserRuleContext {
	public immediate_assertion_statement(): Immediate_assertion_statementContext {
		return this.getRuleContext(0, Immediate_assertion_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_procedural_assertion_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterProcedural_assertion_statement) {
			listener.enterProcedural_assertion_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitProcedural_assertion_statement) {
			listener.exitProcedural_assertion_statement(this);
		}
	}
}


export class Immediate_assertion_statementContext extends ParserRuleContext {
	public simple_immediate_assertion_statement(): Simple_immediate_assertion_statementContext | undefined {
		return this.tryGetRuleContext(0, Simple_immediate_assertion_statementContext);
	}
	public deferred_immediate_assertion_statement(): Deferred_immediate_assertion_statementContext | undefined {
		return this.tryGetRuleContext(0, Deferred_immediate_assertion_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_immediate_assertion_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterImmediate_assertion_statement) {
			listener.enterImmediate_assertion_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitImmediate_assertion_statement) {
			listener.exitImmediate_assertion_statement(this);
		}
	}
}


export class Simple_immediate_assertion_statementContext extends ParserRuleContext {
	public simple_immediate_assert_statement(): Simple_immediate_assert_statementContext | undefined {
		return this.tryGetRuleContext(0, Simple_immediate_assert_statementContext);
	}
	public simple_immediate_assume_statement(): Simple_immediate_assume_statementContext | undefined {
		return this.tryGetRuleContext(0, Simple_immediate_assume_statementContext);
	}
	public simple_immediate_cover_statement(): Simple_immediate_cover_statementContext | undefined {
		return this.tryGetRuleContext(0, Simple_immediate_cover_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_simple_immediate_assertion_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSimple_immediate_assertion_statement) {
			listener.enterSimple_immediate_assertion_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSimple_immediate_assertion_statement) {
			listener.exitSimple_immediate_assertion_statement(this);
		}
	}
}


export class Simple_immediate_assert_statementContext extends ParserRuleContext {
	public ASSERT(): TerminalNode { return this.getToken(SystemVerilogParser.ASSERT, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public action_block(): Action_blockContext {
		return this.getRuleContext(0, Action_blockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_simple_immediate_assert_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSimple_immediate_assert_statement) {
			listener.enterSimple_immediate_assert_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSimple_immediate_assert_statement) {
			listener.exitSimple_immediate_assert_statement(this);
		}
	}
}


export class Simple_immediate_assume_statementContext extends ParserRuleContext {
	public ASSUME(): TerminalNode { return this.getToken(SystemVerilogParser.ASSUME, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public action_block(): Action_blockContext {
		return this.getRuleContext(0, Action_blockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_simple_immediate_assume_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSimple_immediate_assume_statement) {
			listener.enterSimple_immediate_assume_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSimple_immediate_assume_statement) {
			listener.exitSimple_immediate_assume_statement(this);
		}
	}
}


export class Simple_immediate_cover_statementContext extends ParserRuleContext {
	public COVER(): TerminalNode { return this.getToken(SystemVerilogParser.COVER, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public statement_or_null(): Statement_or_nullContext {
		return this.getRuleContext(0, Statement_or_nullContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_simple_immediate_cover_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSimple_immediate_cover_statement) {
			listener.enterSimple_immediate_cover_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSimple_immediate_cover_statement) {
			listener.exitSimple_immediate_cover_statement(this);
		}
	}
}


export class Deferred_immediate_assertion_statementContext extends ParserRuleContext {
	public deferred_immediate_assert_statement(): Deferred_immediate_assert_statementContext | undefined {
		return this.tryGetRuleContext(0, Deferred_immediate_assert_statementContext);
	}
	public deferred_immediate_assume_statement(): Deferred_immediate_assume_statementContext | undefined {
		return this.tryGetRuleContext(0, Deferred_immediate_assume_statementContext);
	}
	public deferred_immediate_cover_statement(): Deferred_immediate_cover_statementContext | undefined {
		return this.tryGetRuleContext(0, Deferred_immediate_cover_statementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_deferred_immediate_assertion_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDeferred_immediate_assertion_statement) {
			listener.enterDeferred_immediate_assertion_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDeferred_immediate_assertion_statement) {
			listener.exitDeferred_immediate_assertion_statement(this);
		}
	}
}


export class Deferred_immediate_assert_statementContext extends ParserRuleContext {
	public ASSERT(): TerminalNode { return this.getToken(SystemVerilogParser.ASSERT, 0); }
	public SHPZERO(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SHPZERO, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public action_block(): Action_blockContext {
		return this.getRuleContext(0, Action_blockContext);
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_deferred_immediate_assert_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDeferred_immediate_assert_statement) {
			listener.enterDeferred_immediate_assert_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDeferred_immediate_assert_statement) {
			listener.exitDeferred_immediate_assert_statement(this);
		}
	}
}


export class Deferred_immediate_assume_statementContext extends ParserRuleContext {
	public ASSUME(): TerminalNode { return this.getToken(SystemVerilogParser.ASSUME, 0); }
	public SHPZERO(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SHPZERO, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public action_block(): Action_blockContext {
		return this.getRuleContext(0, Action_blockContext);
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_deferred_immediate_assume_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDeferred_immediate_assume_statement) {
			listener.enterDeferred_immediate_assume_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDeferred_immediate_assume_statement) {
			listener.exitDeferred_immediate_assume_statement(this);
		}
	}
}


export class Deferred_immediate_cover_statementContext extends ParserRuleContext {
	public COVER(): TerminalNode { return this.getToken(SystemVerilogParser.COVER, 0); }
	public SHPZERO(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SHPZERO, 0); }
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	public statement_or_null(): Statement_or_nullContext {
		return this.getRuleContext(0, Statement_or_nullContext);
	}
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_deferred_immediate_cover_statement; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDeferred_immediate_cover_statement) {
			listener.enterDeferred_immediate_cover_statement(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDeferred_immediate_cover_statement) {
			listener.exitDeferred_immediate_cover_statement(this);
		}
	}
}


export class Cycle_delayContext extends ParserRuleContext {
	public SHPSHP(): TerminalNode { return this.getToken(SystemVerilogParser.SHPSHP, 0); }
	public integral_number(): Integral_numberContext | undefined {
		return this.tryGetRuleContext(0, Integral_numberContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_cycle_delay; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCycle_delay) {
			listener.enterCycle_delay(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCycle_delay) {
			listener.exitCycle_delay(this);
		}
	}
}


export class Edge_identContext extends ParserRuleContext {
	public POSEDGE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.POSEDGE, 0); }
	public NEGEDGE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NEGEDGE, 0); }
	public EDGE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EDGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_edge_ident; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterEdge_ident) {
			listener.enterEdge_ident(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitEdge_ident) {
			listener.exitEdge_ident(this);
		}
	}
}


export class ConcatenationContext extends ParserRuleContext {
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_concatenation; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConcatenation) {
			listener.enterConcatenation(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConcatenation) {
			listener.exitConcatenation(this);
		}
	}
}


export class Constant_concatenationContext extends ParserRuleContext {
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_concatenation; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_concatenation) {
			listener.enterConstant_concatenation(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_concatenation) {
			listener.exitConstant_concatenation(this);
		}
	}
}


export class Constant_multiple_concatenationContext extends ParserRuleContext {
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public constant_expression(): Constant_expressionContext {
		return this.getRuleContext(0, Constant_expressionContext);
	}
	public constant_concatenation(): Constant_concatenationContext {
		return this.getRuleContext(0, Constant_concatenationContext);
	}
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_multiple_concatenation; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_multiple_concatenation) {
			listener.enterConstant_multiple_concatenation(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_multiple_concatenation) {
			listener.exitConstant_multiple_concatenation(this);
		}
	}
}


export class Multiple_concatenationContext extends ParserRuleContext {
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public concatenation(): ConcatenationContext {
		return this.getRuleContext(0, ConcatenationContext);
	}
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_multiple_concatenation; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterMultiple_concatenation) {
			listener.enterMultiple_concatenation(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitMultiple_concatenation) {
			listener.exitMultiple_concatenation(this);
		}
	}
}


export class Array_range_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public PLUSCOLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PLUSCOLON, 0); }
	public MINUSCOLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSCOLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_array_range_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterArray_range_expression) {
			listener.enterArray_range_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitArray_range_expression) {
			listener.exitArray_range_expression(this);
		}
	}
}


export class Empty_queueContext extends ParserRuleContext {
	public OP_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.OP_BRC, 0); }
	public CL_BRC(): TerminalNode { return this.getToken(SystemVerilogParser.CL_BRC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_empty_queue; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterEmpty_queue) {
			listener.enterEmpty_queue(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitEmpty_queue) {
			listener.exitEmpty_queue(this);
		}
	}
}


export class Constant_function_callContext extends ParserRuleContext {
	public function_subroutine_call(): Function_subroutine_callContext {
		return this.getRuleContext(0, Function_subroutine_callContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_function_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_function_call) {
			listener.enterConstant_function_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_function_call) {
			listener.exitConstant_function_call(this);
		}
	}
}


export class Tf_callContext extends ParserRuleContext {
	public ps_or_hier_ident(): Ps_or_hier_identContext {
		return this.getRuleContext(0, Ps_or_hier_identContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_tf_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTf_call) {
			listener.enterTf_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTf_call) {
			listener.exitTf_call(this);
		}
	}
}


export class System_tf_callContext extends ParserRuleContext {
	public SYSTEM_TF_IDENT(): TerminalNode { return this.getToken(SystemVerilogParser.SYSTEM_TF_IDENT, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public COM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COM, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_system_tf_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSystem_tf_call) {
			listener.enterSystem_tf_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSystem_tf_call) {
			listener.exitSystem_tf_call(this);
		}
	}
}


export class Subroutine_callContext extends ParserRuleContext {
	public tf_call(): Tf_callContext | undefined {
		return this.tryGetRuleContext(0, Tf_callContext);
	}
	public system_tf_call(): System_tf_callContext | undefined {
		return this.tryGetRuleContext(0, System_tf_callContext);
	}
	public method_call(): Method_callContext | undefined {
		return this.tryGetRuleContext(0, Method_callContext);
	}
	public randomize_call(): Randomize_callContext | undefined {
		return this.tryGetRuleContext(0, Randomize_callContext);
	}
	public SCOPE_STD(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SCOPE_STD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_subroutine_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSubroutine_call) {
			listener.enterSubroutine_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSubroutine_call) {
			listener.exitSubroutine_call(this);
		}
	}
}


export class Function_subroutine_callContext extends ParserRuleContext {
	public subroutine_call(): Subroutine_callContext {
		return this.getRuleContext(0, Subroutine_callContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_function_subroutine_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterFunction_subroutine_call) {
			listener.enterFunction_subroutine_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitFunction_subroutine_call) {
			listener.exitFunction_subroutine_call(this);
		}
	}
}


export class Arg_commaContext extends ParserRuleContext {
	public COM(): TerminalNode { return this.getToken(SystemVerilogParser.COM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_arg_comma; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterArg_comma) {
			listener.enterArg_comma(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitArg_comma) {
			listener.exitArg_comma(this);
		}
	}
}


export class List_of_argumentsContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public arg_comma(): Arg_commaContext[];
	public arg_comma(i: number): Arg_commaContext;
	public arg_comma(i?: number): Arg_commaContext | Arg_commaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Arg_commaContext);
		} else {
			return this.getRuleContext(i, Arg_commaContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.DOT);
		} else {
			return this.getToken(SystemVerilogParser.DOT, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public OP_PRN(): TerminalNode[];
	public OP_PRN(i: number): TerminalNode;
	public OP_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.OP_PRN);
		} else {
			return this.getToken(SystemVerilogParser.OP_PRN, i);
		}
	}
	public CL_PRN(): TerminalNode[];
	public CL_PRN(i: number): TerminalNode;
	public CL_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.CL_PRN);
		} else {
			return this.getToken(SystemVerilogParser.CL_PRN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_list_of_arguments; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterList_of_arguments) {
			listener.enterList_of_arguments(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitList_of_arguments) {
			listener.exitList_of_arguments(this);
		}
	}
}


export class Method_callContext extends ParserRuleContext {
	public method_call_root(): Method_call_rootContext {
		return this.getRuleContext(0, Method_call_rootContext);
	}
	public DOT(): TerminalNode { return this.getToken(SystemVerilogParser.DOT, 0); }
	public method_call_body(): Method_call_bodyContext {
		return this.getRuleContext(0, Method_call_bodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_method_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterMethod_call) {
			listener.enterMethod_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitMethod_call) {
			listener.exitMethod_call(this);
		}
	}
}


export class Method_call_rootContext extends ParserRuleContext {
	public hier_ident(): Hier_identContext | undefined {
		return this.tryGetRuleContext(0, Hier_identContext);
	}
	public select(): SelectContext | undefined {
		return this.tryGetRuleContext(0, SelectContext);
	}
	public class_qualifier(): Class_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Class_qualifierContext);
	}
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	public implicit_class_handle(): Implicit_class_handleContext | undefined {
		return this.tryGetRuleContext(0, Implicit_class_handleContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_method_call_root; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterMethod_call_root) {
			listener.enterMethod_call_root(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitMethod_call_root) {
			listener.exitMethod_call_root(this);
		}
	}
}


export class Method_call_bodyContext extends ParserRuleContext {
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public built_in_method_call(): Built_in_method_callContext | undefined {
		return this.tryGetRuleContext(0, Built_in_method_callContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_method_call_body; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterMethod_call_body) {
			listener.enterMethod_call_body(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitMethod_call_body) {
			listener.exitMethod_call_body(this);
		}
	}
}


export class Built_in_method_callContext extends ParserRuleContext {
	public array_manipulation_call(): Array_manipulation_callContext | undefined {
		return this.tryGetRuleContext(0, Array_manipulation_callContext);
	}
	public randomize_call(): Randomize_callContext | undefined {
		return this.tryGetRuleContext(0, Randomize_callContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_built_in_method_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterBuilt_in_method_call) {
			listener.enterBuilt_in_method_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitBuilt_in_method_call) {
			listener.exitBuilt_in_method_call(this);
		}
	}
}


export class Array_manipulation_callContext extends ParserRuleContext {
	public array_method_name(): Array_method_nameContext {
		return this.getRuleContext(0, Array_method_nameContext);
	}
	public OP_PRN(): TerminalNode[];
	public OP_PRN(i: number): TerminalNode;
	public OP_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.OP_PRN);
		} else {
			return this.getToken(SystemVerilogParser.OP_PRN, i);
		}
	}
	public list_of_arguments(): List_of_argumentsContext | undefined {
		return this.tryGetRuleContext(0, List_of_argumentsContext);
	}
	public CL_PRN(): TerminalNode[];
	public CL_PRN(i: number): TerminalNode;
	public CL_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.CL_PRN);
		} else {
			return this.getToken(SystemVerilogParser.CL_PRN, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.WITH, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_array_manipulation_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterArray_manipulation_call) {
			listener.enterArray_manipulation_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitArray_manipulation_call) {
			listener.exitArray_manipulation_call(this);
		}
	}
}


export class Randomize_callContext extends ParserRuleContext {
	public RANDOMIZE(): TerminalNode { return this.getToken(SystemVerilogParser.RANDOMIZE, 0); }
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public variable_identifier_list(): Variable_identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Variable_identifier_listContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_randomize_call; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterRandomize_call) {
			listener.enterRandomize_call(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitRandomize_call) {
			listener.exitRandomize_call(this);
		}
	}
}


export class Array_method_nameContext extends ParserRuleContext {
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNIQUE, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OR, 0); }
	public XOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_array_method_name; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterArray_method_name) {
			listener.enterArray_method_name(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitArray_method_name) {
			listener.exitArray_method_name(this);
		}
	}
}


export class Inc_or_dec_expressionContext extends ParserRuleContext {
	public inc_or_dec_operator(): Inc_or_dec_operatorContext {
		return this.getRuleContext(0, Inc_or_dec_operatorContext);
	}
	public variable_lvalue(): Variable_lvalueContext {
		return this.getRuleContext(0, Variable_lvalueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_inc_or_dec_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInc_or_dec_expression) {
			listener.enterInc_or_dec_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInc_or_dec_expression) {
			listener.exitInc_or_dec_expression(this);
		}
	}
}


export class Constant_expressionContext extends ParserRuleContext {
	public constant_primary(): Constant_primaryContext | undefined {
		return this.tryGetRuleContext(0, Constant_primaryContext);
	}
	public unary_operator(): Unary_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_operatorContext);
	}
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	public binary_operator(): Binary_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_operatorContext);
	}
	public QUES(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.QUES, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_expression) {
			listener.enterConstant_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_expression) {
			listener.exitConstant_expression(this);
		}
	}
}


export class Constant_mintypmax_expressionContext extends ParserRuleContext {
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COLON);
		} else {
			return this.getToken(SystemVerilogParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_mintypmax_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_mintypmax_expression) {
			listener.enterConstant_mintypmax_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_mintypmax_expression) {
			listener.exitConstant_mintypmax_expression(this);
		}
	}
}


export class Constant_param_expressionContext extends ParserRuleContext {
	public constant_mintypmax_expression(): Constant_mintypmax_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
	}
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public DOL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_param_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_param_expression) {
			listener.enterConstant_param_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_param_expression) {
			listener.exitConstant_param_expression(this);
		}
	}
}


export class Param_expressionContext extends ParserRuleContext {
	public mintypmax_expression(): Mintypmax_expressionContext | undefined {
		return this.tryGetRuleContext(0, Mintypmax_expressionContext);
	}
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public DOL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_param_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterParam_expression) {
			listener.enterParam_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitParam_expression) {
			listener.exitParam_expression(this);
		}
	}
}


export class Constant_range_expressionContext extends ParserRuleContext {
	public constant_expression(): Constant_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_expressionContext);
	}
	public constant_part_select_range(): Constant_part_select_rangeContext | undefined {
		return this.tryGetRuleContext(0, Constant_part_select_rangeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_range_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_range_expression) {
			listener.enterConstant_range_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_range_expression) {
			listener.exitConstant_range_expression(this);
		}
	}
}


export class Constant_part_select_rangeContext extends ParserRuleContext {
	public constant_range(): Constant_rangeContext | undefined {
		return this.tryGetRuleContext(0, Constant_rangeContext);
	}
	public constant_indexed_range(): Constant_indexed_rangeContext | undefined {
		return this.tryGetRuleContext(0, Constant_indexed_rangeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_part_select_range; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_part_select_range) {
			listener.enterConstant_part_select_range(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_part_select_range) {
			listener.exitConstant_part_select_range(this);
		}
	}
}


export class Constant_rangeContext extends ParserRuleContext {
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	public COLON(): TerminalNode { return this.getToken(SystemVerilogParser.COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_range; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_range) {
			listener.enterConstant_range(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_range) {
			listener.exitConstant_range(this);
		}
	}
}


export class Constant_indexed_rangeContext extends ParserRuleContext {
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	public PLUSCOLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PLUSCOLON, 0); }
	public MINUSCOLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSCOLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_indexed_range; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_indexed_range) {
			listener.enterConstant_indexed_range(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_indexed_range) {
			listener.exitConstant_indexed_range(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	public primary(): PrimaryContext | undefined {
		return this.tryGetRuleContext(0, PrimaryContext);
	}
	public unary_operator(): Unary_operatorContext | undefined {
		return this.tryGetRuleContext(0, Unary_operatorContext);
	}
	public inc_or_dec_expression(): Inc_or_dec_expressionContext | undefined {
		return this.tryGetRuleContext(0, Inc_or_dec_expressionContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public operator_assignment(): Operator_assignmentContext | undefined {
		return this.tryGetRuleContext(0, Operator_assignmentContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public binary_operator(): Binary_operatorContext | undefined {
		return this.tryGetRuleContext(0, Binary_operatorContext);
	}
	public INSIDE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INSIDE, 0); }
	public OP_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRC, 0); }
	public open_range_list(): Open_range_listContext | undefined {
		return this.tryGetRuleContext(0, Open_range_listContext);
	}
	public CL_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRC, 0); }
	public QUES(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.QUES, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public tagged_union_expression(): Tagged_union_expressionContext | undefined {
		return this.tryGetRuleContext(0, Tagged_union_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterExpression) {
			listener.enterExpression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitExpression) {
			listener.exitExpression(this);
		}
	}
}


export class Tagged_union_expressionContext extends ParserRuleContext {
	public TAGGED(): TerminalNode { return this.getToken(SystemVerilogParser.TAGGED, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_tagged_union_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTagged_union_expression) {
			listener.enterTagged_union_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTagged_union_expression) {
			listener.exitTagged_union_expression(this);
		}
	}
}


export class Value_rangeContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public OP_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRK, 0); }
	public COLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COLON, 0); }
	public CL_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_value_range; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterValue_range) {
			listener.enterValue_range(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitValue_range) {
			listener.exitValue_range(this);
		}
	}
}


export class Mintypmax_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COLON);
		} else {
			return this.getToken(SystemVerilogParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_mintypmax_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterMintypmax_expression) {
			listener.enterMintypmax_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitMintypmax_expression) {
			listener.exitMintypmax_expression(this);
		}
	}
}


export class Part_select_rangeContext extends ParserRuleContext {
	public constant_range(): Constant_rangeContext | undefined {
		return this.tryGetRuleContext(0, Constant_rangeContext);
	}
	public indexed_range(): Indexed_rangeContext | undefined {
		return this.tryGetRuleContext(0, Indexed_rangeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_part_select_range; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPart_select_range) {
			listener.enterPart_select_range(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPart_select_range) {
			listener.exitPart_select_range(this);
		}
	}
}


export class Indexed_rangeContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public PLUSCOLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PLUSCOLON, 0); }
	public constant_expression(): Constant_expressionContext {
		return this.getRuleContext(0, Constant_expressionContext);
	}
	public MINUSCOLON(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSCOLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_indexed_range; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterIndexed_range) {
			listener.enterIndexed_range(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitIndexed_range) {
			listener.exitIndexed_range(this);
		}
	}
}


export class Genvar_expressionContext extends ParserRuleContext {
	public constant_expression(): Constant_expressionContext {
		return this.getRuleContext(0, Constant_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_genvar_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterGenvar_expression) {
			listener.enterGenvar_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitGenvar_expression) {
			listener.exitGenvar_expression(this);
		}
	}
}


export class Constant_primaryContext extends ParserRuleContext {
	public primary_literal(): Primary_literalContext | undefined {
		return this.tryGetRuleContext(0, Primary_literalContext);
	}
	public ps_ident(): Ps_identContext | undefined {
		return this.tryGetRuleContext(0, Ps_identContext);
	}
	public constant_select(): Constant_selectContext | undefined {
		return this.tryGetRuleContext(0, Constant_selectContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public OP_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRK, 0); }
	public constant_range_expression(): Constant_range_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_range_expressionContext);
	}
	public CL_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRK, 0); }
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	public constant_concatenation(): Constant_concatenationContext | undefined {
		return this.tryGetRuleContext(0, Constant_concatenationContext);
	}
	public constant_function_call(): Constant_function_callContext | undefined {
		return this.tryGetRuleContext(0, Constant_function_callContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public constant_mintypmax_expression(): Constant_mintypmax_expressionContext | undefined {
		return this.tryGetRuleContext(0, Constant_mintypmax_expressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public constant_cast(): Constant_castContext | undefined {
		return this.tryGetRuleContext(0, Constant_castContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_primary; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_primary) {
			listener.enterConstant_primary(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_primary) {
			listener.exitConstant_primary(this);
		}
	}
}


export class PrimaryContext extends ParserRuleContext {
	public primary_literal(): Primary_literalContext | undefined {
		return this.tryGetRuleContext(0, Primary_literalContext);
	}
	public hier_ident(): Hier_identContext | undefined {
		return this.tryGetRuleContext(0, Hier_identContext);
	}
	public select(): SelectContext | undefined {
		return this.tryGetRuleContext(0, SelectContext);
	}
	public class_qualifier(): Class_qualifierContext | undefined {
		return this.tryGetRuleContext(0, Class_qualifierContext);
	}
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	public empty_queue(): Empty_queueContext | undefined {
		return this.tryGetRuleContext(0, Empty_queueContext);
	}
	public concatenation(): ConcatenationContext | undefined {
		return this.tryGetRuleContext(0, ConcatenationContext);
	}
	public OP_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRK, 0); }
	public range_expression(): Range_expressionContext | undefined {
		return this.tryGetRuleContext(0, Range_expressionContext);
	}
	public CL_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRK, 0); }
	public multiple_concatenation(): Multiple_concatenationContext | undefined {
		return this.tryGetRuleContext(0, Multiple_concatenationContext);
	}
	public function_subroutine_call(): Function_subroutine_callContext | undefined {
		return this.tryGetRuleContext(0, Function_subroutine_callContext);
	}
	public OP_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_PRN, 0); }
	public mintypmax_expression(): Mintypmax_expressionContext | undefined {
		return this.tryGetRuleContext(0, Mintypmax_expressionContext);
	}
	public CL_PRN(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_PRN, 0); }
	public cast(): CastContext | undefined {
		return this.tryGetRuleContext(0, CastContext);
	}
	public THIS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.THIS, 0); }
	public DOL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOL, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_primary; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPrimary) {
			listener.enterPrimary(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPrimary) {
			listener.exitPrimary(this);
		}
	}
}


export class Class_qualifierContext extends ParserRuleContext {
	public SCOPE_LOCAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SCOPE_LOCAL, 0); }
	public implicit_class_handle(): Implicit_class_handleContext | undefined {
		return this.tryGetRuleContext(0, Implicit_class_handleContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public class_scope(): Class_scopeContext | undefined {
		return this.tryGetRuleContext(0, Class_scopeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_class_qualifier; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterClass_qualifier) {
			listener.enterClass_qualifier(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitClass_qualifier) {
			listener.exitClass_qualifier(this);
		}
	}
}


export class Range_expressionContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public part_select_range(): Part_select_rangeContext | undefined {
		return this.tryGetRuleContext(0, Part_select_rangeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_range_expression; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterRange_expression) {
			listener.enterRange_expression(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitRange_expression) {
			listener.exitRange_expression(this);
		}
	}
}


export class Primary_literalContext extends ParserRuleContext {
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public time_literal(): Time_literalContext | undefined {
		return this.tryGetRuleContext(0, Time_literalContext);
	}
	public UNBASED_UNSIZED_LITERAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNBASED_UNSIZED_LITERAL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_primary_literal; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPrimary_literal) {
			listener.enterPrimary_literal(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPrimary_literal) {
			listener.exitPrimary_literal(this);
		}
	}
}


export class Time_literalContext extends ParserRuleContext {
	public UNSIGNED_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNSIGNED_NUMBER, 0); }
	public TIME_UNIT(): TerminalNode { return this.getToken(SystemVerilogParser.TIME_UNIT, 0); }
	public FIXED_POINT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FIXED_POINT_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_time_literal; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterTime_literal) {
			listener.enterTime_literal(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitTime_literal) {
			listener.exitTime_literal(this);
		}
	}
}


export class Implicit_class_handleContext extends ParserRuleContext {
	public THIS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.THIS, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SUPER, 0); }
	public THISSUPER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.THISSUPER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_implicit_class_handle; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterImplicit_class_handle) {
			listener.enterImplicit_class_handle(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitImplicit_class_handle) {
			listener.exitImplicit_class_handle(this);
		}
	}
}


export class Bit_selectContext extends ParserRuleContext {
	public OP_BRK(): TerminalNode[];
	public OP_BRK(i: number): TerminalNode;
	public OP_BRK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.OP_BRK);
		} else {
			return this.getToken(SystemVerilogParser.OP_BRK, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public CL_BRK(): TerminalNode[];
	public CL_BRK(i: number): TerminalNode;
	public CL_BRK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.CL_BRK);
		} else {
			return this.getToken(SystemVerilogParser.CL_BRK, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_bit_select; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterBit_select) {
			listener.enterBit_select(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitBit_select) {
			listener.exitBit_select(this);
		}
	}
}


export class SelectContext extends ParserRuleContext {
	public bit_select(): Bit_selectContext[];
	public bit_select(i: number): Bit_selectContext;
	public bit_select(i?: number): Bit_selectContext | Bit_selectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bit_selectContext);
		} else {
			return this.getRuleContext(i, Bit_selectContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.DOT);
		} else {
			return this.getToken(SystemVerilogParser.DOT, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public OP_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRK, 0); }
	public part_select_range(): Part_select_rangeContext | undefined {
		return this.tryGetRuleContext(0, Part_select_rangeContext);
	}
	public CL_BRK(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_select; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterSelect) {
			listener.enterSelect(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitSelect) {
			listener.exitSelect(this);
		}
	}
}


export class Nonrange_selectContext extends ParserRuleContext {
	public bit_select(): Bit_selectContext[];
	public bit_select(i: number): Bit_selectContext;
	public bit_select(i?: number): Bit_selectContext | Bit_selectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bit_selectContext);
		} else {
			return this.getRuleContext(i, Bit_selectContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.DOT);
		} else {
			return this.getToken(SystemVerilogParser.DOT, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_nonrange_select; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNonrange_select) {
			listener.enterNonrange_select(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNonrange_select) {
			listener.exitNonrange_select(this);
		}
	}
}


export class Constant_bit_selectContext extends ParserRuleContext {
	public OP_BRK(): TerminalNode[];
	public OP_BRK(i: number): TerminalNode;
	public OP_BRK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.OP_BRK);
		} else {
			return this.getToken(SystemVerilogParser.OP_BRK, i);
		}
	}
	public constant_expression(): Constant_expressionContext[];
	public constant_expression(i: number): Constant_expressionContext;
	public constant_expression(i?: number): Constant_expressionContext | Constant_expressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_expressionContext);
		} else {
			return this.getRuleContext(i, Constant_expressionContext);
		}
	}
	public CL_BRK(): TerminalNode[];
	public CL_BRK(i: number): TerminalNode;
	public CL_BRK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.CL_BRK);
		} else {
			return this.getToken(SystemVerilogParser.CL_BRK, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_bit_select; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_bit_select) {
			listener.enterConstant_bit_select(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_bit_select) {
			listener.exitConstant_bit_select(this);
		}
	}
}


export class Constant_selectContext extends ParserRuleContext {
	public constant_bit_select(): Constant_bit_selectContext[];
	public constant_bit_select(i: number): Constant_bit_selectContext;
	public constant_bit_select(i?: number): Constant_bit_selectContext | Constant_bit_selectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_bit_selectContext);
		} else {
			return this.getRuleContext(i, Constant_bit_selectContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.DOT);
		} else {
			return this.getToken(SystemVerilogParser.DOT, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_select; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_select) {
			listener.enterConstant_select(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_select) {
			listener.exitConstant_select(this);
		}
	}
}


export class Constant_castContext extends ParserRuleContext {
	public OP_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.OP_PRN, 0); }
	public casting_type(): Casting_typeContext {
		return this.getRuleContext(0, Casting_typeContext);
	}
	public CL_PRN(): TerminalNode[];
	public CL_PRN(i: number): TerminalNode;
	public CL_PRN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.CL_PRN);
		} else {
			return this.getToken(SystemVerilogParser.CL_PRN, i);
		}
	}
	public OP_CAST(): TerminalNode { return this.getToken(SystemVerilogParser.OP_CAST, 0); }
	public constant_expression(): Constant_expressionContext {
		return this.getRuleContext(0, Constant_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_constant_cast; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterConstant_cast) {
			listener.enterConstant_cast(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitConstant_cast) {
			listener.exitConstant_cast(this);
		}
	}
}


export class CastContext extends ParserRuleContext {
	public casting_type(): Casting_typeContext {
		return this.getRuleContext(0, Casting_typeContext);
	}
	public OP_CAST(): TerminalNode { return this.getToken(SystemVerilogParser.OP_CAST, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.CL_PRN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_cast; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterCast) {
			listener.enterCast(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitCast) {
			listener.exitCast(this);
		}
	}
}


export class Net_lvalueContext extends ParserRuleContext {
	public ps_or_hier_ident(): Ps_or_hier_identContext | undefined {
		return this.tryGetRuleContext(0, Ps_or_hier_identContext);
	}
	public constant_select(): Constant_selectContext | undefined {
		return this.tryGetRuleContext(0, Constant_selectContext);
	}
	public OP_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRC, 0); }
	public net_lvalue(): Net_lvalueContext[];
	public net_lvalue(i: number): Net_lvalueContext;
	public net_lvalue(i?: number): Net_lvalueContext | Net_lvalueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Net_lvalueContext);
		} else {
			return this.getRuleContext(i, Net_lvalueContext);
		}
	}
	public CL_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRC, 0); }
	public COM(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.COM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_net_lvalue; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNet_lvalue) {
			listener.enterNet_lvalue(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNet_lvalue) {
			listener.exitNet_lvalue(this);
		}
	}
}


export class Variable_lvalueContext extends ParserRuleContext {
	public hier_ident(): Hier_identContext | undefined {
		return this.tryGetRuleContext(0, Hier_identContext);
	}
	public select(): SelectContext | undefined {
		return this.tryGetRuleContext(0, SelectContext);
	}
	public implicit_class_handle(): Implicit_class_handleContext | undefined {
		return this.tryGetRuleContext(0, Implicit_class_handleContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	public OP_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OP_BRC, 0); }
	public variable_lvalue(): Variable_lvalueContext[];
	public variable_lvalue(i: number): Variable_lvalueContext;
	public variable_lvalue(i?: number): Variable_lvalueContext | Variable_lvalueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Variable_lvalueContext);
		} else {
			return this.getRuleContext(i, Variable_lvalueContext);
		}
	}
	public CL_BRC(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CL_BRC, 0); }
	public COM(): TerminalNode[];
	public COM(i: number): TerminalNode;
	public COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.COM);
		} else {
			return this.getToken(SystemVerilogParser.COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_variable_lvalue; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterVariable_lvalue) {
			listener.enterVariable_lvalue(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitVariable_lvalue) {
			listener.exitVariable_lvalue(this);
		}
	}
}


export class Non_range_variable_lvalueContext extends ParserRuleContext {
	public hier_ident(): Hier_identContext {
		return this.getRuleContext(0, Hier_identContext);
	}
	public nonrange_select(): Nonrange_selectContext {
		return this.getRuleContext(0, Nonrange_selectContext);
	}
	public implicit_class_handle(): Implicit_class_handleContext | undefined {
		return this.tryGetRuleContext(0, Implicit_class_handleContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DOT, 0); }
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_non_range_variable_lvalue; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNon_range_variable_lvalue) {
			listener.enterNon_range_variable_lvalue(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNon_range_variable_lvalue) {
			listener.exitNon_range_variable_lvalue(this);
		}
	}
}


export class NumberContext extends ParserRuleContext {
	public integral_number(): Integral_numberContext | undefined {
		return this.tryGetRuleContext(0, Integral_numberContext);
	}
	public real_number(): Real_numberContext | undefined {
		return this.tryGetRuleContext(0, Real_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_number; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterNumber) {
			listener.enterNumber(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitNumber) {
			listener.exitNumber(this);
		}
	}
}


export class Integral_numberContext extends ParserRuleContext {
	public BINARY_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.BINARY_NUMBER, 0); }
	public OCTAL_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OCTAL_NUMBER, 0); }
	public HEX_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.HEX_NUMBER, 0); }
	public decimal_number(): Decimal_numberContext | undefined {
		return this.tryGetRuleContext(0, Decimal_numberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_integral_number; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterIntegral_number) {
			listener.enterIntegral_number(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitIntegral_number) {
			listener.exitIntegral_number(this);
		}
	}
}


export class Decimal_numberContext extends ParserRuleContext {
	public UNSIGNED_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.UNSIGNED_NUMBER, 0); }
	public SIZED_UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SIZED_UNSIGNED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_decimal_number; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterDecimal_number) {
			listener.enterDecimal_number(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitDecimal_number) {
			listener.exitDecimal_number(this);
		}
	}
}


export class Real_numberContext extends ParserRuleContext {
	public FIXED_POINT_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.FIXED_POINT_NUMBER, 0); }
	public SCIENCE_NUMBER(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SCIENCE_NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_real_number; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterReal_number) {
			listener.enterReal_number(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitReal_number) {
			listener.exitReal_number(this);
		}
	}
}


export class Unary_operatorContext extends ParserRuleContext {
	public INVXOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVXOR, 0); }
	public INVAND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVAND, 0); }
	public INVOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVOR, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NOT, 0); }
	public INV(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INV, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OR, 0); }
	public XOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_unary_operator; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterUnary_operator) {
			listener.enterUnary_operator(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitUnary_operator) {
			listener.exitUnary_operator(this);
		}
	}
}


export class Binary_operatorContext extends ParserRuleContext {
	public EQEQQUES(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQEQQUES, 0); }
	public NOTEQQUES(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NOTEQQUES, 0); }
	public EQEQEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQEQEQ, 0); }
	public NOTEQEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NOTEQEQ, 0); }
	public GTGTGT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.GTGTGT, 0); }
	public LTLTLT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LTLTLT, 0); }
	public LTMINUSGT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LTMINUSGT, 0); }
	public EQEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQEQ, 0); }
	public NOTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NOTEQ, 0); }
	public ANDAND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ANDAND, 0); }
	public OROR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OROR, 0); }
	public MULTMULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MULTMULT, 0); }
	public LTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LTEQ, 0); }
	public GTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.GTEQ, 0); }
	public XORINV(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XORINV, 0); }
	public INVXOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVXOR, 0); }
	public GTGT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.GTGT, 0); }
	public LTLT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LTLT, 0); }
	public MINUSGT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSGT, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUS, 0); }
	public MULT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MULT, 0); }
	public DIV(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.DIV, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MOD, 0); }
	public LT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.LT, 0); }
	public GT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.GT, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OR, 0); }
	public XOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_binary_operator; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterBinary_operator) {
			listener.enterBinary_operator(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitBinary_operator) {
			listener.exitBinary_operator(this);
		}
	}
}


export class Inc_or_dec_operatorContext extends ParserRuleContext {
	public PLUSPLUS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PLUSPLUS, 0); }
	public MINUSMINUS(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.MINUSMINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_inc_or_dec_operator; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterInc_or_dec_operator) {
			listener.enterInc_or_dec_operator(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitInc_or_dec_operator) {
			listener.exitInc_or_dec_operator(this);
		}
	}
}


export class Unary_module_path_operatorContext extends ParserRuleContext {
	public INVOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVOR, 0); }
	public INVAND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVAND, 0); }
	public INVXOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVXOR, 0); }
	public XORINV(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XORINV, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NOT, 0); }
	public INV(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INV, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OR, 0); }
	public XOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_unary_module_path_operator; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterUnary_module_path_operator) {
			listener.enterUnary_module_path_operator(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitUnary_module_path_operator) {
			listener.exitUnary_module_path_operator(this);
		}
	}
}


export class Binary_module_path_operatorContext extends ParserRuleContext {
	public EQEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.EQEQ, 0); }
	public NOTEQ(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.NOTEQ, 0); }
	public ANDAND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.ANDAND, 0); }
	public OROR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OROR, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.OR, 0); }
	public XOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XOR, 0); }
	public XORINV(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.XORINV, 0); }
	public INVXOR(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.INVXOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_binary_module_path_operator; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterBinary_module_path_operator) {
			listener.enterBinary_module_path_operator(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitBinary_module_path_operator) {
			listener.exitBinary_module_path_operator(this);
		}
	}
}


export class Package_scopeContext extends ParserRuleContext {
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public SCOPE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SCOPE, 0); }
	public SCOPE_UNIT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.SCOPE_UNIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_package_scope; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPackage_scope) {
			listener.enterPackage_scope(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPackage_scope) {
			listener.exitPackage_scope(this);
		}
	}
}


export class IdentContext extends ParserRuleContext {
	public IDENT(): TerminalNode { return this.getToken(SystemVerilogParser.IDENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_ident; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterIdent) {
			listener.enterIdent(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitIdent) {
			listener.exitIdent(this);
		}
	}
}


export class Ps_identContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public package_scope(): Package_scopeContext | undefined {
		return this.tryGetRuleContext(0, Package_scopeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_ps_ident; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPs_ident) {
			listener.enterPs_ident(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPs_ident) {
			listener.exitPs_ident(this);
		}
	}
}


export class Hier_identContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public CLASS_ROOT(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.CLASS_ROOT, 0); }
	public constant_bit_select(): Constant_bit_selectContext[];
	public constant_bit_select(i: number): Constant_bit_selectContext;
	public constant_bit_select(i?: number): Constant_bit_selectContext | Constant_bit_selectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Constant_bit_selectContext);
		} else {
			return this.getRuleContext(i, Constant_bit_selectContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.DOT);
		} else {
			return this.getToken(SystemVerilogParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_hier_ident; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterHier_ident) {
			listener.enterHier_ident(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitHier_ident) {
			listener.exitHier_ident(this);
		}
	}
}


export class Ps_or_hier_identContext extends ParserRuleContext {
	public ps_ident(): Ps_identContext | undefined {
		return this.tryGetRuleContext(0, Ps_identContext);
	}
	public hier_ident(): Hier_identContext | undefined {
		return this.tryGetRuleContext(0, Hier_identContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_ps_or_hier_ident; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPs_or_hier_ident) {
			listener.enterPs_or_hier_ident(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPs_or_hier_ident) {
			listener.exitPs_or_hier_ident(this);
		}
	}
}


export class Pp_textContext extends ParserRuleContext {
	public pp_directive(): Pp_directiveContext[];
	public pp_directive(i: number): Pp_directiveContext;
	public pp_directive(i?: number): Pp_directiveContext | Pp_directiveContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pp_directiveContext);
		} else {
			return this.getRuleContext(i, Pp_directiveContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_text; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_text) {
			listener.enterPp_text(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_text) {
			listener.exitPp_text(this);
		}
	}
}


export class Pp_directiveContext extends ParserRuleContext {
	public pp_default_nettype(): Pp_default_nettypeContext | undefined {
		return this.tryGetRuleContext(0, Pp_default_nettypeContext);
	}
	public pp_timescale(): Pp_timescaleContext | undefined {
		return this.tryGetRuleContext(0, Pp_timescaleContext);
	}
	public pp_include(): Pp_includeContext | undefined {
		return this.tryGetRuleContext(0, Pp_includeContext);
	}
	public pp_define_only(): Pp_define_onlyContext | undefined {
		return this.tryGetRuleContext(0, Pp_define_onlyContext);
	}
	public pp_define_noarg(): Pp_define_noargContext | undefined {
		return this.tryGetRuleContext(0, Pp_define_noargContext);
	}
	public pp_define_arg(): Pp_define_argContext | undefined {
		return this.tryGetRuleContext(0, Pp_define_argContext);
	}
	public pp_undef(): Pp_undefContext | undefined {
		return this.tryGetRuleContext(0, Pp_undefContext);
	}
	public pp_call_noarg(): Pp_call_noargContext | undefined {
		return this.tryGetRuleContext(0, Pp_call_noargContext);
	}
	public pp_call_arg(): Pp_call_argContext | undefined {
		return this.tryGetRuleContext(0, Pp_call_argContext);
	}
	public pp_ifdef(): Pp_ifdefContext | undefined {
		return this.tryGetRuleContext(0, Pp_ifdefContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_directive; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_directive) {
			listener.enterPp_directive(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_directive) {
			listener.exitPp_directive(this);
		}
	}
}


export class Pp_default_nettypeContext extends ParserRuleContext {
	public PP_DEFAULT_NETTYPE(): TerminalNode { return this.getToken(SystemVerilogParser.PP_DEFAULT_NETTYPE, 0); }
	public PP_DEFAULT_NETTYPE_VALUE(): TerminalNode { return this.getToken(SystemVerilogParser.PP_DEFAULT_NETTYPE_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_default_nettype; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_default_nettype) {
			listener.enterPp_default_nettype(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_default_nettype) {
			listener.exitPp_default_nettype(this);
		}
	}
}


export class Pp_timescaleContext extends ParserRuleContext {
	public PP_TIMESCALE(): TerminalNode { return this.getToken(SystemVerilogParser.PP_TIMESCALE, 0); }
	public PP_UNSIGNED_NUMBER(): TerminalNode[];
	public PP_UNSIGNED_NUMBER(i: number): TerminalNode;
	public PP_UNSIGNED_NUMBER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.PP_UNSIGNED_NUMBER);
		} else {
			return this.getToken(SystemVerilogParser.PP_UNSIGNED_NUMBER, i);
		}
	}
	public PP_TIME_UNIT(): TerminalNode[];
	public PP_TIME_UNIT(i: number): TerminalNode;
	public PP_TIME_UNIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.PP_TIME_UNIT);
		} else {
			return this.getToken(SystemVerilogParser.PP_TIME_UNIT, i);
		}
	}
	public PP_DIV(): TerminalNode { return this.getToken(SystemVerilogParser.PP_DIV, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_timescale; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_timescale) {
			listener.enterPp_timescale(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_timescale) {
			listener.exitPp_timescale(this);
		}
	}
}


export class Pp_includeContext extends ParserRuleContext {
	public PP_INCLUDE(): TerminalNode { return this.getToken(SystemVerilogParser.PP_INCLUDE, 0); }
	public PP_STRING(): TerminalNode { return this.getToken(SystemVerilogParser.PP_STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_include; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_include) {
			listener.enterPp_include(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_include) {
			listener.exitPp_include(this);
		}
	}
}


export class Pp_define_onlyContext extends ParserRuleContext {
	public PP_DEFINE(): TerminalNode { return this.getToken(SystemVerilogParser.PP_DEFINE, 0); }
	public DF_IDENT(): TerminalNode { return this.getToken(SystemVerilogParser.DF_IDENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_define_only; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_define_only) {
			listener.enterPp_define_only(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_define_only) {
			listener.exitPp_define_only(this);
		}
	}
}


export class Pp_define_noargContext extends ParserRuleContext {
	public PP_DEFINE(): TerminalNode { return this.getToken(SystemVerilogParser.PP_DEFINE, 0); }
	public DF_MACRO_NAME_NOARG(): TerminalNode { return this.getToken(SystemVerilogParser.DF_MACRO_NAME_NOARG, 0); }
	public DFTX_MACRO_TEXT(): TerminalNode { return this.getToken(SystemVerilogParser.DFTX_MACRO_TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_define_noarg; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_define_noarg) {
			listener.enterPp_define_noarg(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_define_noarg) {
			listener.exitPp_define_noarg(this);
		}
	}
}


export class Pp_define_argContext extends ParserRuleContext {
	public PP_DEFINE(): TerminalNode { return this.getToken(SystemVerilogParser.PP_DEFINE, 0); }
	public DF_MACRO_NAME_ARG(): TerminalNode { return this.getToken(SystemVerilogParser.DF_MACRO_NAME_ARG, 0); }
	public DFAG_IDENT(): TerminalNode[];
	public DFAG_IDENT(i: number): TerminalNode;
	public DFAG_IDENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.DFAG_IDENT);
		} else {
			return this.getToken(SystemVerilogParser.DFAG_IDENT, i);
		}
	}
	public DFAG_CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.DFAG_CL_PRN, 0); }
	public DFTX_MACRO_TEXT(): TerminalNode { return this.getToken(SystemVerilogParser.DFTX_MACRO_TEXT, 0); }
	public DFAG_COM(): TerminalNode[];
	public DFAG_COM(i: number): TerminalNode;
	public DFAG_COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.DFAG_COM);
		} else {
			return this.getToken(SystemVerilogParser.DFAG_COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_define_arg; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_define_arg) {
			listener.enterPp_define_arg(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_define_arg) {
			listener.exitPp_define_arg(this);
		}
	}
}


export class Pp_undefContext extends ParserRuleContext {
	public PP_UNDEF(): TerminalNode { return this.getToken(SystemVerilogParser.PP_UNDEF, 0); }
	public PP_IDENT(): TerminalNode { return this.getToken(SystemVerilogParser.PP_IDENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_undef; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_undef) {
			listener.enterPp_undef(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_undef) {
			listener.exitPp_undef(this);
		}
	}
}


export class Pp_call_noargContext extends ParserRuleContext {
	public PP_CALL_NOARG(): TerminalNode { return this.getToken(SystemVerilogParser.PP_CALL_NOARG, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_call_noarg; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_call_noarg) {
			listener.enterPp_call_noarg(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_call_noarg) {
			listener.exitPp_call_noarg(this);
		}
	}
}


export class Pp_call_argContext extends ParserRuleContext {
	public PP_CALL_ARG(): TerminalNode { return this.getToken(SystemVerilogParser.PP_CALL_ARG, 0); }
	public PPCL_IDENT(): TerminalNode[];
	public PPCL_IDENT(i: number): TerminalNode;
	public PPCL_IDENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.PPCL_IDENT);
		} else {
			return this.getToken(SystemVerilogParser.PPCL_IDENT, i);
		}
	}
	public PPCL_CL_PRN(): TerminalNode { return this.getToken(SystemVerilogParser.PPCL_CL_PRN, 0); }
	public PPCL_COM(): TerminalNode[];
	public PPCL_COM(i: number): TerminalNode;
	public PPCL_COM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.PPCL_COM);
		} else {
			return this.getToken(SystemVerilogParser.PPCL_COM, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_call_arg; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_call_arg) {
			listener.enterPp_call_arg(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_call_arg) {
			listener.exitPp_call_arg(this);
		}
	}
}


export class Pp_ifdefContext extends ParserRuleContext {
	public PP_IDENT(): TerminalNode[];
	public PP_IDENT(i: number): TerminalNode;
	public PP_IDENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.PP_IDENT);
		} else {
			return this.getToken(SystemVerilogParser.PP_IDENT, i);
		}
	}
	public PP_ENDIF(): TerminalNode { return this.getToken(SystemVerilogParser.PP_ENDIF, 0); }
	public PP_IFDEF(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PP_IFDEF, 0); }
	public PP_IFNDEF(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PP_IFNDEF, 0); }
	public pp_ifdef(): Pp_ifdefContext[];
	public pp_ifdef(i: number): Pp_ifdefContext;
	public pp_ifdef(i?: number): Pp_ifdefContext | Pp_ifdefContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pp_ifdefContext);
		} else {
			return this.getRuleContext(i, Pp_ifdefContext);
		}
	}
	public PP_ELIF(): TerminalNode[];
	public PP_ELIF(i: number): TerminalNode;
	public PP_ELIF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(SystemVerilogParser.PP_ELIF);
		} else {
			return this.getToken(SystemVerilogParser.PP_ELIF, i);
		}
	}
	public PP_ELSE(): TerminalNode | undefined { return this.tryGetToken(SystemVerilogParser.PP_ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return SystemVerilogParser.RULE_pp_ifdef; }
	// @Override
	public enterRule(listener: SystemVerilogParserListener): void {
		if (listener.enterPp_ifdef) {
			listener.enterPp_ifdef(this);
		}
	}
	// @Override
	public exitRule(listener: SystemVerilogParserListener): void {
		if (listener.exitPp_ifdef) {
			listener.exitPp_ifdef(this);
		}
	}
}


